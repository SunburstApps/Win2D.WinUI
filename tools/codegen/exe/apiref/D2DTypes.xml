<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<D2DTypes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="D2DTypes.xsd">
    <FileDependency Name="D2DTypes2.xml" />
    <FileDependency Name="D2DEffectAuthor.xml" />
    <FileDependency Name="D2DTypesP.xml" /> 
    <FileDependency Name="D2DTestTypes.xml" /> 
    <FileDependency Name="D2DTypes3.xml" />
    <FileDependency Name="D2DTypes4.xml" />
    <FileDependency Name="D2DEffectAuthor1.xml" />

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Common primitive types                                        -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <Primitive Name="HWND" /> <!-- HWNDs have variable size -->
    <Primitive Name="HDC" /> <!-- HDCs have variable size -->
    <Primitive Name="PCWSTR" AlwaysConst="true" /> <!-- Pointers have variable size -->
    <Primitive Name="LOGFONTW" />
    <Primitive Name="DWRITE_GLYPH_RUN" />
    <Primitive Name="DWRITE_GLYPH_RUN_DESCRIPTION" />
    <Primitive Name="DWRITE_GLYPH_IMAGE_FORMATS" />
    <Primitive Name="REFIID" AlwaysConst="true" />
    <Primitive Name="void" Size="0" />
    <Primitive Name="BYTE" Size="1" />
    <Primitive Name="CHAR" Size="1" />
    <Primitive Name="WCHAR" Size="2" />
    <Primitive Name="FLOAT" Size="4" />
    <Primitive Name="INT16" Size="2" />
    <Primitive Name="UINT16" Size="2" />
    <Primitive Name="USHORT" Size="2" />
    <Primitive Name="INT32" Size="4" />
    <Primitive Name="UINT32" Size="4" />
    <Primitive Name="INT64" Size="8" />
    <Primitive Name="UINT64" Size="8" />
    <Primitive Name="DWORD" Size="4" />
    <Primitive Name="LONG" Size="4" />
    <Primitive Name="ULONG" Size="4" />
    <Primitive Name="SIZE_T" />
    <Primitive Name="HANDLE" AlwaysConst="true" />
    <Primitive Name="BOOL" Size="4" />

    <!-- We treat hresults as seperate primitives because this helps with validation -->
    <Primitive Name="HRESULT" Size="4" />
    <Primitive Name="GUID" Size="16" />

    <!-- Trivial typedefs of primitives that we want code-gen to be aware of -->
    <Typedef Name="IID" From="GUID" />

    <!-- Trivial interface definitions -->
    <Interface Name="IDXGISurface" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IDXGISwapChain" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="ID3D11Texture2D" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="ID3D11Device" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IDWriteFontFace" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IDWriteTextFormat" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IDWriteTextLayout" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IDWriteRenderingParams" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IWICBitmapSource" Extends="IUnknown" IsInternalPlainDecl="true" />
    <Interface Name="IWICBitmapFrameDecode" Extends="IWICBitmapSource" IsInternalPlainDecl="true" />
    <Interface Name="IWICBitmap" Extends="IWICBitmapSource" IsInternalPlainDecl="true" />
    <Interface Name="IWICBitmapLock" Extends="IUnknown" IsInternalPlainDecl="true" />

    <Enum Name="DWRITE_MEASURING_MODE">
        <Field Name="NATURAL" />
        <Field Name="GDI_CLASSIC" />
        <Field Name="GDI_NATURAL" />
    </Enum>

    <!-- These enums are globally defined, we want to define the common formats that we use in our API -->
    <Enum Name="DXGI_FORMAT" ShouldValidate="false" />
    <Enum Name="DXGI_COLOR_SPACE_TYPE" ShouldValidate="false" />
    <Enum Name="DXGI_HDR_METADATA_TYPE" ShouldValidate="false" />

  <!-- These types are globally defined, we want a definition here, we won't do anything except alias them -->

    <Struct Name="POINT">
        <Field Name="x" Type="LONG" />
        <Field Name="y" Type="LONG" />
    </Struct>

    <Struct Name="RECT">
        <Field Name="left" Type="LONG" />
        <Field Name="top" Type="LONG" />
        <Field Name="right" Type="LONG" />
        <Field Name="bottom" Type="LONG" />
    </Struct>

    <Struct Name="D3DCOLORVALUE">
        <Field Name="r" Type="FLOAT" />
        <Field Name="g" Type="FLOAT" />
        <Field Name="b" Type="FLOAT" />
        <Field Name="a" Type="FLOAT" />
    </Struct>

    <!-- Interfaces here -->
    <Interface Name="IUnknown" IsInternalPlainDecl="true">
        <Method Name="QueryInterface" LockingModel="None">
            <Parameter Name="riid" Type="IID" Form="reference" />
            <Parameter Name="ppv" Type="void" Form="deref out pointer com" />
        </Method>
        <Method Name="AddRef" Return="ULONG" LockingModel="None" />
        <Method Name="Release" Return="ULONG" LockingModel="Complex" />
    </Interface>

    <!-- These types are in the D2D namespace -->

    <Namespace Name="D2D">

        <Struct Name="POINT_2U" Comment="Represents an x-coordinate and y-coordinate pair in two-dimensional space.">
            <Field Name="x" Type="UINT32" />
            <Field Name="y" Type="UINT32" />
        </Struct>

        <Struct Name="POINT_2F" Comment="Represents an x-coordinate and y-coordinate pair in two-dimensional space.">
            <Field Name="x" Type="FLOAT" />
            <Field Name="y" Type="FLOAT" />
        </Struct>

        <Struct Name="SIZE_F" Comment="Stores an ordered pair of floats, typically the width and height of a rectangle.">
            <Field Name="width" Type="FLOAT" />
            <Field Name="height" Type="FLOAT" />
        </Struct>

        <Struct Name="RECT_F" Comment="Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom).">
            <Field Name="left" Type="FLOAT" />
            <Field Name="top" Type="FLOAT" />
            <Field Name="right" Type="FLOAT" />
            <Field Name="bottom" Type="FLOAT" />
        </Struct>

        <Struct Name="RECT_U" Comment="Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom).">
            <Field Name="left" Type="UINT32" />
            <Field Name="top" Type="UINT32" />
            <Field Name="right" Type="UINT32" />
            <Field Name="bottom" Type="UINT32" />
        </Struct>

        <Struct Name="SIZE_U" Comment="Stores an ordered pair of integers, typically the width and height of a rectangle.">
            <Field Name="width" Type="UINT32" />
            <Field Name="height" Type="UINT32" />
        </Struct>

        <Struct Name="MATRIX_3X2_F" Comment="Represents a 3-by-2 matrix.">
            <Field Name="_11" Type="FLOAT" />
            <Field Name="_12" Type="FLOAT" />
            <Field Name="_21" Type="FLOAT" />
            <Field Name="_22" Type="FLOAT" />
            <Field Name="_31" Type="FLOAT" />
            <Field Name="_32" Type="FLOAT" />
        </Struct>

        <Typedef Name="COLOR_F" From="D3DCOLORVALUE" />

        <Typedef Name="RECT_L" From="RECT" />

    </Namespace> <!-- D2D -->

    <!--D2D1 Namespace for these types -->
    <Namespace Name="D2D1">

        <!-- Enums -->
        <Enum Name="ARC_SIZE" Comment="Differentiates which of the two possible arcs could match the given arc parameters.">
            <Field Name="SMALL" Value="0" />
            <Field Name="LARGE" Value="1" />
        </Enum>

        <Enum Name="GEOMETRY_SIMPLIFICATION_OPTION" Comment="Specifies how simple the output of a simplified geometry sink should be.">
            <Field Name="CUBICS_AND_LINES" Value="0" />
            <Field Name="LINES" Value="1" />
        </Enum>

        <Enum Name="BITMAP_INTERPOLATION_MODE" Comment="Specifies the algorithm that is used when images are scaled or rotated. Note Starting in Windows 8, more interpolations modes are available. See D2D1_INTERPOLATION_MODE for more info.">
            <Field Name="NEAREST_NEIGHBOR" Value="D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR" NumericalValue="0" Comment="Nearest Neighbor filtering. Also known as nearest pixel or nearest point sampling." />

            <Field Name="LINEAR" Value="D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR" NumericalValue="1" Comment="Linear filtering." />
        </Enum>

        <Enum Name="GAMMA" Comment="This determines what gamma is used for interpolation/blending.">
            <Field Name="2_2" Value="0" Comment="Colors are manipulated in 2.2 gamma color space." />
            <Field Name="1_0" Value="1" Comment="Colors are manipulated in 1.0 gamma color space." />
        </Enum>

        <Enum Name="OPACITY_MASK_CONTENT" Comment="Specifies what the contents are of an opacity mask.">
            <Field Name="GRAPHICS" Value="0" Comment="The mask contains geometries or bitmaps." />
            <Field Name="TEXT_NATURAL" Value="1" Comment="The mask contains text rendered using one of the natural text modes." />
            <Field Name="TEXT_GDI_COMPATIBLE" Value="2" Comment="The mask contains text rendered using one of the GDI compatible text modes." />
        </Enum>

        <Enum Name="COMBINE_MODE" Comment="This enumeration describes the type of combine operation to be performed.">

            <Field Name="UNION" Value="0" Comment="Produce a geometry representing the set of points contained in either&#xD;&#xA;                            the first or the second geometry." />

            <Field Name="INTERSECT" Value="1" Comment="Produce a geometry representing the set of points common to the first&#xD;&#xA;                            and the second geometries." />

            <Field Name="XOR" Value="2" Comment="Produce a geometry representing the set of points contained in the&#xD;&#xA;                            first geometry or the second geometry, but not both." />

            <Field Name="EXCLUDE" Value="3" Comment="Produce a geometry representing the set of points contained in the&#xD;&#xA;                            first geometry but not the second geometry." />
        </Enum>

        <Enum Name="DASH_STYLE" Comment="Describes the sequence of dashes and gaps in a stroke.">
            <Field Name="SOLID" Value="0" />
            <Field Name="DASH" Value="1" />
            <Field Name="DOT" Value="2" />
            <Field Name="DASH_DOT" Value="3" />
            <Field Name="DASH_DOT_DOT" Value="4" />
            <Field Name="CUSTOM" Value="5" />
        </Enum>

        <Enum Name="DEBUG_LEVEL" Comment="Indicates the debug level to be output by the debug layer.">
            <Field Name="NONE" Value="0" />
            <Field Name="ERROR" Value="1" />
            <Field Name="WARNING" Value="2" />
            <Field Name="INFORMATION" Value="3" />
        </Enum>

        <Enum Name="DRAW_TEXT_OPTIONS" IsFlags="true" Comment="Modifications made to the draw text call that influence how the text is rendered.">
            <Field Name="NO_SNAP" Value="0x00000001" Comment="Do not snap the baseline of the text vertically." />
            <Field Name="CLIP" Value="0x00000002" Comment="Clip the text to the content bounds." />
            <Field Name="ENABLE_COLOR_FONT" Value="0x00000004" Comment="Render color versions of glyphs if defined by the font." />
            <Field Name="DISABLE_COLOR_BITMAP_SNAPPING" Value="0x00000008" Comment="Bitmap origins of color glyph bitmaps are not snapped." />
            <Field Name="NONE" Value="0x00000000" />
        </Enum>

        <Enum Name="ANTIALIAS_MODE" Comment="Enum which describes the manner in which we render edges of non-text primitives.">
            <Field Name="PER_PRIMITIVE" Value="0" Comment="The edges of each primitive are antialiased sequentially." />
            <Field Name="ALIASED" Value="1" Comment="Each pixel is rendered if its pixel center is contained by the geometry." />
        </Enum>

        <Enum Name="ALPHA_MODE" Comment="Qualifies how alpha is to be treated in a bitmap or render target containing alpha.">
            <Field Name="UNKNOWN" Value="0" Comment="Alpha mode should be determined implicitly. Some target surfaces do not supply or imply this information in which case alpha must be specified." />
            <Field Name="PREMULTIPLIED" Value="1" Comment="Treat the alpha as premultipled." />
            <Field Name="STRAIGHT" Value="2" Comment="Opacity is in the 'A' component only." />
            <Field Name="IGNORE" Value="3" Comment="Ignore any alpha channel information." />
        </Enum>

        <Enum Name="EXTEND_MODE" Comment="Enum which describes how to sample from a source outside its base tile.">
            <Field Name="CLAMP" Value="0" Comment="Extend the edges of the source out by clamping sample points outside the source to the edges." />
            <Field Name="WRAP" Value="1" Comment="The base tile is drawn untransformed and the remainder are filled by repeating the base tile." />
            <Field Name="MIRROR" Value="2" Comment="The same as wrap, but alternate tiles are flipped  The base tile is drawn untransformed." />
        </Enum>

        <Enum Name="FACTORY_TYPE" Comment="Specifies the threading model of the created factory and all of its derived resources.">
            <Field Name="SINGLE_THREADED" Value="0" Comment="The resulting factory and derived resources may only be invoked serially. Reference counts on resources are interlocked, however, resource and render target state is not protected from multi-threaded access." />
            <Field Name="MULTI_THREADED" Value="1" Comment="The resulting factory may be invoked from multiple threads. Returned resources use interlocked reference counting and their state is protected." />
        </Enum>

        <Enum Name="FEATURE_LEVEL" Comment="Describes the minimum DirectX support required for hardware rendering by a render target.">
            <Field Name="DEFAULT" Value="0" Comment="The caller does not require a particular underlying D3D device level." />
            <Field Name="9" Value="D3D_FEATURE_LEVEL_9_1" NumericalValue="0x9100" Comment="The D3D device level is DX9 compatible." />
            <Field Name="10" Value="D3D_FEATURE_LEVEL_10_0" NumericalValue="0xA000" Comment="The D3D device level is DX10 compatible." />
        </Enum>

        <Enum Name="FIGURE_BEGIN" Comment="Indicates whether the given figure is filled or hollow.">
            <Field Name="FILLED" Value="0" />
            <Field Name="HOLLOW" Value="1" />
        </Enum>

        <Enum Name="FIGURE_END" Comment="Indicates whether the figure is open or closed on its end point.">
            <Field Name="OPEN" Value="0" />
            <Field Name="CLOSED" Value="1" />
        </Enum>

        <Enum Name="GEOMETRY_RELATION" Comment="Describes how one geometry object is spatially related to another geometry object.">
            <Field Name="UNKNOWN" Value="0" Comment="The relation between the geometries couldn't be determined. This value is never returned by any D2D method." />
            <Field Name="DISJOINT" Value="1" Comment="The two geometries do not intersect at all." />
            <Field Name="IS_CONTAINED" Value="2" Comment="The passed in geometry is entirely contained by the object." />
            <Field Name="CONTAINS" Value="3" Comment="The object entirely contains the passed in geometry." />
            <Field Name="OVERLAP" Value="4" Comment="The two geometries overlap but neither completely contains the other." />
        </Enum>

        <Enum Name="PATH_SEGMENT" IsFlags="true" Comment="Indicates whether the given segment should be stroked, or, if the join between this segment and the previous one should be smooth.">
            <Field Name="NONE" Value="0x00000000" />
            <Field Name="FORCE_UNSTROKED" Value="0x00000001" />
            <Field Name="FORCE_ROUND_LINE_JOIN" Value="0x00000002" />
        </Enum>

        <Enum Name="CAP_STYLE" Comment="Enum which describes the drawing of the ends of a line.">
            <Field Name="FLAT" Value="0" Comment="Flat line cap." />
            <Field Name="SQUARE" Value="1" Comment="Square line cap." />
            <Field Name="ROUND" Value="2" Comment="Round line cap." />
            <Field Name="TRIANGLE" Value="3" Comment="Triangle line cap." />
        </Enum>

        <Enum Name="LAYER_OPTIONS" IsFlags="true" Comment="Specified options that can be applied when a layer resource is applied to create a layer.">
            <Field Name="NONE" Value="0x00000000" />
            <Field Name="INITIALIZE_FOR_CLEARTYPE" Value="0x00000001" Comment="The layer will render correctly for ClearType text. If the render target was set to ClearType previously, the layer will continue to render ClearType. If the render target was set to ClearType and this option is not specified, the render target will be set to render gray-scale until the layer is popped. The caller can override this default by calling SetTextAntialiasMode while within the layer. This flag is slightly slower than the default." />
        </Enum>

        <Enum Name="LINE_JOIN" Comment="Enum which describes the drawing of the corners on the line.">
            <Field Name="MITER" Value="0" Comment="Miter join." />
            <Field Name="BEVEL" Value="1" Comment="Bevel join." />
            <Field Name="ROUND" Value="2" Comment="Round join." />
            <Field Name="MITER_OR_BEVEL" Value="3" Comment="Miter/Bevel join." />
        </Enum>

        <Enum Name="PRESENT_OPTIONS" IsFlags="true" Comment="Describes how present should behave.">
            <Field Name="NONE" Value="0x00000000" />
            <Field Name="RETAIN_CONTENTS" Value="0x00000001" Comment="Keep the target contents intact through present." />
            <Field Name="IMMEDIATELY" Value="0x00000002" Comment="Do not wait for display refresh to commit changes to display." />
        </Enum>

        <Enum Name="RENDER_TARGET_USAGE" IsFlags="true" Comment="Describes how a render target is remoted and whether it should be GDI-compatible. This enumeration allows a bitwise combination of its member values.">
            <Field Name="NONE" Value="0x00000000" />
            <Field Name="FORCE_BITMAP_REMOTING" Value="0x00000001" Comment="Rendering will occur locally, if a terminal-services session is established, the bitmap updates will be sent to the terminal services client." />
            <Field Name="GDI_COMPATIBLE" Value="0x00000002" Comment="The render target will allow a call to GetDC on the ID2D1GdiInteropRenderTarget interface. Rendering will also occur locally." />
        </Enum>

        <Enum Name="RENDER_TARGET_TYPE" Comment="Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.">
            <Field Name="DEFAULT" Value="0" Comment="D2D is free to choose the render target type for the caller." />
            <Field Name="SOFTWARE" Value="1" Comment="The render target will render using the CPU." />
            <Field Name="HARDWARE" Value="2" Comment="The render target will render using the GPU." />
        </Enum>

        <Enum Name="COMPATIBLE_RENDER_TARGET_OPTIONS" IsFlags="true" Comment="Specifies additional features supportable by a compatible render target when it is created. This enumeration allows a bitwise combination of its member values.">
            <Field Name="NONE" Value="0x00000000" />
            <Field Name="GDI_COMPATIBLE" Value="0x00000001" Comment="The compatible render target will allow a call to GetDC on the ID2D1GdiInteropRenderTarget interface. This can be specified even if the parent render target is not GDI compatible." />
        </Enum>

        <Enum Name="SWEEP_DIRECTION" Comment="Defines the direction that an elliptical arc is drawn.">
            <Field Name="COUNTER_CLOCKWISE" Value="0" />
            <Field Name="CLOCKWISE" Value="1" />
        </Enum>

        <Enum Name="TEXT_ANTIALIAS_MODE" Comment="Describes the antialiasing mode used for drawing text.">
            <Field Name="DEFAULT" Value="0" Comment="Render text using the current system setting." />
            <Field Name="CLEARTYPE" Value="1" Comment="Render text using ClearType." />
            <Field Name="GRAYSCALE" Value="2" Comment="Render text using gray-scale." />
            <Field Name="ALIASED" Value="3" Comment="Render text aliased." />
        </Enum>

        <Enum Name="FILL_MODE" Comment="Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry.">
            <Field Name="ALTERNATE" Value="0" />
            <Field Name="WINDING" Value="1" />
        </Enum>

        <Enum Name="WINDOW_STATE" IsFlags="true" Comment="Describes whether a window is occluded.">
            <Field Name="NONE" Value="0x0000000" />
            <Field Name="OCCLUDED" Value="0x0000001" />
        </Enum>

        <Enum Name="DC_INITIALIZE_MODE" Comment="Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target.">
            <Field Name="COPY" Value="0" Comment="The contents of the D2D render target will be copied to the DC." />
            <Field Name="CLEAR" Value="1" Comment="The contents of the DC will be cleared." />
        </Enum>

        <!-- Structs -->

        <Typedef Name="COLOR_F" From="D2D::COLOR_F" />
        <Typedef Name="MATRIX_3X2_F" From="D2D::MATRIX_3X2_F" />
        <Typedef Name="POINT_2U" From="D2D::POINT_2U" />
        <Typedef Name="POINT_2F" From="D2D::POINT_2F" />
        <Typedef Name="RECT_F" From="D2D::RECT_F" />
        <Typedef Name="RECT_U" From="D2D::RECT_U" />
        <Typedef Name="SIZE_F" From="D2D::SIZE_F" />
        <Typedef Name="SIZE_U" From="D2D::SIZE_U" />
        <Typedef Name="TAG" From="UINT64" />

        <Struct Name="ARC_SEGMENT" Comment="Describes an arc that is defined as part of a path.">
            <Field Name="point" Type="D2D1::POINT_2F" />
            <Field Name="size" Type="D2D1::SIZE_F" />
            <Field Name="rotationAngle" Type="FLOAT" />
            <Field Name="sweepDirection" Type="D2D1::SWEEP_DIRECTION" />
            <Field Name="arcSize" Type="D2D1::ARC_SIZE" />
        </Struct>

        <Struct Name="BEZIER_SEGMENT" Comment="Describes a cubic bezier in a path.">
            <Field Name="point1" Type="D2D1::POINT_2F" />
            <Field Name="point2" Type="D2D1::POINT_2F" />
            <Field Name="point3" Type="D2D1::POINT_2F" />
        </Struct>

        <Struct Name="TRIANGLE" Comment="Describes a triangle.">
            <Field Name="point1" Type="D2D1::POINT_2F" />
            <Field Name="point2" Type="D2D1::POINT_2F" />
            <Field Name="point3" Type="D2D1::POINT_2F" />
        </Struct>

        <Struct Name="DRAWING_STATE_DESCRIPTION" Comment="Allows the drawing state to be atomically created. This also specifies the drawing state that is saved into an IDrawingStateBlock object.">
            <Field Name="antialiasMode" Type="D2D1::ANTIALIAS_MODE" />
            <Field Name="textAntialiasMode" Type="D2D1::TEXT_ANTIALIAS_MODE" />
            <Field Name="tag1" Type="D2D1::TAG" />
            <Field Name="tag2" Type="D2D1::TAG" />
            <Field Name="transform" Type="D2D1::MATRIX_3X2_F" />
        </Struct>

        <Struct Name="ELLIPSE" Comment="Contains the center point, x-radius, and y-radius of an ellipse.">
            <Field Name="point" Type="D2D1::POINT_2F" />
            <Field Name="radiusX" Type="FLOAT" />
            <Field Name="radiusY" Type="FLOAT" />
        </Struct>

        <Struct Name="FACTORY_OPTIONS" Comment="Allows additional parameters for factory creation.">
            <Field Name="debugLevel" Type="D2D1::DEBUG_LEVEL" Comment="Requests a certain level of debugging information from the debug layer. This parameter is ignored if the debug layer DLL is not present." />
        </Struct>

        <Struct Name="GRADIENT_STOP" Comment="Contains the position and color of a gradient stop.">
            <Field Name="position" Type="FLOAT" />
            <Field Name="color" Type="D2D1::COLOR_F" />
        </Struct>

        <Struct Name="HWND_RENDER_TARGET_PROPERTIES" Comment="Contains the HWND, pixel size, and presentation options for an ID2D1HwndRenderTarget.">
            <Field Name="hwnd" Type="HWND" />
            <Field Name="pixelSize" Type="D2D1::SIZE_U" />
            <Field Name="presentOptions" Type="D2D1::PRESENT_OPTIONS" />
        </Struct>

        <Struct Name="LAYER_PARAMETERS" Comment="Contains the content bounds, mask information, opacity settings, and other options for a layer resource.">
            <Field Name="contentBounds" Type="D2D1::RECT_F" Comment="The rectangular clip that will be applied to the layer. The clip is affected by the world transform. Content outside of the content bounds will not render." />
            <Field Name="geometricMask" Type="D2D1::IGeometry" Form="mutable pointer opt" Comment="A general mask that can be optionally applied to the content. Content not inside the fill of the mask will not be rendered." />
            <Field Name="maskAntialiasMode" Type="D2D1::ANTIALIAS_MODE" Comment="Specifies whether the mask should be aliased or antialiased." />
            <Field Name="maskTransform" Type="D2D1::MATRIX_3X2_F" Comment="An additional transform that may be applied to the mask in addition to the current world transform." />
            <Field Name="opacity" Type="FLOAT" Comment="The opacity with which all of the content in the layer will be blended back to the target when the layer is popped." />
            <Field Name="opacityBrush" Type="D2D1::IBrush" Form="mutable pointer opt" Comment="An additional brush that can be applied to the layer. Only the opacity channel is sampled from this brush and multiplied both with the layer content and the over-all layer opacity." />
            <Field Name="layerOptions" Type="D2D1::LAYER_OPTIONS" Comment="Specifies if ClearType will be rendered into the layer." />
        </Struct>

        <Struct Name="QUADRATIC_BEZIER_SEGMENT" Comment="Contains the control point and end point for a quadratic Bezier segment.">
            <Field Name="point1" Type="D2D1::POINT_2F" />
            <Field Name="point2" Type="D2D1::POINT_2F" />
        </Struct>

        <Struct Name="ROUNDED_RECT" Comment="Contains the dimensions and corner radii of a rounded rectangle.">
            <Field Name="rect" Type="D2D1::RECT_F" />
            <Field Name="radiusX" Type="FLOAT" />
            <Field Name="radiusY" Type="FLOAT" />
        </Struct>

        <!-- Property based structures -->
        <Struct Name="BRUSH_PROPERTIES" Comment="Describes the opacity and transformation of a brush.">
            <Field Name="opacity" Type="FLOAT" />
            <Field Name="transform" Type="D2D1::MATRIX_3X2_F" />
        </Struct>

        <Struct Name="LINEAR_GRADIENT_BRUSH_PROPERTIES" Comment="Contains the starting point and endpoint of the gradient axis for an ID2D1LinearGradientBrush.">
            <Field Name="startPoint" Type="D2D1::POINT_2F" />
            <Field Name="endPoint" Type="D2D1::POINT_2F" />
        </Struct>

        <Struct Name="BITMAP_BRUSH_PROPERTIES" Comment="Describes the extend modes and the interpolation mode of an ID2D1BitmapBrush.">
            <Field Name="extendModeX" Type="D2D1::EXTEND_MODE" />
            <Field Name="extendModeY" Type="D2D1::EXTEND_MODE" />
            <Field Name="interpolationMode" Type="D2D1::BITMAP_INTERPOLATION_MODE" />
        </Struct>

        <Struct Name="PIXEL_FORMAT" Comment="Contains the data format and alpha mode for a bitmap or render target.">
            <Field Name="format" Type="DXGI_FORMAT" />
            <Field Name="alphaMode" Type="D2D1::ALPHA_MODE" />
        </Struct>

        <Struct Name="STROKE_STYLE_PROPERTIES" Comment="Properties, aside from the width, that allow geometric penning to be specified.">
            <Field Name="startCap" Type="D2D1::CAP_STYLE" />
            <Field Name="endCap" Type="D2D1::CAP_STYLE" />
            <Field Name="dashCap" Type="D2D1::CAP_STYLE" />
            <Field Name="lineJoin" Type="D2D1::LINE_JOIN" />
            <Field Name="miterLimit" Type="FLOAT" />
            <Field Name="dashStyle" Type="D2D1::DASH_STYLE" />
            <Field Name="dashOffset" Type="FLOAT" />
        </Struct>

        <Struct Name="RADIAL_GRADIENT_BRUSH_PROPERTIES" Comment="Contains the gradient origin offset and the size and position of the gradient ellipse for an ID2D1RadialGradientBrush.">
            <Field Name="center" Type="D2D1::POINT_2F" />
            <Field Name="gradientOriginOffset" Type="D2D1::POINT_2F" />
            <Field Name="radiusX" Type="FLOAT" />
            <Field Name="radiusY" Type="FLOAT" />
        </Struct>

        <Struct Name="RENDER_TARGET_PROPERTIES" Comment="Contains rendering options (hardware or software), pixel format, DPI information, remoting options, and Direct3D support requirements for a render target.">
            <Field Name="type" Type="D2D1::RENDER_TARGET_TYPE" />
            <Field Name="pixelFormat" Type="D2D1::PIXEL_FORMAT" />
            <Field Name="dpiX" Type="FLOAT" />
            <Field Name="dpiY" Type="FLOAT" />
            <Field Name="usage" Type="D2D1::RENDER_TARGET_USAGE" />
            <Field Name="minLevel" Type="D2D1::FEATURE_LEVEL" />
        </Struct>

        <Struct Name="BITMAP_PROPERTIES" Comment="Describes the pixel format and dpi of a bitmap.">
            <Field Name="pixelFormat" Type="D2D1::PIXEL_FORMAT" />
            <Field Name="dpiX" Type="FLOAT" />
            <Field Name="dpiY" Type="FLOAT" />
        </Struct>

        <!-- D2D1 Interfaces -->

        <!-- IResource is not a leaf type, so no need to test QI -->
        <Interface Name="IResource" Extends="IUnknown" ShouldTestQI="false" IID="2cd90691-12e2-11dc-9fed-001143a055f9" Comment="The root interface for all resources in D2D.">
            <Method Name="GetFactory" Return="void" IsConst="true" Comment="Retrieve the factory associated with this resource.">
                <Parameter Name="factory" Type="D2D1::IFactory" Form="deref out pointer" IsRetval="true" />
            </Method>
        </Interface>

        <!-- IImage is not a leaf type, so no need to test QI -->
        <Interface Name="IImage" Extends="D2D1::IResource" ShouldTestQI="false" IID="65019f75-8da2-497c-b32c-dfa34e48ede6" Comment="Represents a producer of pixels that can fill an arbitrary 2D plane.">
        </Interface>

        <!-- Bitmap Interfaces -->
        <Interface Name="IBitmap" Extends="D2D1::IImage" IID="a2296057-ea42-4099-983b-539fb6505426" Comment="Root bitmap resource, linearly scaled on a draw call.">
            <Method Name="GetSize" Return="D2D1::SIZE_F" IsConst="true" Comment="Returns the size of the bitmap in resolution independent units." />
            <Method Name="GetPixelSize" Return="D2D1::SIZE_U" IsConst="true" Comment="Returns the size of the bitmap in resolution dependent units, (pixels)." />
            <Method Name="GetPixelFormat" Return="D2D1::PIXEL_FORMAT" IsConst="true" Comment="Retrieve the format of the bitmap." />
            <Method Name="GetDpi" Return="void" IsConst="true" Comment="Return the DPI of the bitmap.">
                <Parameter Name="dpiX" Type="FLOAT" Form="out pointer" />
                <Parameter Name="dpiY" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="CopyFromBitmap">
                <Parameter Name="destPoint" Type="D2D1::POINT_2U" Form="pointer opt" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="srcRect" Type="D2D1::RECT_U" Form="pointer opt" />
            </Method>
            <Method Name="CopyFromRenderTarget">
                <Parameter Name="destPoint" Type="D2D1::POINT_2U" Form="pointer opt" />
                <Parameter Name="renderTarget" Type="D2D1::IRenderTarget" Form="pointer" />
                <Parameter Name="srcRect" Type="D2D1::RECT_U" Form="pointer opt" />
            </Method>
            <Method Name="CopyFromMemory">
                <Parameter Name="dstRect" Type="D2D1::RECT_U" Form="pointer opt" />
                <Parameter Name="srcData" Type="void" Form="pointer" />
                <Parameter Name="pitch" Type="UINT32" />
            </Method>
        </Interface>

        <!-- Brush interfaces and related resources -->

        <Interface Name="IGradientStopCollection" Extends="D2D1::IResource" IID="2cd906a7-12e2-11dc-9fed-001143a055f9" Comment="Represents an collection of gradient stops that can then be the source resource for either a linear or radial gradient brush.">
            <Method Name="GetGradientStopCount" Return="UINT32" IsConst="true" Comment="Returns the number of stops in the gradient." />
            <Method Name="GetGradientStops" Return="void" IsConst="true" Comment="Copies the gradient stops from the collection into the caller's interface.  The returned colors have straight alpha.">
                <Parameter Name="gradientStops" Type="D2D1::GRADIENT_STOP" Form="out pointer inexpressibleArray" IsArray="true" IsRetval="true" OutArrayLength="GetGradientStopCount()" />
            </Method>
            <Method Name="GetColorInterpolationGamma" Return="D2D1::GAMMA" IsConst="true" Comment="Returns whether the interpolation occurs with 1.0 or 2.2 gamma." />
            <Method Name="GetExtendMode" Return="D2D1::EXTEND_MODE" IsConst="true" />
        </Interface>

        <!-- IBrush is not a leaf type, so no need to test QI -->
        <Interface Name="IBrush" Extends="D2D1::IResource" ShouldTestQI="false" IID="2cd906a8-12e2-11dc-9fed-001143a055f9" Comment="The root brush interface. All brushes can be used to fill or pen a geometry.">
            <Method Name="SetOpacity" Return="void" Comment="Sets the opacity for when the brush is drawn over the entire fill of the brush.">
                <Parameter Name="opacity" Type="FLOAT" />
            </Method>
            <Method Name="SetTransform" Return="void" Comment="Sets the transform that applies to everything drawn by the brush.">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="pointer" />
            </Method>
            <Method Name="SetTransform" OverloadId="1" Return="void">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
            </Method>
            <Method Name="GetOpacity" Return="FLOAT" IsConst="true" />
            <Method Name="GetTransform" Return="void" IsConst="true">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="out pointer" />
            </Method>
        </Interface>

        <Interface Name="IBitmapBrush" Extends="D2D1::IBrush" IID="2cd906aa-12e2-11dc-9fed-001143a055f9" Comment="A bitmap brush allows a bitmap to be used to fill a geometry.">
            <Method Name="SetExtendModeX" Return="void" Comment="Sets how the bitmap is to be treated outside of its natural extent on the X axis.">
                <Parameter Name="extendModeX" Type="D2D1::EXTEND_MODE" />
            </Method>
            <Method Name="SetExtendModeY" Return="void" Comment="Sets how the bitmap is to be treated outside of its natural extent on the X axis.">
                <Parameter Name="extendModeY" Type="D2D1::EXTEND_MODE" />
            </Method>
            <Method Name="SetInterpolationMode" Return="void" Comment="Sets the interpolation mode used when this brush is used.">
                <Parameter Name="interpolationMode" Type="D2D1::BITMAP_INTERPOLATION_MODE" />
            </Method>
            <Method Name="SetBitmap" Return="void" Comment="Sets the bitmap associated as the source of this brush.">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer opt" />
            </Method>
            <Method Name="GetExtendModeX" Return="D2D1::EXTEND_MODE" IsConst="true" />
            <Method Name="GetExtendModeY" Return="D2D1::EXTEND_MODE" IsConst="true" />
            <Method Name="GetInterpolationMode" Return="D2D1::BITMAP_INTERPOLATION_MODE" IsConst="true" />
            <Method Name="GetBitmap" Return="void" IsConst="true">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out opt pointer" IsRetval="true" />
            </Method>
        </Interface>

        <Interface Name="ISolidColorBrush" Extends="D2D1::IBrush" IID="2cd906a9-12e2-11dc-9fed-001143a055f9" Comment="Paints an area with a solid color.">
            <Method Name="SetColor" Return="void">
                <Parameter Name="color" Type="D2D1::COLOR_F" Form="pointer" />
            </Method>
            <Method Name="SetColor" Return="void" OverloadId="1">
                <Parameter Name="color" Type="D2D1::COLOR_F" Form="reference" />
            </Method>
            <Method Name="GetColor" Return="D2D1::COLOR_F" IsConst="true" />
        </Interface>

        <Interface Name="ILinearGradientBrush" Extends="D2D1::IBrush" IID="2cd906ab-12e2-11dc-9fed-001143a055f9" Comment="Paints an area with a linear gradient.">
            <Method Name="SetStartPoint" Return="void">
                <Parameter Name="startPoint" Type="D2D1::POINT_2F" />
            </Method>
            <Method Name="SetEndPoint" Return="void" Comment="Sets the end point of the gradient in local coordinate space. This is not influenced by the geometry being filled.">
                <Parameter Name="endPoint" Type="D2D1::POINT_2F" />
            </Method>
            <Method Name="GetStartPoint" Return="D2D1::POINT_2F" IsConst="true" />
            <Method Name="GetEndPoint" Return="D2D1::POINT_2F" IsConst="true" />
            <Method Name="GetGradientStopCollection" Return="void" IsConst="true">
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="deref out pointer" IsRetval="true" />
            </Method>
        </Interface>

        <Interface Name="IRadialGradientBrush" Extends="D2D1::IBrush" IID="2cd906ac-12e2-11dc-9fed-001143a055f9" Comment="Paints an area with a radial gradient.">
            <Method Name="SetCenter" Return="void" Comment="Sets the center of the radial gradient. This will be in local coordinates and will not depend on the geometry being filled.">
                <Parameter Name="center" Type="D2D1::POINT_2F" />
            </Method>
            <Method Name="SetGradientOriginOffset" Return="void" Comment="Sets offset of the origin relative to the radial gradient center.">
                <Parameter Name="gradientOriginOffset" Type="D2D1::POINT_2F" />
            </Method>
            <Method Name="SetRadiusX" Return="void">
                <Parameter Name="radiusX" Type="FLOAT" />
            </Method>
            <Method Name="SetRadiusY" Return="void">
                <Parameter Name="radiusY" Type="FLOAT" />
            </Method>
            <Method Name="GetCenter" Return="D2D1::POINT_2F" IsConst="true" />
            <Method Name="GetGradientOriginOffset" Return="D2D1::POINT_2F" IsConst="true" />
            <Method Name="GetRadiusX" Return="FLOAT" IsConst="true" />
            <Method Name="GetRadiusY" Return="FLOAT" IsConst="true" />
            <Method Name="GetGradientStopCollection" Return="void" IsConst="true">
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="deref out pointer" IsRetval="true" />
            </Method>
        </Interface>

        <Interface Name="IDrawingStateBlock" Extends="D2D1::IResource" IID="28506e39-ebf6-46a1-bb47-fd85565ab957" Comment="Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options.">
            <Method Name="GetDescription" IsConst="true" Return="void" Comment="Retrieves the state currently contained within this state block resource.">
                <Parameter Name="stateDescription" Type="D2D1::DRAWING_STATE_DESCRIPTION" Form="out pointer" />
            </Method>
            <Method Name="SetDescription" Return="void" Comment="Sets the state description of this state block resource.">
                <Parameter Name="stateDescription" Type="D2D1::DRAWING_STATE_DESCRIPTION" Form="pointer" />
            </Method>
            <Method Name="SetDescription" Return="void" OverloadId="1">
                <Parameter Name="stateDescription" Type="D2D1::DRAWING_STATE_DESCRIPTION" Form="reference" />
            </Method>
            <Method Name="SetTextRenderingParams" Return="void" Comment="Sets the text rendering parameters of this state block resource.">
                <Parameter Name="textRenderingParams" Type="IDWriteRenderingParams" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="GetTextRenderingParams" Return="void" IsConst="true" Comment="Retrieves the text rendering parameters contained within this state block resource. If a NULL text rendering parameter was specified, NULL will be returned.">
                <Parameter Name="textRenderingParams" Type="IDWriteRenderingParams" Form="deref out opt pointer" IsRetval="true" />
            </Method>

        </Interface>

        <!-- Drawing interfaces -->

        <!-- Render Target -->

        <!-- IRenderTarget QI semantics are more complicated and are tested in TestQI_ID2D1RenderTarget-->
        <Interface Name="IRenderTarget" Extends="D2D1::IResource" ShouldTestQI="false" IID="2cd90694-12e2-11dc-9fed-001143a055f9" Comment="Represents an object that can receive drawing commands. Interfaces that inherit from ID2D1RenderTarget render the drawing commands they receive in different ways.">
            <Method Name="CreateBitmap" Comment="Create a D2D bitmap by copying from memory, or create uninitialized.">
                <Parameter Name="size" Type="D2D1::SIZE_U" />
                <Parameter Name="srcData" Type="void" Form="pointer opt" />
                <Parameter Name="pitch" Type="UINT32" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="pointer" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmap" OverloadId="1">
                <Parameter Name="size" Type="D2D1::SIZE_U" />
                <Parameter Name="srcData" Type="void" Form="pointer opt" />
                <Parameter Name="pitch" Type="UINT32" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="reference" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmap" OverloadId="2">
                <Parameter Name="size" Type="D2D1::SIZE_U" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="reference" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapFromWicBitmap" Comment="Create a D2D bitmap by copying a WIC bitmap.">
                <Parameter Name="wicBitmapSource" Type="IWICBitmapSource" Form="pointer" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="pointer opt" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapFromWicBitmap" OverloadId="1" Comment="Create a D2D bitmap by copying a WIC bitmap.">
                <Parameter Name="wicBitmapSource" Type="IWICBitmapSource" Form="pointer" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="reference" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapFromWicBitmap" OverloadId="2" Comment="Create a D2D bitmap by copying a WIC bitmap.">
                <Parameter Name="wicBitmapSource" Type="IWICBitmapSource" Form="pointer" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateSharedBitmap" Comment="Create a D2D bitmap by sharing bits from another resource. The bitmap must be compatible with the render target for the call to succeed.&#xD;&#xA;                         For example, an IWICBitmap can be shared with a software target, or a DXGI surface can be shared with a DXGI render target.">
                <Parameter Name="riid" Type="REFIID" Form="in" />
                <Parameter Name="data" Type="void" Form="inout pointer" />
                <Parameter Name="bitmapProperties" Type="D2D1::BITMAP_PROPERTIES" Form="pointer opt" />
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapBrush" Comment="Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer opt" />
                <Parameter Name="bitmapBrushProperties" Type="D2D1::BITMAP_BRUSH_PROPERTIES" Form="pointer opt" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="pointer opt" />
                <Parameter Name="bitmapBrush" Type="D2D1::IBitmapBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapBrush" OverloadId="1" Comment="Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer opt" />
                <Parameter Name="bitmapBrush" Type="D2D1::IBitmapBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapBrush" OverloadId="2" Comment="Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer opt" />
                <Parameter Name="bitmapBrushProperties" Type="D2D1::BITMAP_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="bitmapBrush" Type="D2D1::IBitmapBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateBitmapBrush" OverloadId="3" Comment="Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer opt" />
                <Parameter Name="bitmapBrushProperties" Type="D2D1::BITMAP_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="bitmapBrush" Type="D2D1::IBitmapBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateSolidColorBrush">
                <Parameter Name="color" Type="D2D1::COLOR_F" Form="pointer" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="pointer opt" />
                <Parameter Name="solidColorBrush" Type="D2D1::ISolidColorBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateSolidColorBrush" OverloadId="1">
                <Parameter Name="color" Type="D2D1::COLOR_F" Form="reference" />
                <Parameter Name="solidColorBrush" Type="D2D1::ISolidColorBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateSolidColorBrush" OverloadId="2">
                <Parameter Name="color" Type="D2D1::COLOR_F" Form="reference" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="solidColorBrush" Type="D2D1::ISolidColorBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateGradientStopCollection" Comment="A gradient stop collection represents a set of stops in an ideal unit length. This is the source resource for a linear gradient and radial gradient brush.">
                <Parameter Name="gradientStops" Type="D2D1::GRADIENT_STOP" Form="pointer" IsArray="true" Range="&gt;=,1" />
                <Parameter Name="colorInterpolationGamma" Type="D2D1::GAMMA" Comment="Specifies which space the color interpolation occurs in." />
                <Parameter Name="extendMode" Type="D2D1::EXTEND_MODE" Comment="Specifies how the gradient will be extended outside of the unit length." />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateGradientStopCollection" OverloadId="1">
                <Parameter Name="gradientStops" Type="D2D1::GRADIENT_STOP" Form="pointer" IsArray="true" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLinearGradientBrush">
                <Parameter Name="linearGradientBrushProperties" Type="D2D1::LINEAR_GRADIENT_BRUSH_PROPERTIES" Form="pointer" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="pointer opt" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="linearGradientBrush" Type="D2D1::ILinearGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLinearGradientBrush" OverloadId="1">
                <Parameter Name="linearGradientBrushProperties" Type="D2D1::LINEAR_GRADIENT_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="linearGradientBrush" Type="D2D1::ILinearGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLinearGradientBrush" OverloadId="2">
                <Parameter Name="linearGradientBrushProperties" Type="D2D1::LINEAR_GRADIENT_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="linearGradientBrush" Type="D2D1::ILinearGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRadialGradientBrush">
                <Parameter Name="radialGradientBrushProperties" Type="D2D1::RADIAL_GRADIENT_BRUSH_PROPERTIES" Form="pointer" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="pointer opt" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="radialGradientBrush" Type="D2D1::IRadialGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRadialGradientBrush" OverloadId="1">
                <Parameter Name="radialGradientBrushProperties" Type="D2D1::RADIAL_GRADIENT_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="radialGradientBrush" Type="D2D1::IRadialGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRadialGradientBrush" OverloadId="2">
                <Parameter Name="radialGradientBrushProperties" Type="D2D1::RADIAL_GRADIENT_BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="brushProperties" Type="D2D1::BRUSH_PROPERTIES" Form="reference" />
                <Parameter Name="gradientStopCollection" Type="D2D1::IGradientStopCollection" Form="pointer" />
                <Parameter Name="radialGradientBrush" Type="D2D1::IRadialGradientBrush" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" Comment="Creates a bitmap render target whose bitmap can be used as a source for rendering in the API.">
                <Parameter Name="desiredSize" Type="D2D1::SIZE_F" Form="pointer opt" Comment="The requested size of the target in DIPs. If the pixel size is not specified, the DPI is inherited from the parent target. However, the render target will never contain a fractional number of pixels." />
                <Parameter Name="desiredPixelSize" Type="D2D1::SIZE_U" Form="pointer opt" Comment="The requested size of the render target in pixels. If the DIP size is also specified, the DPI is calculated from these two values. If the desired size is not specified, the DPI is inherited from the parent render target. If neither value is specified, the compatible render target will be the same size and have the same DPI as the parent target." />
                <Parameter Name="desiredFormat" Type="D2D1::PIXEL_FORMAT" Form="pointer opt" Comment="The desired pixel format. The format must be compatible with the parent render target type. If the format is not specified, it will be inherited from the parent render target." />
                <Parameter Name="options" Type="D2D1::COMPATIBLE_RENDER_TARGET_OPTIONS" Comment="Allows the caller to retrieve a GDI compatible render target." />
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" Comment="The returned bitmap render target." />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" OverloadId="1">
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" OverloadId="2">
                <Parameter Name="desiredSize" Type="D2D1::SIZE_F" />
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" OverloadId="3">
                <Parameter Name="desiredSize" Type="D2D1::SIZE_F" />
                <Parameter Name="desiredPixelSize" Type="D2D1::SIZE_U" />
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" OverloadId="4">
                <Parameter Name="desiredSize" Type="D2D1::SIZE_F" />
                <Parameter Name="desiredPixelSize" Type="D2D1::SIZE_U" />
                <Parameter Name="desiredFormat" Type="D2D1::PIXEL_FORMAT" />
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateCompatibleRenderTarget" OverloadId="5">
                <Parameter Name="desiredSize" Type="D2D1::SIZE_F" />
                <Parameter Name="desiredPixelSize" Type="D2D1::SIZE_U" />
                <Parameter Name="desiredFormat" Type="D2D1::PIXEL_FORMAT" />
                <Parameter Name="options" Type="D2D1::COMPATIBLE_RENDER_TARGET_OPTIONS" />
                <Parameter Name="bitmapRenderTarget" Type="D2D1::IBitmapRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLayer" Comment="Creates a layer resource that can be used on any target and which will resize under the covers if necessary.">
                <Parameter Name="size" Type="D2D1::SIZE_F" Form="pointer opt" Comment="The resolution independent minimum size hint for the layer resource. Specify this to prevent unwanted reallocation of the layer backing store. The size is in DIPs, but, it is unaffected by the current world transform. If the size is unspecified, the returned resource is a placeholder and the backing store will be allocated to be the minimum size that can hold the content when the layer is pushed." />
                <Parameter Name="layer" Type="D2D1::ILayer" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLayer" OverloadId="1">
                <Parameter Name="size" Type="D2D1::SIZE_F" Form="value" />
                <Parameter Name="layer" Type="D2D1::ILayer" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateLayer" OverloadId="2">
                <Parameter Name="layer" Type="D2D1::ILayer" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateMesh" Comment="Create a D2D mesh.">
                <Parameter Name="mesh" Type="D2D1::IMesh" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="DrawLine" Return="void">
                <Parameter Name="point0" Type="D2D1::POINT_2F" />
                <Parameter Name="point1" Type="D2D1::POINT_2F" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawRectangle" Return="void">
                <Parameter Name="rect" Type="D2D1::RECT_F" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawRectangle" Return="void" OverloadId="1">
                <Parameter Name="rect" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="FillRectangle" Return="void">
                <Parameter Name="rect" Type="D2D1::RECT_F" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="FillRectangle" Return="void" OverloadId="1">
                <Parameter Name="rect" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="DrawRoundedRectangle" Return="void">
                <Parameter Name="roundedRect" Type="D2D1::ROUNDED_RECT" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawRoundedRectangle" Return="void" OverloadId="1">
                <Parameter Name="roundedRect" Type="D2D1::ROUNDED_RECT" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="FillRoundedRectangle" Return="void">
                <Parameter Name="roundedRect" Type="D2D1::ROUNDED_RECT" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="FillRoundedRectangle" Return="void" OverloadId="1">
                <Parameter Name="roundedRect" Type="D2D1::ROUNDED_RECT" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="DrawEllipse" Return="void">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawEllipse" Return="void" OverloadId="1">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="FillEllipse" Return="void">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="FillEllipse" Return="void" OverloadId="1">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="reference" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="DrawGeometry" Return="void">
                <Parameter Name="geometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="strokeWidth" Type="FLOAT" Default="1.0f" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="FillGeometry" Return="void">
                <Parameter Name="geometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="opacityBrush" Type="D2D1::IBrush" Form="pointer opt" Default="NULL" Comment="An optionally specified opacity brush. Only the alpha channel of the corresponding brush will be sampled and will be applied to the entire fill of the geometry. If this brush is specified, the fill brush must be a bitmap brush with an extend mode of D2D1_EXTEND_MODE_CLAMP." />
            </Method>
            <Method Name="FillMesh" Return="void" Comment="Fill a mesh. Since meshes can only render aliased content, the render target antialiasing mode must be set to aliased.">
                <Parameter Name="mesh" Type="D2D1::IMesh" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
            </Method>
            <Method Name="FillOpacityMask" Return="void" Comment="Fill using the alpha channel of the supplied opacity mask bitmap. The brush opacity will be modulated by the mask. The render target antialiasing mode must be set to aliased.">
                <Parameter Name="opacityMask" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="content" Type="D2D1::OPACITY_MASK_CONTENT" />
                <Parameter Name="destinationRectangle" Type="D2D1::RECT_F" Form="pointer opt" Default="NULL" />
                <Parameter Name="sourceRectangle" Type="D2D1::RECT_F" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="FillOpacityMask" Return="void" OverloadId="1">
                <Parameter Name="opacityMask" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="brush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="content" Type="D2D1::OPACITY_MASK_CONTENT" />
                <Parameter Name="destinationRectangle" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="sourceRectangle" Type="D2D1::RECT_F" Form="reference" />
            </Method>
            <Method Name="DrawBitmap" Return="void">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="destinationRectangle" Type="D2D1::RECT_F" Form="pointer opt" Default="NULL" />
                <Parameter Name="opacity" Type="FLOAT" Default="1.0f" />
                <Parameter Name="interpolationMode" Type="D2D1::BITMAP_INTERPOLATION_MODE" Default="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />
                <Parameter Name="sourceRectangle" Type="D2D1::RECT_F" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawBitmap" Return="void" OverloadId="1">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="destinationRectangle" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="opacity" Type="FLOAT" Default="1.0f" />
                <Parameter Name="interpolationMode" Type="D2D1::BITMAP_INTERPOLATION_MODE" Default="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />
                <Parameter Name="sourceRectangle" Type="D2D1::RECT_F" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="DrawBitmap" Return="void" OverloadId="2">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="pointer" />
                <Parameter Name="destinationRectangle" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="opacity" Type="FLOAT" />
                <Parameter Name="interpolationMode" Type="D2D1::BITMAP_INTERPOLATION_MODE" />
                <Parameter Name="sourceRectangle" Type="D2D1::RECT_F" Form="reference" />
            </Method>
            <Method Name="DrawText" Return="void"
                Comment="Draws the text within the given layout rectangle and by default also performs baseline snapping.">
                <Parameter Name="string" Type="WCHAR" Form="pointer" IsArray="true" LengthParameter="stringLength" />
                <Parameter Name="textFormat" Type="IDWriteTextFormat" Form="pointer" />
                <Parameter Name="layoutRect" Type="D2D1::RECT_F" Form="pointer" />
                <Parameter Name="defaultFillBrush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="options" Type="D2D1::DRAW_TEXT_OPTIONS" Default="D2D1_DRAW_TEXT_OPTIONS_NONE" />
                <Parameter Name="measuringMode" Type="DWRITE_MEASURING_MODE" Default="DWRITE_MEASURING_MODE_NATURAL" />
            </Method>
            <Method Name="DrawText" Return="void" OverloadId="1"
                Comment="Draws the text within the given layout rectangle and by default also performs baseline snapping.">
                <Parameter Name="string" Type="WCHAR" Form="pointer" IsArray="true" LengthParameter="stringLength" />
                <Parameter Name="textFormat" Type="IDWriteTextFormat" Form="pointer" />
                <Parameter Name="layoutRect" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="defaultFillBrush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="options" Type="D2D1::DRAW_TEXT_OPTIONS" Default="D2D1_DRAW_TEXT_OPTIONS_NONE" />
                <Parameter Name="measuringMode" Type="DWRITE_MEASURING_MODE" Default="DWRITE_MEASURING_MODE_NATURAL" />
            </Method>
            <Method Name="DrawTextLayout" Return="void"
                Comment="Draw a text layout object. If the layout is not subsequently changed, this can be more efficient than DrawText
                         when drawing the same layout repeatedly.">
                <Parameter Name="origin" Type="D2D1::POINT_2F" />
                <Parameter Name="textLayout" Type="IDWriteTextLayout" Form="pointer" />
                <Parameter Name="defaultFillBrush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="options" Type="D2D1::DRAW_TEXT_OPTIONS" Default="D2D1_DRAW_TEXT_OPTIONS_NONE"
                    Comment="The specified text options. If D2D1_DRAW_TEXT_OPTIONS_CLIP is used, the text is clipped to the layout bounds.
                             These bounds are derived from the origin and the layout bounds of the corresponding IDWriteTextLayout object." />
            </Method>
            <Method Name="DrawGlyphRun" Return="void">
                <Parameter Name="baselineOrigin" Type="D2D1::POINT_2F" />
                <Parameter Name="glyphRun" Type="DWRITE_GLYPH_RUN" Form="pointer" />
                <Parameter Name="foregroundBrush" Type="D2D1::IBrush" Form="pointer" />
                <Parameter Name="measuringMode" Type="DWRITE_MEASURING_MODE" Default="DWRITE_MEASURING_MODE_NATURAL" />
            </Method>
            <Method Name="SetTransform" Return="void">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="pointer" />
            </Method>
            <Method Name="SetTransform" Return="void" OverloadId="1">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
            </Method>
            <Method Name="GetTransform" Return="void" IsConst="true">
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="SetAntialiasMode" Return="void">
                <Parameter Name="antialiasMode" Type="D2D1::ANTIALIAS_MODE" />
            </Method>
            <Method Name="GetAntialiasMode" Return="D2D1::ANTIALIAS_MODE" IsConst="true" />
            <Method Name="SetTextAntialiasMode" Return="void">
                <Parameter Name="textAntialiasMode" Type="D2D1::TEXT_ANTIALIAS_MODE" />
            </Method>
            <Method Name="GetTextAntialiasMode" Return="D2D1::TEXT_ANTIALIAS_MODE" IsConst="true" />
            <Method Name="SetTextRenderingParams" Return="void">
                <Parameter Name="textRenderingParams" Type="IDWriteRenderingParams" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="GetTextRenderingParams" Return="void" IsConst="true" Comment="Retrieve the text render parameters. NOTE: If NULL is specified to SetTextRenderingParameters, NULL will be returned.">
                <Parameter Name="textRenderingParams" Type="IDWriteRenderingParams" Form="deref out opt pointer" IsRetval="true" />
            </Method>
            <Method Name="SetTags" Return="void" Comment="Set a tag to correspond to the succeeding primitives. If an error occurs rendering a primitive, the tags can be returned from the Flush or EndDraw call.">
                <Parameter Name="tag1" Type="D2D1::TAG" />
                <Parameter Name="tag2" Type="D2D1::TAG" />
            </Method>
            <Method Name="GetTags" Return="void" IsConst="true" Comment="Retrieves the currently set tags. This does not retrieve the tags corresponding to any primitive that is in error.">
                <Parameter Name="tag1" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
                <Parameter Name="tag2" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
            </Method>
            <Method Name="PushLayer" Return="void" Comment="Start a layer of drawing calls. The way in which the layer must be resolved is specified first as well as the logical resource that stores the layer parameters. The supplied layer resource might grow if the specified content cannot fit inside it. The layer will grow monotonically on each axis.  If a NULL ID2D1Layer is provided, then a layer resource will be allocated automatically.">
                <Parameter Name="layerParameters" Type="D2D1::LAYER_PARAMETERS" Form="pointer" />
                <Parameter Name="layer" Type="D2D1::ILayer" Form="pointer opt" />
            </Method>
            <Method Name="PushLayer" OverloadId="1" Return="void">
                <Parameter Name="layerParameters" Type="D2D1::LAYER_PARAMETERS" Form="reference" />
                <Parameter Name="layer" Type="D2D1::ILayer" Form="pointer opt" />
            </Method>
            <Method Name="PopLayer" Return="void" Comment="Ends a layer that was defined with particular layer resources.">
            </Method>
            <Method Name="Flush">
                <Parameter Name="tag1" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
                <Parameter Name="tag2" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
            </Method>
            <Method Name="SaveDrawingState" Return="void" IsConst="true" Comment="Gets the current drawing state and saves it into the supplied IDrawingStatckBlock.">
                <Parameter Name="drawingStateBlock" Type="D2D1::IDrawingStateBlock" Form="inout pointer" />
            </Method>
            <Method Name="RestoreDrawingState" Return="void" Comment="Copies the state stored in the block interface.">
                <Parameter Name="drawingStateBlock" Type="D2D1::IDrawingStateBlock" Form="pointer" />
            </Method>
            <Method Name="PushAxisAlignedClip" Return="void" Comment="Pushes a clip. The clip can be antialiased. The clip must be axis aligned. If the current world transform is not axis preserving, then the bounding box of the transformed clip rect will be used. The clip will remain in effect until a PopAxisAligned clip call is made.">
                <Parameter Name="clipRect" Type="D2D1::RECT_F" Form="pointer" />
                <Parameter Name="antialiasMode" Type="D2D1::ANTIALIAS_MODE" />
            </Method>
            <Method Name="PushAxisAlignedClip" Return="void" OverloadId="1">
                <Parameter Name="clipRect" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="antialiasMode" Type="D2D1::ANTIALIAS_MODE" />
            </Method>
            <Method Name="PopAxisAlignedClip" Return="void" />
            <Method Name="Clear" Return="void">
                <Parameter Name="clearColor" Type="D2D1::COLOR_F" Form="pointer opt" Default="NULL" />
            </Method>
            <Method Name="Clear" Return="void" OverloadId="1">
                <Parameter Name="clearColor" Type="D2D1::COLOR_F" Form="reference" />
            </Method>
            <Method Name="BeginDraw" Return="void" Comment="Start drawing on this render target. Draw calls can only be issued between a BeginDraw and EndDraw call." />
            <Method Name="EndDraw" Comment="Ends drawing on the render target, error results can be retrieved at this time, or when calling flush.">
                <Parameter Name="tag1" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
                <Parameter Name="tag2" Type="D2D1::TAG" Form="out pointer opt" Default="NULL" />
            </Method>
            <Method Name="GetPixelFormat" Return="D2D1::PIXEL_FORMAT" IsConst="true" />
            <Method Name="SetDpi" Return="void" Comment="Sets the DPI on the render target. This results in the render target being interpreted to a different scale. Neither DPI can be negative. If zero is specified for both, the system DPI is chosen. If one is zero and the other unspecified, the DPI is not changed.">
                <Parameter Name="dpiX" Type="FLOAT" />
                <Parameter Name="dpiY" Type="FLOAT" />
            </Method>
            <Method Name="GetDpi" Return="void" IsConst="true" Comment="Return the current DPI from the target.">
                <Parameter Name="dpiX" Type="FLOAT" Form="out pointer" />
                <Parameter Name="dpiY" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="GetSize" Return="D2D1::SIZE_F" IsConst="true" Comment="Returns the size of the render target in DIPs." />
            <Method Name="GetPixelSize" Return="D2D1::SIZE_U" IsConst="true" Comment="Returns the size of the render target in pixels." />
            <Method Name="GetMaximumBitmapSize" Return="UINT32" IsConst="true" Comment="Returns the maximum bitmap and render target size that is guaranteed to be supported by the render target." />
            <Method Name="IsSupported" Return="BOOL" IsConst="true" Comment="Returns true if the given properties are supported by this render target. The DPI is ignored. NOTE: If the render target type is software, then neither D2D1_FEATURE_LEVEL_9 nor D2D1_FEATURE_LEVEL_10 will be considered to be supported.">
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="pointer" />
            </Method>
            <Method Name="IsSupported" Return="BOOL" IsConst="true" OverloadId="1">
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="reference" />
            </Method>
        </Interface>

        <Interface Name="IBitmapRenderTarget" Extends="D2D1::IRenderTarget" IID="2cd90695-12e2-11dc-9fed-001143a055f9" Comment="Renders to an intermediate texture created by the CreateCompatibleRenderTarget method.">
            <Method Name="GetBitmap">
                <Parameter Name="bitmap" Type="D2D1::IBitmap" Form="deref out pointer com" IsRetval="true" />
            </Method>
        </Interface>

        <Interface Name="IHwndRenderTarget" Extends="D2D1::IRenderTarget" IID="2cd90698-12e2-11dc-9fed-001143a055f9" Comment="Renders drawing instructions to a window.">
            <Method Name="CheckWindowState" Return="D2D1::WINDOW_STATE" />
            <Method Name="Resize" Comment="Resize the buffer underlying the render target. This operation might fail if there is insufficient video memory or system memory, or if the render target is resized beyond the maximum bitmap size. If the method fails, the render target will be placed in a zombie state and D2DERR_RECREATE_TARGET will be returned from it when EndDraw is called. In addition an appropriate failure result will be returned from Resize.">
                 <Parameter Name="pixelSize" Type="D2D1::SIZE_U" Form="pointer" />
            </Method>
            <Method Name="Resize" OverloadId="1">
                <Parameter Name="pixelSize" Type="D2D1::SIZE_U" Form="reference" />
            </Method>
            <Method Name="GetHwnd" Return="HWND" IsConst="true" />
        </Interface>

        <Interface Name="IGdiInteropRenderTarget" Extends="IUnknown" IID="e0db51c3-6f77-4bae-b3d5-e47509b35838" DesktopFamilyOnly="true" Comment="Provides access to an device context that can accept GDI drawing commands.">
            <Method Name="GetDC">
                 <Parameter Name="mode" Type="D2D1::DC_INITIALIZE_MODE" />
                 <Parameter Name="hdc" Type="HDC" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="ReleaseDC">
                 <Parameter Name="update" Type="RECT" Form="pointer opt" />
            </Method>
        </Interface>

        <Interface Name="IDCRenderTarget" Extends="D2D1::IRenderTarget" IID="1c51bc64-de61-46fd-9899-63a5d8f03950" Comment="Issues drawing commands to a GDI device context.">
            <Method Name="BindDC">
                 <Parameter Name="hDC" Type="HDC" Form="in" />
                 <Parameter Name="pSubRect" Type="RECT" Form="pointer" />
            </Method>
        </Interface>

        <!-- Geometry interfaces -->

        <Interface Name="IStrokeStyle" Extends="D2D1::IResource" IID="2cd9069d-12e2-11dc-9fed-001143a055f9" Comment="Resource interface that holds pen style properties.">
            <Method Name="GetStartCap" Return="D2D1::CAP_STYLE" IsConst="true" />
            <Method Name="GetEndCap" Return="D2D1::CAP_STYLE" IsConst="true" />
            <Method Name="GetDashCap" Return="D2D1::CAP_STYLE" IsConst="true" />
            <Method Name="GetMiterLimit" Return="FLOAT" IsConst="true" />
            <Method Name="GetLineJoin" Return="D2D1::LINE_JOIN" IsConst="true" />
            <Method Name="GetDashOffset" Return="FLOAT" IsConst="true" />
            <Method Name="GetDashStyle" Return="D2D1::DASH_STYLE" IsConst="true" />
            <Method Name="GetDashesCount" Return="UINT32" IsConst="true" />
            <Method Name="GetDashes" Return="void" IsConst="true" Comment="Returns the dashes from the object into a user allocated array. The user must call GetDashesCount to retrieve the required size.">
                <Parameter Name="dashes" Type="FLOAT" Form="out pointer" IsArray="true" IsRetval="true" OutArrayLength="GetDashesCount()" />
            </Method>
        </Interface>

        <!-- IGeometry is not a leaf type, so no need to test QI -->
        <Interface Name="IGeometry" Extends="D2D1::IResource" ShouldTestQI="false" IID="2cd906a1-12e2-11dc-9fed-001143a055f9" Comment="Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes. Interfaces that inherit from ID2D1Geometry define specific shapes.">
            <Method Name="GetBounds" IsConst="true" LockingModel="Local" Comment="Retrieve the bounds of the geometry, with an optional applied transform.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="GetBounds" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Retrieve the bounds of the geometry, with an optional applied transform.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="GetWidenedBounds" IsConst="true" LockingModel="Local" Comment="Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="GetWidenedBounds" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="GetWidenedBounds" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="GetWidenedBounds" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="bounds" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
            <Method Name="StrokeContainsPoint" IsConst="true" LockingModel="Local" Comment="Checks to see whether the corresponding penned and widened geometry contains the given point.">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="StrokeContainsPoint" IsConst="true" OverloadId="1" LockingModel="Local">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="StrokeContainsPoint" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Checks to see whether the corresponding penned and widened geometry contains the given point.">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="StrokeContainsPoint" IsConst="true" OverloadId="3" LockingModel="Local">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="FillContainsPoint" IsConst="true" LockingModel="Local" Comment="Test whether the given fill of this geometry would contain this point.">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="FillContainsPoint" IsConst="true" OverloadId="1" LockingModel="Local">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="FillContainsPoint" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Test whether the given fill of this geometry would contain this point.">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="FillContainsPoint" IsConst="true" OverloadId="3" LockingModel="Local">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="contains" Type="BOOL" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="CompareWithGeometry" IsConst="true" LockingModel="Local" Comment="Compare how one geometry intersects or contains another geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="relation" Type="D2D1::GEOMETRY_RELATION" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="CompareWithGeometry" IsConst="true" LockingModel="Local" Comment="Compare how one geometry intersects or contains another geometry." OverloadId="1">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="relation" Type="D2D1::GEOMETRY_RELATION" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="CompareWithGeometry" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Compare how one geometry intersects or contains another geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="relation" Type="D2D1::GEOMETRY_RELATION" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="CompareWithGeometry" IsConst="true" LockingModel="Local" Comment="Compare how one geometry intersects or contains another geometry." OverloadId="3">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="relation" Type="D2D1::GEOMETRY_RELATION" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="Simplify" IsConst="true" LockingModel="Local" Comment="Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.">
                <Parameter Name="simplificationOption" Type="D2D1::GEOMETRY_SIMPLIFICATION_OPTION" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Simplify" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.">
                <Parameter Name="simplificationOption" Type="D2D1::GEOMETRY_SIMPLIFICATION_OPTION" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Simplify" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.">
                <Parameter Name="simplificationOption" Type="D2D1::GEOMETRY_SIMPLIFICATION_OPTION" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Simplify" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.">
                <Parameter Name="simplificationOption" Type="D2D1::GEOMETRY_SIMPLIFICATION_OPTION" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Tessellate" IsConst="true" LockingModel="Local" Comment="Tessellates a geometry into triangles.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="tessellationSink" Type="D2D1::ITessellationSink" Form="pointer" />
            </Method>
            <Method Name="Tessellate" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Tessellates a geometry into triangles.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="tessellationSink" Type="D2D1::ITessellationSink" Form="pointer" />
            </Method>
            <Method Name="Tessellate" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Tessellates a geometry into triangles.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="tessellationSink" Type="D2D1::ITessellationSink" Form="pointer" />
            </Method>
            <Method Name="Tessellate" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Tessellates a geometry into triangles.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="tessellationSink" Type="D2D1::ITessellationSink" Form="pointer" />
            </Method>
            <Method Name="CombineWithGeometry" IsConst="true" LockingModel="Local" Comment="Performs a combine operation between the two geometries to produce a resulting geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="combineMode" Type="D2D1::COMBINE_MODE" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="CombineWithGeometry" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Performs a combine operation between the two geometries to produce a resulting geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="combineMode" Type="D2D1::COMBINE_MODE" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="CombineWithGeometry" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Performs a combine operation between the two geometries to produce a resulting geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="combineMode" Type="D2D1::COMBINE_MODE" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="CombineWithGeometry" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Performs a combine operation between the two geometries to produce a resulting geometry.">
                <Parameter Name="inputGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="combineMode" Type="D2D1::COMBINE_MODE" />
                <Parameter Name="inputGeometryTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Outline" IsConst="true" LockingModel="Local" Comment="Computes the outline of the geometry. The result is written back into a simplified geometry sink.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Outline" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Computes the outline of the geometry. The result is written back into a simplified geometry sink.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Outline" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Computes the outline of the geometry. The result is written back into a simplified geometry sink.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Outline" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Computes the outline of the geometry. The result is written back into a simplified geometry sink.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="ComputeArea" IsConst="true" LockingModel="Local" Comment="Computes the area of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="area" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeArea" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Computes the area of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="area" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeArea" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Computes the area of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="area" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeArea" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Computes the area of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="area" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeLength" IsConst="true" LockingModel="Local" Comment="Computes the length of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="length" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeLength" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Computes the length of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="length" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeLength" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Computes the length of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="length" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputeLength" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Computes the length of the geometry.">
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="length" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="ComputePointAtLength" IsConst="true" LockingModel="Local" Comment="Computes the point and tangent a given distance along the path.">
                <Parameter Name="length" Type="FLOAT" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="point" Type="D2D1::POINT_2F" Form="out pointer opt" />
                <Parameter Name="unitTangentVector" Type="D2D1::POINT_2F" Form="out pointer opt" />
            </Method>
            <Method Name="ComputePointAtLength" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Computes the point and tangent a given distance along the path.">
                <Parameter Name="length" Type="FLOAT" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="point" Type="D2D1::POINT_2F" Form="out pointer opt" />
                <Parameter Name="unitTangentVector" Type="D2D1::POINT_2F" Form="out pointer opt" />
            </Method>
            <Method Name="ComputePointAtLength" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Computes the point and tangent a given distance along the path.">
                <Parameter Name="length" Type="FLOAT" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="point" Type="D2D1::POINT_2F" Form="out pointer opt" />
                <Parameter Name="unitTangentVector" Type="D2D1::POINT_2F" Form="out pointer opt" />
            </Method>
            <Method Name="ComputePointAtLength" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Computes the point and tangent a given distance along the path.">
                <Parameter Name="length" Type="FLOAT" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="point" Type="D2D1::POINT_2F" Form="out pointer opt" />
                <Parameter Name="unitTangentVector" Type="D2D1::POINT_2F" Form="out pointer opt" />
            </Method>
            <Method Name="Widen" IsConst="true" LockingModel="Local" Comment="Get the geometry and widen it as well as apply an optional pen style.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Widen" IsConst="true" OverloadId="1" LockingModel="Local" Comment="Get the geometry and widen it as well as apply an optional pen style.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="flatteningTolerance" Type="FLOAT" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Widen" IsConst="true" OverloadId="2" LockingModel="Local" Comment="Get the geometry and widen it as well as apply an optional pen style.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="pointer opt" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
            <Method Name="Widen" IsConst="true" OverloadId="3" LockingModel="Local" Comment="Get the geometry and widen it as well as apply an optional pen style.">
                <Parameter Name="strokeWidth" Type="FLOAT" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="pointer opt" />
                <Parameter Name="worldTransform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="geometrySink" Type="D2D1::ISimplifiedGeometrySink" Form="pointer" />
            </Method>
        </Interface>

        <Interface Name="IRectangleGeometry" Extends="D2D1::IGeometry" IID="2cd906a2-12e2-11dc-9fed-001143a055f9" Comment="Describes a two-dimensional rectangle.">
            <Method Name="GetRect" Return="void" IsConst="true">
                <Parameter Name="rect" Type="D2D1::RECT_F" Form="out pointer" />
            </Method>
        </Interface>

        <Interface Name="IRoundedRectangleGeometry" Extends="D2D1::IGeometry" IID="2cd906a3-12e2-11dc-9fed-001143a055f9" Comment="Describes a rounded rectangle.">
            <Method Name="GetRoundedRect" Return="void" IsConst="true">
                <Parameter Name="roundedRect" Type="D2D1::ROUNDED_RECT" Form="out pointer" />
            </Method>
        </Interface>

        <Interface Name="IEllipseGeometry" Extends="D2D1::IGeometry" IID="2cd906a4-12e2-11dc-9fed-001143a055f9" Comment="Represents an ellipse.">
            <Method Name="GetEllipse" Return="void" IsConst="true">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="out pointer" />
            </Method>
        </Interface>

        <!-- ISimplifiedGeometrySink is not a leaf type, so no need to test QI -->
        <Interface Name="ISimplifiedGeometrySink" Extends="IUnknown" ShouldTestQI="false" IID="2cd9069e-12e2-11dc-9fed-001143a055f9" Comment="Describes a geometric path that does not contain quadratic bezier curves or arcs.">
            <Method Name="SetFillMode" Return="void" LockingModel="Local">
                <Parameter Name="fillMode" Type="D2D1::FILL_MODE" />
            </Method>
            <Method Name="SetSegmentFlags" Return="void" LockingModel="Local">
                <Parameter Name="vertexFlags" Type="D2D1::PATH_SEGMENT" />
            </Method>
            <Method Name="BeginFigure" Return="void" LockingModel="Local">
                <Parameter Name="startPoint" Type="D2D1::POINT_2F" />
                <Parameter Name="figureBegin" Type="D2D1::FIGURE_BEGIN" />
            </Method>
            <Method Name="AddLines" Return="void" LockingModel="Local">
                <Parameter Name="points" Type="D2D1::POINT_2F" Form="pointer" IsArray="true" />
            </Method>
            <Method Name="AddBeziers" Return="void" LockingModel="Local">
                <Parameter Name="beziers" Type="D2D1::BEZIER_SEGMENT" Form="pointer" IsArray="true" />
            </Method>
            <Method Name="EndFigure" Return="void" LockingModel="Local">
                <Parameter Name="figureEnd" Type="D2D1::FIGURE_END" />
            </Method>
            <Method Name="Close" LockingModel="Local" />
        </Interface>

        <Interface Name="IGeometrySink" Extends="D2D1::ISimplifiedGeometrySink" IID="2cd9069f-12e2-11dc-9fed-001143a055f9" Comment="Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves.">
            <Method Name="AddLine" Return="void" LockingModel="Local">
                <Parameter Name="point" Type="D2D1::POINT_2F" />
            </Method>
            <Method Name="AddBezier" Return="void" LockingModel="Local">
                <Parameter Name="bezier" Type="D2D1::BEZIER_SEGMENT" Form="pointer" />
            </Method>
            <Method Name="AddBezier" Return="void" OverloadId="1" LockingModel="Local">
                <Parameter Name="bezier" Type="D2D1::BEZIER_SEGMENT" Form="reference" />
            </Method>
            <Method Name="AddQuadraticBezier" Return="void" LockingModel="Local">
                <Parameter Name="bezier" Type="D2D1::QUADRATIC_BEZIER_SEGMENT" Form="pointer" />
            </Method>
            <Method Name="AddQuadraticBezier" Return="void" OverloadId="1" LockingModel="Local">
                <Parameter Name="bezier" Type="D2D1::QUADRATIC_BEZIER_SEGMENT" Form="reference" />
            </Method>
            <Method Name="AddQuadraticBeziers" Return="void" LockingModel="Local">
                <Parameter Name="beziers" Type="D2D1::QUADRATIC_BEZIER_SEGMENT" Form="pointer" IsArray="true" />
            </Method>
            <Method Name="AddArc" Return="void" LockingModel="Local">
                <Parameter Name="arc" Type="D2D1::ARC_SEGMENT" Form="pointer" />
            </Method>
            <Method Name="AddArc" Return="void" OverloadId="1" LockingModel="Local">
                <Parameter Name="arc" Type="D2D1::ARC_SEGMENT" Form="reference" />
            </Method>
        </Interface>

        <Interface Name="ITessellationSink" Extends="IUnknown" IID="2cd906c1-12e2-11dc-9fed-001143a055f9" Comment="Populates an ID2D1Mesh object with triangles.">
            <Method Name="AddTriangles" Return="void">
                <Parameter Name="triangles" Type="D2D1::TRIANGLE" Form="pointer" IsArray="true" />
            </Method>
            <Method Name="Close" />
        </Interface>

        <Interface Name="IPathGeometry" Extends="D2D1::IGeometry" IID="2cd906a5-12e2-11dc-9fed-001143a055f9" Comment="Represents a complex shape that may be composed of arcs, curves, and lines.">
            <Method Name="Open" LockingModel="Local" Comment="Opens a geometry sink that will be used to create this path geometry.">
                <Parameter Name="geometrySink" Type="D2D1::IGeometrySink" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="Stream" IsConst="true" LockingModel="Local" Comment="Retrieve the contents of this geometry. The caller passes an implementation of a ID2D1GeometrySink interface to receive the data.">
                <Parameter Name="geometrySink" Type="D2D1::IGeometrySink" Form="pointer" />
            </Method>

            <Method Name="GetSegmentCount" IsConst="true" LockingModel="Local">
                <Parameter Name="count" Type="UINT32" Form="out pointer" IsRetval="true" />
            </Method>
            <Method Name="GetFigureCount" IsConst="true" LockingModel="Local">
                <Parameter Name="count" Type="UINT32" Form="out pointer" IsRetval="true" />
            </Method>
        </Interface>

        <Interface Name="IGeometryGroup" Extends="D2D1::IGeometry" IID="2cd906a6-12e2-11dc-9fed-001143a055f9" Comment="Represents a composite geometry, composed of other ID2D1Geometry objects.">
            <Method Name="GetFillMode" Return="D2D1::FILL_MODE" IsConst="true" />
            <Method Name="GetSourceGeometryCount" Return="UINT32" IsConst="true" />
            <Method Name="GetSourceGeometries" Return="void" IsConst="true">
                 <Parameter Name="geometries" Type="D2D1::IGeometry" Form="out pointer pointer" IsArray="true" IsRetval="true" OutArrayLength="GetSourceGeometryCount()" />
            </Method>
        </Interface>

        <Interface Name="ITransformedGeometry" Extends="D2D1::IGeometry" IID="2cd906bb-12e2-11dc-9fed-001143a055f9" Comment="Represents a geometry that has been transformed.">
            <Method Name="GetSourceGeometry" Return="void" IsConst="true">
                 <Parameter Name="sourceGeometry" Type="D2D1::IGeometry" Form="deref out pointer" />
            </Method>
            <Method Name="GetTransform" Return="void" IsConst="true">
                 <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="out pointer" />
            </Method>
        </Interface>

        <Interface Name="IMesh" Extends="D2D1::IResource" IID="2cd906c2-12e2-11dc-9fed-001143a055f9" Comment="Represents a set of vertices that form a list of triangles.">
            <Method Name="Open" Comment="Opens the mesh for population.">
                <Parameter Name="tessellationSink" Type="D2D1::ITessellationSink" Form="deref out pointer com" IsRetval="true" />
            </Method>
        </Interface>

        <!-- Layer interface -->
        <Interface Name="ILayer" Extends="D2D1::IResource" IID="2cd9069b-12e2-11dc-9fed-001143a055f9" Comment="Represents the backing store required to render a layer.">
            <Method Name="GetSize" Return="D2D1::SIZE_F" IsConst="true" />
        </Interface>

        <!-- Root factory interface -->

        <!-- Note IID is intentionally not defined, this forces the version to change for each codegen -->

        <Interface Name="IFactory" Extends="IUnknown" IID="06152247-6f50-465a-9245-118bfd3b6007" Comment="The root factory interface for all of D2D's objects.">
            <Method Name="ReloadSystemMetrics" Comment="Cause the factory to refresh any system metrics that it might have been snapped on factory creation." />
            <Method Name="GetDesktopDpi" Return="void" Comment="Retrieves the current desktop DPI. To refresh this, call ReloadSystemMetrics.">
                <Parameter Name="dpiX" Type="FLOAT" Form="out pointer" />
                <Parameter Name="dpiY" Type="FLOAT" Form="out pointer" />
            </Method>
            <Method Name="CreateRectangleGeometry">
                <Parameter Name="rectangle" Type="D2D1::RECT_F" Form="pointer" />
                <Parameter Name="rectangleGeometry" Type="D2D1::IRectangleGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRectangleGeometry" OverloadId="1">
                <Parameter Name="rectangle" Type="D2D1::RECT_F" Form="reference" />
                <Parameter Name="rectangleGeometry" Type="D2D1::IRectangleGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRoundedRectangleGeometry">
                <Parameter Name="roundedRectangle" Type="D2D1::ROUNDED_RECT" Form="pointer" />
                <Parameter Name="roundedRectangleGeometry" Type="D2D1::IRoundedRectangleGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateRoundedRectangleGeometry" OverloadId="1">
                <Parameter Name="roundedRectangle" Type="D2D1::ROUNDED_RECT" Form="reference" />
                <Parameter Name="roundedRectangleGeometry" Type="D2D1::IRoundedRectangleGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateEllipseGeometry">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="pointer" />
                <Parameter Name="ellipseGeometry" Type="D2D1::IEllipseGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateEllipseGeometry" OverloadId="1">
                <Parameter Name="ellipse" Type="D2D1::ELLIPSE" Form="reference" />
                <Parameter Name="ellipseGeometry" Type="D2D1::IEllipseGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateGeometryGroup" Comment="Create a geometry which holds other geometries.">
                <Parameter Name="fillMode" Type="D2D1::FILL_MODE" />
                <Parameter Name="geometries" Type="D2D1::IGeometry" Form="pointer pointer" IsArray="true" />
                <Parameter Name="geometryGroup" Type="D2D1::IGeometryGroup" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateTransformedGeometry">
                <Parameter Name="sourceGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="pointer" />
                <Parameter Name="transformedGeometry" Type="D2D1::ITransformedGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateTransformedGeometry" OverloadId="1">
                <Parameter Name="sourceGeometry" Type="D2D1::IGeometry" Form="pointer" />
                <Parameter Name="transform" Type="D2D1::MATRIX_3X2_F" Form="reference" />
                <Parameter Name="transformedGeometry" Type="D2D1::ITransformedGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreatePathGeometry" Comment="Returns an initially empty path geometry interface. A geometry sink is created off the interface to populate it.">
                <Parameter Name="pathGeometry" Type="D2D1::IPathGeometry" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateStrokeStyle" Comment="Allows a non-default stroke style to be specified for a given geometry at draw time.">
                <Parameter Name="strokeStyleProperties" Type="D2D1::STROKE_STYLE_PROPERTIES" Form="pointer" />
                <Parameter Name="dashes" Type="FLOAT" Form="pointer opt" IsArray="true" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateStrokeStyle" OverloadId="1">
                <Parameter Name="strokeStyleProperties" Type="D2D1::STROKE_STYLE_PROPERTIES" Form="reference" />
                <Parameter Name="dashes" Type="FLOAT" Form="pointer opt" IsArray="true" />
                <Parameter Name="strokeStyle" Type="D2D1::IStrokeStyle" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDrawingStateBlock" Comment="Creates a new drawing state block, this can be used in subsequent SaveDrawingState and RestoreDrawingState operations on the render target.">
                <Parameter Name="drawingStateDescription" Type="D2D1::DRAWING_STATE_DESCRIPTION" Form="pointer opt" />
                <Parameter Name="textRenderingParams" Type="IDWriteRenderingParams" Form="pointer opt" />
                <Parameter Name="drawingStateBlock" Type="D2D1::IDrawingStateBlock" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDrawingStateBlock" OverloadId="1">
                <Parameter Name="drawingStateDescription" Type="D2D1::DRAWING_STATE_DESCRIPTION" Form="reference" />
                <Parameter Name="drawingStateBlock" Type="D2D1::IDrawingStateBlock" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDrawingStateBlock" OverloadId="2">
                <Parameter Name="drawingStateBlock" Type="D2D1::IDrawingStateBlock" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateWicBitmapRenderTarget" Comment="Creates a render target which is a source of bitmaps.">
                <Parameter Name="target" Type="IWICBitmap" Form="pointer" />
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="pointer" />
                <Parameter Name="renderTarget" Type="D2D1::IRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateWicBitmapRenderTarget" OverloadId="1">
                <Parameter Name="target" Type="IWICBitmap" Form="pointer" />
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="reference" />
                <Parameter Name="renderTarget" Type="D2D1::IRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateHwndRenderTarget" Comment="Creates a render target that appears on the display.">
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="pointer" />
                <Parameter Name="hwndRenderTargetProperties" Type="D2D1::HWND_RENDER_TARGET_PROPERTIES" Form="pointer" />
                <Parameter Name="hwndRenderTarget" Type="D2D1::IHwndRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateHwndRenderTarget" OverloadId="1">
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="reference" />
                <Parameter Name="hwndRenderTargetProperties" Type="D2D1::HWND_RENDER_TARGET_PROPERTIES" Form="reference" />
                <Parameter Name="hwndRenderTarget" Type="D2D1::IHwndRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDxgiSurfaceRenderTarget" Comment="Creates a render target that draws to a DXGI Surface. The device that owns the surface is used for rendering.">
                <Parameter Name="dxgiSurface" Type="IDXGISurface" Form="pointer" />
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="pointer" />
                <Parameter Name="renderTarget" Type="D2D1::IRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDxgiSurfaceRenderTarget" OverloadId="1">
                <Parameter Name="dxgiSurface" Type="IDXGISurface" Form="pointer" />
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="reference" />
                <Parameter Name="renderTarget" Type="D2D1::IRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
            <Method Name="CreateDCRenderTarget" Comment="Creates a render target that draws to a GDI device context.">
                <Parameter Name="renderTargetProperties" Type="D2D1::RENDER_TARGET_PROPERTIES" Form="pointer" />
                <Parameter Name="dcRenderTarget" Type="D2D1::IDCRenderTarget" Form="deref out pointer com" IsRetval="true" />
            </Method>
        </Interface>

        <!-- We intentionally allow the factory IID to be regenerated on each call. -->

    </Namespace>  <!-- D2D1 -->

</D2DTypes>
