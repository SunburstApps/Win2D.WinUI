//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.System.idl";
import "Microsoft.UI.Composition.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Graphics.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedExperimentalContract;
    }
}
namespace Microsoft
{
    namespace System
    {
        runtimeclass DispatcherQueue;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass CompositionNotificationDeferral;

            runtimeclass CompositionObject;

            runtimeclass CompositionVisualSurface;

            runtimeclass Compositor;

            runtimeclass Visual;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Matrix3x2 Matrix3x2;

            typedef struct Matrix4x4 Matrix4x4;

            typedef struct Vector2 Vector2;

            typedef struct Vector3 Vector3;

            typedef struct Vector4 Vector4;
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        typedef struct SizeInt32 SizeInt32;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                typedef enum ExpExpressionNotificationProperty ExpExpressionNotificationProperty;

                interface IExpCompositionContent;

                interface IExpCompositionContentAutomationProviderRequestedEventArgs;

                interface IExpCompositionContentEnvironment;

                interface IExpCompositionContentEnvironmentStatics;

                interface IExpCompositionContentEventArgs;

                interface IExpCompositionContentFactory;

                interface IExpCompositionContentStatics;

                interface IExpCompositionPropertyChanged;

                interface IExpCompositionPropertyChangedListener;

                interface IExpCompositionVisualSurfaceStatics;

                interface IExpCompositor;

                interface IExpVisual;

                runtimeclass ExpCompositionContent;

                runtimeclass ExpCompositionContentAutomationProviderRequestedEventArgs;

                runtimeclass ExpCompositionContentEnvironment;

                runtimeclass ExpCompositionContentEventArgs;

                runtimeclass ExpCompositionVisualSurface;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                declare
                {
                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentAutomationProviderRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                enum ExpExpressionNotificationProperty
                {
                    Undefined          = 0,
                    Clip               = 1,
                    Offset             = 2,
                    Opacity            = 3,
                    Size               = 4,
                    RelativeOffset     = 5,
                    RelativeSize       = 6,
                    AnchorPoint        = 7,
                    CenterPoint        = 8,
                    Orientation        = 9,
                    RotationAngle      = 10,
                    RotationAxis       = 11,
                    Scale              = 12,
                    TransformMatrix    = 13,
                    BottomInset        = 14,
                    LeftInset          = 15,
                    RightInset         = 16,
                    TopInset           = 17,
                    LeftRadiusX        = 18,
                    LeftRadiusY        = 19,
                    BottomRightRadiusX = 20,
                    BottomRightRadiusY = 21,
                    TopLeftRadiusX     = 22,
                    TopLeftRadiusY     = 23,
                    TopRightRadiusX    = 24,
                    TopRightRadiusY    = 25
                };

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContent)]
                [uuid(7E8E5D4C-B0C8-5070-BD3B-123714471328)]
                interface IExpCompositionContent : IInspectable
                {
                    [propget] HRESULT ActualSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT Compositor([out] [retval] Microsoft.UI.Composition.Compositor** value);
                    [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
                    [propget] HRESULT DisplayScale([out] [retval] FLOAT* value);
                    [propget] HRESULT Environment([out] [retval] Microsoft.UI.Composition.Experimental.ExpCompositionContentEnvironment** value);
                    [propput] HRESULT Environment([in] Microsoft.UI.Composition.Experimental.ExpCompositionContentEnvironment* value);
                    [propget] HRESULT Id([out] [retval] UINT64* value);
                    [propget] HRESULT IsContentVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsContentVisible([in] boolean value);
                    [propget] HRESULT IsSiteVisible([out] [retval] boolean* value);
                    [propget] HRESULT Orientation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT RasterizationScale([out] [retval] FLOAT* value);
                    [propget] HRESULT RequestedSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propput] HRESULT RequestedSize([in] Windows.Foundation.Numerics.Vector2 value);
                    [propget] HRESULT Root([out] [retval] Microsoft.UI.Composition.Visual** value);
                    [propput] HRESULT Root([in] Microsoft.UI.Composition.Visual* value);
                    HRESULT CreateStateChangedDeferral([out] [retval] Microsoft.UI.Composition.CompositionNotificationDeferral** result);
                    [eventadd] HRESULT AutomationProviderRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentAutomationProviderRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AutomationProviderRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                    [eventadd] HRESULT CompositorConnected([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CompositorConnected([in] EventRegistrationToken token);
                    [eventadd] HRESULT StateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Composition.Experimental.ExpCompositionContent*, Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT StateChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContentAutomationProviderRequestedEventArgs)]
                [uuid(B2539FAA-F8A7-580E-B7BA-A87C916D531B)]
                interface IExpCompositionContentAutomationProviderRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT AutomationProvider([out] [retval] IInspectable** value);
                    [propput] HRESULT AutomationProvider([in] IInspectable* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContentEnvironment)]
                [uuid(A9BDC47F-7C18-5236-A1A6-D45BA30C4A14)]
                interface IExpCompositionContentEnvironment : IInspectable
                {
                    [propget] HRESULT DisplayScale([out] [retval] FLOAT* value);
                    [propget] HRESULT DefaultOrientation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT DefaultRasterizationScale([out] [retval] FLOAT* value);
                    HRESULT ChangeValues([in] Windows.Foundation.Numerics.Vector3 defaultOrientation, [in] FLOAT defaultRasterizationScale, [in] FLOAT displayScale);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContentEnvironment)]
                [uuid(BFF53B2E-9FD5-5062-BFE2-A8B13E7A0265)]
                interface IExpCompositionContentEnvironmentStatics : IInspectable
                {
                    HRESULT Create([out] [retval] Microsoft.UI.Composition.Experimental.ExpCompositionContentEnvironment** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs)]
                [uuid(AE73101F-CAA8-5194-BA00-77284B776FD3)]
                interface IExpCompositionContentEventArgs : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContent)]
                [uuid(1F44103A-6222-5B72-A663-3ADC17561DCD)]
                interface IExpCompositionContentFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionContent)]
                [uuid(1292B60A-3F39-5C71-B827-98EF24F41111)]
                interface IExpCompositionContentStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Experimental.ExpCompositionContent** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(12B579A9-6A27-5CDE-A2A1-C557BB7DFDB3)]
                interface IExpCompositionPropertyChanged : IInspectable
                {
                    HRESULT SetPropertyChangedListener([in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener* listener);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(5F9C3D96-1E77-5980-8B28-7A9B8614A863)]
                interface IExpCompositionPropertyChangedListener : IInspectable
                {
                    HRESULT NotifyBooleanPropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] boolean value);
                    HRESULT NotifyColorPropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.UI.Color value);
                    HRESULT NotifyMatrix3x2PropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.Foundation.Numerics.Matrix3x2 value);
                    HRESULT NotifyMatrix4x4PropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.Foundation.Numerics.Matrix4x4 value);
                    HRESULT NotifyReferencePropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property);
                    HRESULT NotifySinglePropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] FLOAT value);
                    HRESULT NotifyVector2PropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.Foundation.Numerics.Vector2 value);
                    HRESULT NotifyVector3PropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.Foundation.Numerics.Vector3 value);
                    HRESULT NotifyVector4PropertyChanged([in] Microsoft.UI.Composition.CompositionObject* target, [in] Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty property, [in] Windows.Foundation.Numerics.Vector4 value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Experimental.ExpCompositionVisualSurface)]
                [uuid(46193461-9018-5674-A09C-4AE6A29DAA35)]
                interface IExpCompositionVisualSurfaceStatics : IInspectable
                {
                    [overload("CreateVisualSurface")] HRESULT CreateVisualSurfaceWithRealizationSize([in] Microsoft.UI.Composition.Compositor* compositor, [in] Windows.Graphics.SizeInt32 realizationSize, [in] boolean frozen, [out] [retval] Microsoft.UI.Composition.CompositionVisualSurface** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(DDFE7441-66C9-5654-9E80-FF2677295995)]
                interface IExpCompositor : IInspectable
                {
                    HRESULT OpenSharedManipulationTransformFromHandle([in] UINT64 handle, [out] [retval] IInspectable** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(8FACCF79-665B-578F-8197-F8A64F8833D6)]
                interface IExpVisual : IInspectable
                {
                    HRESULT SetInteraction([in] IInspectable* interaction);
                }

                [composable(Microsoft.UI.Composition.Experimental.IExpCompositionContentFactory, public, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Experimental.IExpCompositionContentStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpCompositionContent
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpCompositionContent;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpCompositionContentAutomationProviderRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpCompositionContentAutomationProviderRequestedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Experimental.IExpCompositionContentEnvironmentStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpCompositionContentEnvironment
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpCompositionContentEnvironment;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpCompositionContentEventArgs
                {
                    [default] interface Microsoft.UI.Composition.Experimental.IExpCompositionContentEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Experimental.IExpCompositionVisualSurfaceStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpCompositionVisualSurface
                {
                }
            }
        }
    }
}
