//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Controls.idl";
import "Microsoft.UI.Xaml.Data.idl";
import "Microsoft.UI.Xaml.Input.idl";
import "Microsoft.UI.Xaml.Media.idl";
import "Microsoft.UI.Xaml.Media.Animation.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass CompositionAnimation;

            runtimeclass CompositionPropertySet;

            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpPointerPoint;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass AutoSuggestBox;

                typedef enum ChainingMode ChainingMode;

                typedef enum ClickMode ClickMode;

                runtimeclass ColorChangedEventArgs;

                typedef enum ColorPickerHsvChannel ColorPickerHsvChannel;

                typedef enum ColorSpectrumComponents ColorSpectrumComponents;

                typedef enum ColorSpectrumShape ColorSpectrumShape;

                runtimeclass ComboBox;

                typedef enum ContentOrientation ContentOrientation;

                runtimeclass Control;

                interface IInsertionPanel;

                runtimeclass IconElement;

                typedef enum InputKind InputKind;

                typedef enum InteractionState InteractionState;

                typedef enum LightDismissOverlayMode LightDismissOverlayMode;

                typedef enum Orientation Orientation;

                typedef enum RailingMode RailingMode;

                runtimeclass ScrollAnimationStartingEventArgs;

                runtimeclass ScrollCompletedEventArgs;

                typedef struct ScrollInfo ScrollInfo;

                typedef enum ScrollMode ScrollMode;

                runtimeclass ScrollOptions;

                runtimeclass ScrollerAnchorRequestedEventArgs;

                runtimeclass ScrollerBringingIntoViewEventArgs;

                delegate SelectionChangedEventHandler;

                runtimeclass ZoomAnimationStartingEventArgs;

                runtimeclass ZoomCompletedEventArgs;

                typedef struct ZoomInfo ZoomInfo;

                typedef enum ZoomMode ZoomMode;

                runtimeclass ZoomOptions;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Data
            {
                interface IValueConverter;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DataTemplate;

            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;

            typedef enum ElementSoundMode ElementSoundMode;

            runtimeclass FrameworkElement;

            typedef struct GridLength GridLength;

            typedef enum HorizontalAlignment HorizontalAlignment;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                interface ICommand;

                runtimeclass ProcessKeyboardAcceleratorEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Animation
                {
                    runtimeclass TransitionCollection;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass Brush;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            apicontract PrivateApiContract;

            delegate RoutedEventHandler;

            typedef struct Thickness Thickness;

            runtimeclass UIElement;

            typedef enum VerticalAlignment VerticalAlignment;

            typedef enum Visibility Visibility;

            apicontract WinUIContract;

            runtimeclass XamlRoot;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Vector2 Vector2;

            typedef struct Vector4 Vector4;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;

        typedef struct Size Size;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    typedef enum AnimationDirection AnimationDirection;

                    typedef enum ComponentResourceLocation ComponentResourceLocation;

                    typedef enum CornerRadiusFilterKind CornerRadiusFilterKind;

                    typedef enum CornerRadiusToThicknessConverterKind CornerRadiusToThicknessConverterKind;

                    typedef enum EdgeTransitionLocation EdgeTransitionLocation;

                    typedef enum FlyoutPlacementMode FlyoutPlacementMode;

                    typedef enum FlyoutShowMode FlyoutShowMode;

                    typedef enum GeneratorDirection GeneratorDirection;

                    typedef enum GroupHeaderPlacement GroupHeaderPlacement;

                    typedef enum ListViewItemPresenterCheckMode ListViewItemPresenterCheckMode;

                    typedef enum PlacementMode PlacementMode;

                    typedef enum ScrollEventType ScrollEventType;

                    typedef enum ScrollSnapPointsAlignment ScrollSnapPointsAlignment;

                    typedef enum ScrollingIndicatorMode ScrollingIndicatorMode;

                    typedef enum SliderSnapsTo SliderSnapsTo;

                    typedef enum SnapPointsAlignment SnapPointsAlignment;

                    typedef enum TickPlacement TickPlacement;

                    typedef struct GeneratorPosition GeneratorPosition;

                    delegate DragCompletedEventHandler;

                    delegate DragDeltaEventHandler;

                    delegate DragStartedEventHandler;

                    delegate ItemsChangedEventHandler;

                    delegate RangeBaseValueChangedEventHandler;

                    delegate ScrollEventHandler;

                    interface IAppBarButtonTemplateSettings;

                    interface IAppBarTemplateSettings;

                    interface IAppBarToggleButtonTemplateSettings;

                    interface IAutoSuggestBoxHelper;

                    interface IAutoSuggestBoxHelperStatics;

                    interface IButtonBase;

                    interface IButtonBaseFactory;

                    interface IButtonBaseStatics;

                    interface ICalendarPanel;

                    interface ICalendarViewTemplateSettings;

                    interface ICarouselPanel;

                    interface ICarouselPanelFactory;

                    interface IColorPickerSlider;

                    interface IColorPickerSliderFactory;

                    interface IColorPickerSliderStatics;

                    interface IColorSpectrum;

                    interface IColorSpectrumFactory;

                    interface IColorSpectrumStatics;

                    interface IColumnMajorUniformToLargestGridLayout;

                    interface IColumnMajorUniformToLargestGridLayoutFactory;

                    interface IColumnMajorUniformToLargestGridLayoutStatics;

                    interface IComboBoxHelper;

                    interface IComboBoxHelperStatics;

                    interface IComboBoxTemplateSettings;

                    interface ICommandBarFlyoutCommandBar;

                    interface ICommandBarFlyoutCommandBarFactory;

                    interface ICommandBarFlyoutCommandBarTemplateSettings;

                    interface ICommandBarTemplateSettings;

                    interface ICornerRadiusFilterConverter;

                    interface ICornerRadiusFilterConverterStatics;

                    interface ICornerRadiusToThicknessConverter;

                    interface ICornerRadiusToThicknessConverterStatics;

                    interface IDragCompletedEventArgs;

                    interface IDragCompletedEventArgsFactory;

                    interface IDragDeltaEventArgs;

                    interface IDragDeltaEventArgsFactory;

                    interface IDragStartedEventArgs;

                    interface IDragStartedEventArgsFactory;

                    interface IFlyoutBase;

                    interface IFlyoutBaseClosingEventArgs;

                    interface IFlyoutBaseFactory;

                    interface IFlyoutBaseOverrides;

                    interface IFlyoutBasePrivate;

                    interface IFlyoutBaseStatics;

                    interface IFlyoutShowOptions;

                    interface IFlyoutShowOptionsFactory;

                    interface IGeneratorPositionHelper;

                    interface IGeneratorPositionHelperStatics;

                    interface IGridViewItemPresenter;

                    interface IGridViewItemPresenterFactory;

                    interface IGridViewItemPresenterStatics;

                    interface IGridViewItemTemplateSettings;

                    interface IItemsChangedEventArgs;

                    interface IJumpListItemBackgroundConverter;

                    interface IJumpListItemBackgroundConverterStatics;

                    interface IJumpListItemForegroundConverter;

                    interface IJumpListItemForegroundConverterStatics;

                    interface ILayoutInformation;

                    interface ILayoutInformationStatics;

                    interface IListViewItemPresenter;

                    interface IListViewItemPresenterFactory;

                    interface IListViewItemPresenterStatics;

                    interface IListViewItemTemplateSettings;

                    interface ILoopingSelector;

                    interface ILoopingSelectorItem;

                    interface ILoopingSelectorPanel;

                    interface ILoopingSelectorStatics;

                    interface IMenuFlyoutItemTemplateSettings;

                    interface IMenuFlyoutPresenterTemplateSettings;

                    interface INavigationViewItemPresenter;

                    interface INavigationViewItemPresenterFactory;

                    interface INavigationViewItemPresenterStatics;

                    interface IOrientedVirtualizingPanel;

                    interface IOrientedVirtualizingPanelFactory;

                    interface IPickerFlyoutBase;

                    interface IPickerFlyoutBaseFactory;

                    interface IPickerFlyoutBaseOverrides;

                    interface IPickerFlyoutBaseStatics;

                    interface IPivotHeaderItem;

                    interface IPivotHeaderItemFactory;

                    interface IPivotHeaderPanel;

                    interface IPivotPanel;

                    interface IPopup;

                    interface IPopupStatics;

                    interface IProgressBarTemplateSettings;

                    interface IProgressRingTemplateSettings;

                    interface IRangeBase;

                    interface IRangeBaseFactory;

                    interface IRangeBaseOverrides;

                    interface IRangeBaseStatics;

                    interface IRangeBaseValueChangedEventArgs;

                    interface IRepeatButton;

                    interface IRepeatButtonStatics;

                    interface IRepeatedScrollSnapPoint;

                    interface IRepeatedScrollSnapPointFactory;

                    interface IRepeatedZoomSnapPoint;

                    interface IRepeatedZoomSnapPointFactory;

                    interface IScrollBar;

                    interface IScrollBarStatics;

                    interface IScrollController;

                    interface IScrollControllerInteractionRequestedEventArgs;

                    interface IScrollControllerInteractionRequestedEventArgsFactory;

                    interface IScrollControllerScrollByRequestedEventArgs;

                    interface IScrollControllerScrollByRequestedEventArgsFactory;

                    interface IScrollControllerScrollFromRequestedEventArgs;

                    interface IScrollControllerScrollFromRequestedEventArgsFactory;

                    interface IScrollControllerScrollToRequestedEventArgs;

                    interface IScrollControllerScrollToRequestedEventArgsFactory;

                    interface IScrollEventArgs;

                    interface IScrollSnapPoint;

                    interface IScrollSnapPointBase;

                    interface IScrollSnapPointBaseFactory;

                    interface IScrollSnapPointFactory;

                    interface IScrollSnapPointsInfo;

                    interface IScroller;

                    interface IScrollerFactory;

                    interface IScrollerStatics;

                    interface ISelector;

                    interface ISelectorFactory;

                    interface ISelectorItem;

                    interface ISelectorItemFactory;

                    interface ISelectorItemStatics;

                    interface ISelectorStatics;

                    interface ISnapPointBase;

                    interface ISnapPointBaseFactory;

                    interface ISplitViewTemplateSettings;

                    interface ITabViewListView;

                    interface ITabViewListViewFactory;

                    interface IThumb;

                    interface IThumbStatics;

                    interface ITickBar;

                    interface ITickBarStatics;

                    interface IToggleButton;

                    interface IToggleButtonFactory;

                    interface IToggleButtonOverrides;

                    interface IToggleButtonStatics;

                    interface IToggleSwitchTemplateSettings;

                    interface IToolTipTemplateSettings;

                    interface IZoomSnapPoint;

                    interface IZoomSnapPointBase;

                    interface IZoomSnapPointBaseFactory;

                    interface IZoomSnapPointFactory;

                    runtimeclass AppBarButtonTemplateSettings;

                    runtimeclass AppBarTemplateSettings;

                    runtimeclass AppBarToggleButtonTemplateSettings;

                    runtimeclass AutoSuggestBoxHelper;

                    runtimeclass ButtonBase;

                    runtimeclass CalendarPanel;

                    runtimeclass CalendarViewTemplateSettings;

                    runtimeclass CarouselPanel;

                    runtimeclass ColorPickerSlider;

                    runtimeclass ColorSpectrum;

                    runtimeclass ColumnMajorUniformToLargestGridLayout;

                    runtimeclass ComboBoxHelper;

                    runtimeclass ComboBoxTemplateSettings;

                    runtimeclass CommandBarFlyoutCommandBar;

                    runtimeclass CommandBarFlyoutCommandBarTemplateSettings;

                    runtimeclass CommandBarTemplateSettings;

                    runtimeclass CornerRadiusFilterConverter;

                    runtimeclass CornerRadiusToThicknessConverter;

                    runtimeclass DragCompletedEventArgs;

                    runtimeclass DragDeltaEventArgs;

                    runtimeclass DragStartedEventArgs;

                    runtimeclass FlyoutBase;

                    runtimeclass FlyoutBaseClosingEventArgs;

                    runtimeclass FlyoutShowOptions;

                    runtimeclass GeneratorPositionHelper;

                    runtimeclass GridViewItemPresenter;

                    runtimeclass GridViewItemTemplateSettings;

                    runtimeclass ItemsChangedEventArgs;

                    runtimeclass JumpListItemBackgroundConverter;

                    runtimeclass JumpListItemForegroundConverter;

                    runtimeclass LayoutInformation;

                    runtimeclass ListViewItemPresenter;

                    runtimeclass ListViewItemTemplateSettings;

                    runtimeclass LoopingSelector;

                    runtimeclass LoopingSelectorItem;

                    runtimeclass LoopingSelectorPanel;

                    runtimeclass MenuFlyoutItemTemplateSettings;

                    runtimeclass MenuFlyoutPresenterTemplateSettings;

                    runtimeclass NavigationViewItemPresenter;

                    runtimeclass OrientedVirtualizingPanel;

                    runtimeclass PickerFlyoutBase;

                    runtimeclass PivotHeaderItem;

                    runtimeclass PivotHeaderPanel;

                    runtimeclass PivotPanel;

                    runtimeclass Popup;

                    runtimeclass ProgressBarTemplateSettings;

                    runtimeclass ProgressRingTemplateSettings;

                    runtimeclass RangeBase;

                    runtimeclass RangeBaseValueChangedEventArgs;

                    runtimeclass RepeatButton;

                    runtimeclass RepeatedScrollSnapPoint;

                    runtimeclass RepeatedZoomSnapPoint;

                    runtimeclass ScrollBar;

                    runtimeclass ScrollControllerInteractionRequestedEventArgs;

                    runtimeclass ScrollControllerScrollByRequestedEventArgs;

                    runtimeclass ScrollControllerScrollFromRequestedEventArgs;

                    runtimeclass ScrollControllerScrollToRequestedEventArgs;

                    runtimeclass ScrollEventArgs;

                    runtimeclass ScrollSnapPoint;

                    runtimeclass ScrollSnapPointBase;

                    runtimeclass Scroller;

                    runtimeclass Selector;

                    runtimeclass SelectorItem;

                    runtimeclass SnapPointBase;

                    runtimeclass SplitViewTemplateSettings;

                    runtimeclass TabViewListView;

                    runtimeclass Thumb;

                    runtimeclass TickBar;

                    runtimeclass ToggleButton;

                    runtimeclass ToggleSwitchTemplateSettings;

                    runtimeclass ToolTipTemplateSettings;

                    runtimeclass ZoomSnapPoint;

                    runtimeclass ZoomSnapPointBase;
                }
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    declare
                    {
                        interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.Primitives.Popup*>;

                        interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>;

                        interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>;

                        interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.Primitives.Popup*>;

                        interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>;

                        interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>;

                        interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.Primitives.Popup*>;

                        interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>;

                        interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>;

                        interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>;

                        interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase*, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, IInspectable*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollFromRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>;
                    }
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum AnimationDirection
                    {
                        Left   = 0,
                        Top    = 1,
                        Right  = 2,
                        Bottom = 3
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum ComponentResourceLocation
                    {
                        Application = 0,
                        Nested      = 1
                    };

                    [version(0x00000001)]
                    enum CornerRadiusFilterKind
                    {
                        None             = 0,
                        Top              = 1,
                        Right            = 2,
                        Bottom           = 3,
                        Left             = 4,
                        TopLeftValue     = 5,
                        BottomRightValue = 6
                    };

                    [version(0x00000001)]
                    enum CornerRadiusToThicknessConverterKind
                    {
                        FilterTopAndBottomFromLeft   = 0,
                        FilterTopAndBottomFromRight  = 1,
                        FilterLeftAndRightFromTop    = 2,
                        FilterLeftAndRightFromBottom = 3
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum EdgeTransitionLocation
                    {
                        Left   = 0,
                        Top    = 1,
                        Right  = 2,
                        Bottom = 3
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum FlyoutPlacementMode
                    {
                        Top                    = 0,
                        Bottom                 = 1,
                        Left                   = 2,
                        Right                  = 3,
                        Full                   = 4,
                        TopEdgeAlignedLeft     = 5,
                        TopEdgeAlignedRight    = 6,
                        BottomEdgeAlignedLeft  = 7,
                        BottomEdgeAlignedRight = 8,
                        LeftEdgeAlignedTop     = 9,
                        LeftEdgeAlignedBottom  = 10,
                        RightEdgeAlignedTop    = 11,
                        RightEdgeAlignedBottom = 12,
                        Auto                   = 13
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum FlyoutShowMode
                    {
                        Auto                                  = 0,
                        Standard                              = 1,
                        Transient                             = 2,
                        TransientWithDismissOnPointerMoveAway = 3
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum GeneratorDirection
                    {
                        Forward  = 0,
                        Backward = 1
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum GroupHeaderPlacement
                    {
                        Top  = 0,
                        Left = 1
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum ListViewItemPresenterCheckMode
                    {
                        Inline  = 0,
                        Overlay = 1
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum PlacementMode
                    {
                        Bottom = 2,
                        Left   = 9,
                        Mouse  = 7,
                        Right  = 4,
                        Top    = 10
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum ScrollEventType
                    {
                        SmallDecrement = 0,
                        SmallIncrement = 1,
                        LargeDecrement = 2,
                        LargeIncrement = 3,
                        ThumbPosition  = 4,
                        ThumbTrack     = 5,
                        First          = 6,
                        Last           = 7,
                        EndScroll      = 8
                    };

                    [version(0x00000001)]
                    enum ScrollSnapPointsAlignment
                    {
                        Near   = 0,
                        Center = 1,
                        Far    = 2
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum ScrollingIndicatorMode
                    {
                        None           = 0,
                        TouchIndicator = 1,
                        MouseIndicator = 2
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum SliderSnapsTo
                    {
                        StepValues = 0,
                        Ticks      = 1
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum SnapPointsAlignment
                    {
                        Near   = 0,
                        Center = 1,
                        Far    = 2
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum TickPlacement
                    {
                        None        = 0,
                        TopLeft     = 1,
                        BottomRight = 2,
                        Outside     = 3,
                        Inline      = 4
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    struct GeneratorPosition
                    {
                        INT32 Index;
                        INT32 Offset;
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(A27012CB-923F-5992-ADE2-878F7C794EF5)]
                    delegate
                        HRESULT DragCompletedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(49CA91D0-FC43-56B1-98BD-68E2E1E24DE9)]
                    delegate
                        HRESULT DragDeltaEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(13191F6D-A651-5870-B3A1-221550003512)]
                    delegate
                        HRESULT DragStartedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(8E15E39E-23F7-5FCF-B04B-D1B7891DCCC4)]
                    delegate
                        HRESULT ItemsChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(23F0E209-9455-54CB-B8BC-0B49553C7DCC)]
                    delegate
                        HRESULT RangeBaseValueChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(FF661BA9-8C06-5785-A23C-30D6B31631E8)]
                    delegate
                        HRESULT ScrollEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings)]
                    [uuid(6FC13525-BF03-5190-A1D5-EBD6A1BCB6B4)]
                    interface IAppBarButtonTemplateSettings : IInspectable
                    {
                        [propget] HRESULT KeyboardAcceleratorTextMinWidth([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings)]
                    [uuid(FE60E73F-9A52-5E0A-B738-426F97D09768)]
                    interface IAppBarTemplateSettings : IInspectable
                    {
                        [propget] HRESULT ClipRect([out] [retval] Windows.Foundation.Rect* value);
                        [propget] HRESULT CompactVerticalDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT CompactRootMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propget] HRESULT MinimalVerticalDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT MinimalRootMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propget] HRESULT HiddenVerticalDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT HiddenRootMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propget] HRESULT NegativeCompactVerticalDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT NegativeMinimalVerticalDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT NegativeHiddenVerticalDelta([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings)]
                    [uuid(32AA9F11-2F5E-57AB-A570-B03BCEEE835D)]
                    interface IAppBarToggleButtonTemplateSettings : IInspectable
                    {
                        [propget] HRESULT KeyboardAcceleratorTextMinWidth([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper)]
                    [uuid(1E56736C-8248-57D9-AC04-E4E7DCC3F9E1)]
                    [version(0x00000001)]
                    interface IAutoSuggestBoxHelper : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper)]
                    [uuid(A8C05752-B160-5710-A009-2AD0FC4ED111)]
                    [version(0x00000001)]
                    interface IAutoSuggestBoxHelperStatics : IInspectable
                    {
                        [propget] HRESULT KeepInteriorCornersSquareProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        HRESULT SetKeepInteriorCornersSquare([in] Microsoft.UI.Xaml.Controls.AutoSuggestBox* autoSuggestBox, [in] boolean value);
                        HRESULT GetKeepInteriorCornersSquare([in] Microsoft.UI.Xaml.Controls.AutoSuggestBox* autoSuggestBox, [out] [retval] boolean* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)]
                    [uuid(65714269-2473-5327-A652-0EA6BCE7F403)]
                    interface IButtonBase : IInspectable
                    {
                        [propget] HRESULT ClickMode([out] [retval] Microsoft.UI.Xaml.Controls.ClickMode* value);
                        [propput] HRESULT ClickMode([in] Microsoft.UI.Xaml.Controls.ClickMode value);
                        [propget] HRESULT IsPointerOver([out] [retval] boolean* value);
                        [propget] HRESULT IsPressed([out] [retval] boolean* value);
                        [propget] HRESULT Command([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                        [propput] HRESULT Command([in] Microsoft.UI.Xaml.Input.ICommand* value);
                        [propget] HRESULT CommandParameter([out] [retval] IInspectable** value);
                        [propput] HRESULT CommandParameter([in] IInspectable* value);
                        [eventadd] HRESULT Click([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Click([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)]
                    [uuid(21251AA9-6FD1-5E51-AB3B-E6FCAF3395ED)]
                    interface IButtonBaseFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ButtonBase** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)]
                    [uuid(DBE812F6-ADF8-51D3-8137-A8FBF6445B3C)]
                    interface IButtonBaseStatics : IInspectable
                    {
                        [propget] HRESULT ClickModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsPointerOverProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsPressedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel)]
                    [uuid(A4B26C3A-3825-5DA4-A9E0-DD9B1E405E53)]
                    interface ICalendarPanel : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings)]
                    [uuid(23B0FACB-0083-5109-87D3-DBEB13E331A0)]
                    interface ICalendarViewTemplateSettings : IInspectable
                    {
                        [propget] HRESULT MinViewWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT HeaderText([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay1([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay2([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay3([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay4([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay5([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay6([out] [retval] HSTRING* value);
                        [propget] HRESULT WeekDay7([out] [retval] HSTRING* value);
                        [propget] HRESULT HasMoreContentAfter([out] [retval] boolean* value);
                        [propget] HRESULT HasMoreContentBefore([out] [retval] boolean* value);
                        [propget] HRESULT HasMoreViews([out] [retval] boolean* value);
                        [propget] HRESULT ClipRect([out] [retval] Windows.Foundation.Rect* value);
                        [propget] HRESULT CenterX([out] [retval] DOUBLE* value);
                        [propget] HRESULT CenterY([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel)]
                    [uuid(298D3800-E5C9-5003-B84C-A6538866E2D5)]
                    interface ICarouselPanel : IInspectable
                    {
                        [propget] HRESULT CanVerticallyScroll([out] [retval] boolean* value);
                        [propput] HRESULT CanVerticallyScroll([in] boolean value);
                        [propget] HRESULT CanHorizontallyScroll([out] [retval] boolean* value);
                        [propput] HRESULT CanHorizontallyScroll([in] boolean value);
                        [propget] HRESULT ExtentWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExtentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT ScrollOwner([out] [retval] IInspectable** value);
                        [propput] HRESULT ScrollOwner([in] IInspectable* value);
                        HRESULT LineUp();
                        HRESULT LineDown();
                        HRESULT LineLeft();
                        HRESULT LineRight();
                        HRESULT PageUp();
                        HRESULT PageDown();
                        HRESULT PageLeft();
                        HRESULT PageRight();
                        HRESULT MouseWheelUp();
                        HRESULT MouseWheelDown();
                        HRESULT MouseWheelLeft();
                        HRESULT MouseWheelRight();
                        HRESULT SetHorizontalOffset([in] DOUBLE offset);
                        HRESULT SetVerticalOffset([in] DOUBLE offset);
                        HRESULT MakeVisible([in] Microsoft.UI.Xaml.UIElement* visual, [in] Windows.Foundation.Rect rectangle, [out] [retval] Windows.Foundation.Rect* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel)]
                    [uuid(161D3FC2-D1EC-5D1D-AC8A-CF4577F06C3C)]
                    interface ICarouselPanelFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider)]
                    [uuid(456231BB-5A4C-564B-9B3D-2F157061A0F8)]
                    [version(0x00000001)]
                    interface IColorPickerSlider : IInspectable
                    {
                        [propget] HRESULT ColorChannel([out] [retval] Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel* value);
                        [propput] HRESULT ColorChannel([in] Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider)]
                    [uuid(D0CB1F0E-0771-5C7D-BA14-AA431179B2AC)]
                    [version(0x00000001)]
                    interface IColorPickerSliderFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider)]
                    [uuid(82F72B75-E986-587F-9701-8AC6801DA932)]
                    [version(0x00000001)]
                    interface IColorPickerSliderStatics : IInspectable
                    {
                        [propget] HRESULT ColorChannelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum)]
                    [uuid(75305916-882D-5667-BFD0-0AF72D502D72)]
                    [version(0x00000001)]
                    interface IColorSpectrum : IInspectable
                    {
                        [propget] HRESULT Color([out] [retval] Windows.UI.Color* value);
                        [propput] HRESULT Color([in] Windows.UI.Color value);
                        [propget] HRESULT HsvColor([out] [retval] Windows.Foundation.Numerics.Vector4* value);
                        [propput] HRESULT HsvColor([in] Windows.Foundation.Numerics.Vector4 value);
                        [propget] HRESULT MinHue([out] [retval] INT32* value);
                        [propput] HRESULT MinHue([in] INT32 value);
                        [propget] HRESULT MaxHue([out] [retval] INT32* value);
                        [propput] HRESULT MaxHue([in] INT32 value);
                        [propget] HRESULT MinSaturation([out] [retval] INT32* value);
                        [propput] HRESULT MinSaturation([in] INT32 value);
                        [propget] HRESULT MaxSaturation([out] [retval] INT32* value);
                        [propput] HRESULT MaxSaturation([in] INT32 value);
                        [propget] HRESULT MinValue([out] [retval] INT32* value);
                        [propput] HRESULT MinValue([in] INT32 value);
                        [propget] HRESULT MaxValue([out] [retval] INT32* value);
                        [propput] HRESULT MaxValue([in] INT32 value);
                        [propget] HRESULT Shape([out] [retval] Microsoft.UI.Xaml.Controls.ColorSpectrumShape* value);
                        [propput] HRESULT Shape([in] Microsoft.UI.Xaml.Controls.ColorSpectrumShape value);
                        [propget] HRESULT Components([out] [retval] Microsoft.UI.Xaml.Controls.ColorSpectrumComponents* value);
                        [propput] HRESULT Components([in] Microsoft.UI.Xaml.Controls.ColorSpectrumComponents value);
                        [eventadd] HRESULT ColorChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum*, Microsoft.UI.Xaml.Controls.ColorChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ColorChanged([in] EventRegistrationToken token);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum)]
                    [uuid(EFECD442-8C2A-50A6-88A3-3999EA01F096)]
                    [version(0x00000001)]
                    interface IColorSpectrumFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum)]
                    [uuid(A2B43DBA-1616-527D-9D32-039573B7FCE7)]
                    [version(0x00000001)]
                    interface IColorSpectrumStatics : IInspectable
                    {
                        [propget] HRESULT ColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HsvColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MinHueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MaxHueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MinSaturationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MaxSaturationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MinValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MaxValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ShapeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ComponentsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout)]
                    [uuid(EE10A6AA-EFEB-51AC-B791-71913AE8C235)]
                    [version(0x00000001)]
                    interface IColumnMajorUniformToLargestGridLayout : IInspectable
                    {
                        [propget] HRESULT MaxColumns([out] [retval] INT32* value);
                        [propput] HRESULT MaxColumns([in] INT32 value);
                        [propget] HRESULT ColumnSpacing([out] [retval] DOUBLE* value);
                        [propput] HRESULT ColumnSpacing([in] DOUBLE value);
                        [propget] HRESULT RowSpacing([out] [retval] DOUBLE* value);
                        [propput] HRESULT RowSpacing([in] DOUBLE value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout)]
                    [uuid(2F21AF59-1585-5325-8412-2B83BF05D345)]
                    [version(0x00000001)]
                    interface IColumnMajorUniformToLargestGridLayoutFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout)]
                    [uuid(7B2F0EC6-2345-5986-A5B9-B1BEB5A74350)]
                    [version(0x00000001)]
                    interface IColumnMajorUniformToLargestGridLayoutStatics : IInspectable
                    {
                        [propget] HRESULT MaxColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ColumnSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RowSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper)]
                    [uuid(5A3C87AC-C399-5E5F-873F-B9D0E8BCCEB7)]
                    [version(0x00000001)]
                    interface IComboBoxHelper : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper)]
                    [uuid(EC21BE42-ED02-5C10-9FBE-AF1881CD877B)]
                    [version(0x00000001)]
                    interface IComboBoxHelperStatics : IInspectable
                    {
                        [propget] HRESULT KeepInteriorCornersSquareProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        HRESULT SetKeepInteriorCornersSquare([in] Microsoft.UI.Xaml.Controls.ComboBox* comboBox, [in] boolean value);
                        HRESULT GetKeepInteriorCornersSquare([in] Microsoft.UI.Xaml.Controls.ComboBox* comboBox, [out] [retval] boolean* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings)]
                    [uuid(F2DC5E7F-8D3F-5C20-B356-AF6F1FF8242A)]
                    interface IComboBoxTemplateSettings : IInspectable
                    {
                        [propget] HRESULT DropDownOpenedHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT DropDownClosedHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT DropDownOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT SelectedItemDirection([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection* value);
                        [propget] HRESULT DropDownContentMinWidth([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar)]
                    [uuid(0F7120C5-6D00-5489-9171-BEDD2D4EF677)]
                    [version(0x00000001)]
                    interface ICommandBarFlyoutCommandBar : IInspectable
                    {
                        [propget] HRESULT FlyoutTemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar)]
                    [uuid(58DBCDA9-38E4-5EFC-B740-26FDA3D0A3C6)]
                    [version(0x00000001)]
                    interface ICommandBarFlyoutCommandBarFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings)]
                    [uuid(533CC5CA-DCF7-5F9D-A460-934A883ACDC1)]
                    [version(0x00000001)]
                    interface ICommandBarFlyoutCommandBarTemplateSettings : IInspectable
                    {
                        [propget] HRESULT OpenAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT OpenAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT CloseAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT CurrentWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandedWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT WidthExpansionDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT WidthExpansionAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT WidthExpansionAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT WidthExpansionMoreButtonAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT WidthExpansionMoreButtonAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandUpOverflowVerticalPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandDownOverflowVerticalPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandUpAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandUpAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandUpAnimationHoldPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandDownAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandDownAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExpandDownAnimationHoldPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ContentClipRect([out] [retval] Windows.Foundation.Rect* value);
                        [propget] HRESULT OverflowContentClipRect([out] [retval] Windows.Foundation.Rect* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings)]
                    [uuid(AE9535F6-1678-5066-90BF-147AA610C5DD)]
                    interface ICommandBarTemplateSettings : IInspectable
                    {
                        [propget] HRESULT ContentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentClipRect([out] [retval] Windows.Foundation.Rect* value);
                        [propget] HRESULT OverflowContentMinWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentMaxWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentMaxHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentHorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT NegativeOverflowContentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT EffectiveOverflowButtonVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                        [propget] HRESULT OverflowContentCompactYTranslation([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentMinimalYTranslation([out] [retval] DOUBLE* value);
                        [propget] HRESULT OverflowContentHiddenYTranslation([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter)]
                    [uuid(6F1A3ED2-F965-545E-BD44-441DB1794F5F)]
                    [version(0x00000001)]
                    interface ICornerRadiusFilterConverter : IInspectable
                    {
                        [propget] HRESULT Filter([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind* value);
                        [propput] HRESULT Filter([in] Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind value);
                        [propget] HRESULT Scale([out] [retval] DOUBLE* value);
                        [propput] HRESULT Scale([in] DOUBLE value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter)]
                    [uuid(2D9574F9-CC9E-535E-A70E-D55C4CA27F49)]
                    [version(0x00000001)]
                    interface ICornerRadiusFilterConverterStatics : IInspectable
                    {
                        [propget] HRESULT FilterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ScaleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter)]
                    [uuid(04F7ECA4-89C2-5731-AFF9-6B66B0A0C01E)]
                    [version(0x00000001)]
                    interface ICornerRadiusToThicknessConverter : IInspectable
                    {
                        [propget] HRESULT ConversionKind([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind* value);
                        [propput] HRESULT ConversionKind([in] Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter)]
                    [uuid(6ACE137E-DA86-5E4C-AC5C-94C176221C0A)]
                    [version(0x00000001)]
                    interface ICornerRadiusToThicknessConverterStatics : IInspectable
                    {
                        [propget] HRESULT ConversionKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs)]
                    [uuid(ACD47547-3784-51FF-8EEB-7B212439974B)]
                    interface IDragCompletedEventArgs : IInspectable
                    {
                        [propget] HRESULT HorizontalChange([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalChange([out] [retval] DOUBLE* value);
                        [propget] HRESULT Canceled([out] [retval] boolean* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs)]
                    [uuid(5767C408-454B-55CF-B74E-229642AED108)]
                    interface IDragCompletedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled([in] DOUBLE horizontalChange, [in] DOUBLE verticalChange, [in] boolean canceled, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs)]
                    [uuid(BC405765-ED94-5697-8506-A8F3D15272F9)]
                    interface IDragDeltaEventArgs : IInspectable
                    {
                        [propget] HRESULT HorizontalChange([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalChange([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs)]
                    [uuid(4ADBA280-E1F9-5DAB-87FF-5903B419EF9D)]
                    interface IDragDeltaEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithHorizontalChangeAndVerticalChange([in] DOUBLE horizontalChange, [in] DOUBLE verticalChange, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs)]
                    [uuid(AA27AEE4-2BDD-5D9A-8A1C-B37480A2012B)]
                    interface IDragStartedEventArgs : IInspectable
                    {
                        [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs)]
                    [uuid(36078AA3-906C-5EF0-9D24-30C09F79C18F)]
                    interface IDragStartedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithHorizontalOffsetAndVerticalOffset([in] DOUBLE horizontalOffset, [in] DOUBLE verticalOffset, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)]
                    [uuid(BB6603BF-744D-5C31-A87D-744394634D77)]
                    interface IFlyoutBase : IInspectable
                    {
                        [propget] HRESULT Placement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode* value);
                        [propput] HRESULT Placement([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode value);
                        [propget] HRESULT Target([out] [retval] Microsoft.UI.Xaml.FrameworkElement** value);
                        [propget] HRESULT AllowFocusOnInteraction([out] [retval] boolean* value);
                        [propput] HRESULT AllowFocusOnInteraction([in] boolean value);
                        [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                        [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                        [propget] HRESULT AllowFocusWhenDisabled([out] [retval] boolean* value);
                        [propput] HRESULT AllowFocusWhenDisabled([in] boolean value);
                        [propget] HRESULT ShowMode([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode* value);
                        [propput] HRESULT ShowMode([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode value);
                        [propget] HRESULT InputDevicePrefersPrimaryCommands([out] [retval] boolean* value);
                        [propget] HRESULT AreOpenCloseAnimationsEnabled([out] [retval] boolean* value);
                        [propput] HRESULT AreOpenCloseAnimationsEnabled([in] boolean value);
                        [propget] HRESULT ShouldConstrainToRootBounds([out] [retval] boolean* value);
                        [propput] HRESULT ShouldConstrainToRootBounds([in] boolean value);
                        [propget] HRESULT IsConstrainedToRootBounds([out] [retval] boolean* value);
                        [propget] HRESULT ElementSoundMode([out] [retval] Microsoft.UI.Xaml.ElementSoundMode* value);
                        [propput] HRESULT ElementSoundMode([in] Microsoft.UI.Xaml.ElementSoundMode value);
                        [propget] HRESULT OverlayInputPassThroughElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                        [propput] HRESULT OverlayInputPassThroughElement([in] Microsoft.UI.Xaml.DependencyObject* value);
                        [propget] HRESULT IsOpen([out] [retval] boolean* value);
                        [propget] HRESULT XamlRoot([out] [retval] Microsoft.UI.Xaml.XamlRoot** value);
                        [propput] HRESULT XamlRoot([in] Microsoft.UI.Xaml.XamlRoot* value);
                        [eventadd] HRESULT Opened([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                        [eventadd] HRESULT Closed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                        [eventadd] HRESULT Opening([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Opening([in] EventRegistrationToken token);
                        [eventadd] HRESULT Closing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase*, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Closing([in] EventRegistrationToken token);
                        [overload("ShowAt")] HRESULT ShowAt([in] Microsoft.UI.Xaml.FrameworkElement* placementTarget);
                        [overload("ShowAt")] HRESULT ShowAtWithOptions([in] Microsoft.UI.Xaml.DependencyObject* placementTarget, [in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions* showOptions);
                        HRESULT Hide();
                        HRESULT TryInvokeKeyboardAccelerator([in] Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs* args);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs)]
                    [uuid(7CB280B4-1CCA-5A5A-8EA4-191A2BBC8B32)]
                    interface IFlyoutBaseClosingEventArgs : IInspectable
                    {
                        [propget] HRESULT Cancel([out] [retval] boolean* value);
                        [propput] HRESULT Cancel([in] boolean value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)]
                    [uuid(006D738F-7C91-5EF3-8A80-A548108DAB8B)]
                    interface IFlyoutBaseFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)]
                    [uuid(5BB19ED8-08DE-5EEC-91CB-5FC59974E894)]
                    interface IFlyoutBaseOverrides : IInspectable
                    {
                        HRESULT CreatePresenter([out] [retval] Microsoft.UI.Xaml.Controls.Control** result);
                        HRESULT OnProcessKeyboardAccelerators([in] Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs* args);
                    }

                    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                    [uuid(1E299B54-C5A9-59C3-8C76-3B0C17F6BA55)]
                    interface IFlyoutBasePrivate : IInspectable
                    {
                        [propget] HRESULT UsePickerFlyoutTheme([out] [retval] boolean* value);
                        [propput] HRESULT UsePickerFlyoutTheme([in] boolean value);
                        [propget] HRESULT IsLightDismissOverlayEnabled([out] [retval] boolean* value);
                        [propput] HRESULT IsLightDismissOverlayEnabled([in] boolean value);
                        HRESULT PlaceFlyoutForDateTimePicker([in] Windows.Foundation.Point point);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)]
                    [uuid(63EE628E-D2E3-5515-AEA4-E461088C0C4E)]
                    interface IFlyoutBaseStatics : IInspectable
                    {
                        [propget] HRESULT TargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AllowFocusOnInteractionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AllowFocusWhenDisabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ShowModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT InputDevicePrefersPrimaryCommandsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AreOpenCloseAnimationsEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ShouldConstrainToRootBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ElementSoundModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT OverlayInputPassThroughElementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AttachedFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        HRESULT GetAttachedFlyout([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** result);
                        HRESULT SetAttachedFlyout([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                        HRESULT ShowAttachedFlyout([in] Microsoft.UI.Xaml.FrameworkElement* flyoutOwner);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions)]
                    [uuid(30774A93-2803-50D3-B406-904AEC3E175D)]
                    interface IFlyoutShowOptions : IInspectable
                    {
                        [propget] HRESULT Position([out] [retval] Windows.Foundation.IReference<Windows.Foundation.Point>** value);
                        [propput] HRESULT Position([in] Windows.Foundation.IReference<Windows.Foundation.Point>* value);
                        [propget] HRESULT ExclusionRect([out] [retval] Windows.Foundation.IReference<Windows.Foundation.Rect>** value);
                        [propput] HRESULT ExclusionRect([in] Windows.Foundation.IReference<Windows.Foundation.Rect>* value);
                        [propget] HRESULT ShowMode([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode* value);
                        [propput] HRESULT ShowMode([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode value);
                        [propget] HRESULT Placement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode* value);
                        [propput] HRESULT Placement([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions)]
                    [uuid(17426D30-70D9-54D7-BD39-E7C4C940C0F4)]
                    interface IFlyoutShowOptionsFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GeneratorPositionHelper)]
                    [uuid(872A9F8F-0E0E-5089-92A9-DBCED99CA86D)]
                    interface IGeneratorPositionHelper : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GeneratorPositionHelper)]
                    [uuid(3113605A-3FEB-54F9-A256-F373250281D4)]
                    interface IGeneratorPositionHelperStatics : IInspectable
                    {
                        HRESULT FromIndexAndOffset([in] INT32 index, [in] INT32 offset, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter)]
                    [uuid(22772FD8-FE30-5B6F-9B17-5EEA5D70D860)]
                    interface IGridViewItemPresenter : IInspectable
                    {
                        [propget] HRESULT SelectionCheckMarkVisualEnabled([out] [retval] boolean* value);
                        [propput] HRESULT SelectionCheckMarkVisualEnabled([in] boolean value);
                        [propget] HRESULT CheckHintBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckHintBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckSelectingBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckSelectingBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT DragBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT DragBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT DragForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT DragForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT FocusBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT FocusBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT PlaceholderBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PlaceholderBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT PointerOverBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PointerOverBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedPointerOverBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedPointerOverBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedPointerOverBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedPointerOverBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedBorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT SelectedBorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT DisabledOpacity([out] [retval] DOUBLE* value);
                        [propput] HRESULT DisabledOpacity([in] DOUBLE value);
                        [propget] HRESULT DragOpacity([out] [retval] DOUBLE* value);
                        [propput] HRESULT DragOpacity([in] DOUBLE value);
                        [propget] HRESULT ReorderHintOffset([out] [retval] DOUBLE* value);
                        [propput] HRESULT ReorderHintOffset([in] DOUBLE value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of GridViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterHorizontalContentAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of GridViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT GridViewItemPresenterHorizontalContentAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of GridViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterVerticalContentAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of GridViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT GridViewItemPresenterVerticalContentAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterPadding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT GridViewItemPresenterPadding([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT PointerOverBackgroundMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT PointerOverBackgroundMargin([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT ContentMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT ContentMargin([in] Microsoft.UI.Xaml.Thickness value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter)]
                    [uuid(D1F47760-C353-5A10-8A6B-9A1E3B52F934)]
                    interface IGridViewItemPresenterFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter)]
                    [uuid(31A58ED1-901C-5753-944E-4DD9F22D2447)]
                    interface IGridViewItemPresenterStatics : IInspectable
                    {
                        [propget] HRESULT SelectionCheckMarkVisualEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckHintBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckSelectingBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT FocusBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PlaceholderBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PointerOverBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedPointerOverBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedPointerOverBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedBorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DisabledOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ReorderHintOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of GridViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterHorizontalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of GridViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterVerticalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT GridViewItemPresenterPaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PointerOverBackgroundMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ContentMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings)]
                    [uuid(7033E884-2117-56E7-AFB8-B7F5B8B64C70)]
                    interface IGridViewItemTemplateSettings : IInspectable
                    {
                        [propget] HRESULT DragItemsCount([out] [retval] INT32* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs)]
                    [uuid(B2BA1610-0E96-538A-978F-EC0B37193228)]
                    interface IItemsChangedEventArgs : IInspectable
                    {
                        [propget] HRESULT Action([out] [retval] INT32* value);
                        [propget] HRESULT Position([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition* value);
                        [propget] HRESULT OldPosition([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition* value);
                        [propget] HRESULT ItemCount([out] [retval] INT32* value);
                        [propget] HRESULT ItemUICount([out] [retval] INT32* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter)]
                    [uuid(C475BB52-EA34-5CDE-9851-7841FEBD3D1D)]
                    interface IJumpListItemBackgroundConverter : IInspectable
                    {
                        [propget] HRESULT Enabled([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Enabled([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT Disabled([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Disabled([in] Microsoft.UI.Xaml.Media.Brush* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter)]
                    [uuid(B03CB261-71EC-540E-83AC-E1A9FDD335E6)]
                    interface IJumpListItemBackgroundConverterStatics : IInspectable
                    {
                        [propget] HRESULT EnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DisabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter)]
                    [uuid(7308E0E4-102F-571A-BFDC-C8F411F07400)]
                    interface IJumpListItemForegroundConverter : IInspectable
                    {
                        [propget] HRESULT Enabled([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Enabled([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT Disabled([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Disabled([in] Microsoft.UI.Xaml.Media.Brush* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter)]
                    [uuid(9AB3B95D-4061-59B4-9CE9-F45E2C05ADD7)]
                    interface IJumpListItemForegroundConverterStatics : IInspectable
                    {
                        [propget] HRESULT EnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DisabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation)]
                    [uuid(CEEA0A8C-5A4F-5D7A-8FEA-77B5E0E0230C)]
                    interface ILayoutInformation : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation)]
                    [uuid(8DDB192D-B7FF-5307-ACF4-D4E547DA5815)]
                    interface ILayoutInformationStatics : IInspectable
                    {
                        HRESULT GetLayoutExceptionElement([in] IInspectable* dispatcher, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                        HRESULT GetLayoutSlot([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] Windows.Foundation.Rect* result);
                        HRESULT GetAvailableSize([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] Windows.Foundation.Size* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter)]
                    [uuid(B5A9A668-EBD9-521A-A516-594F6AC44507)]
                    interface IListViewItemPresenter : IInspectable
                    {
                        [propget] HRESULT SelectionCheckMarkVisualEnabled([out] [retval] boolean* value);
                        [propput] HRESULT SelectionCheckMarkVisualEnabled([in] boolean value);
                        [propget] HRESULT CheckHintBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckHintBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckSelectingBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckSelectingBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT DragBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT DragBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT DragForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT DragForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT FocusBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT FocusBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT PlaceholderBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PlaceholderBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT PointerOverBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PointerOverBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedPointerOverBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedPointerOverBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedPointerOverBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedPointerOverBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT SelectedBorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT SelectedBorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT DisabledOpacity([out] [retval] DOUBLE* value);
                        [propput] HRESULT DisabledOpacity([in] DOUBLE value);
                        [propget] HRESULT DragOpacity([out] [retval] DOUBLE* value);
                        [propput] HRESULT DragOpacity([in] DOUBLE value);
                        [propget] HRESULT ReorderHintOffset([out] [retval] DOUBLE* value);
                        [propput] HRESULT ReorderHintOffset([in] DOUBLE value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of ListViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterHorizontalContentAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of ListViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT ListViewItemPresenterHorizontalContentAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of ListViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterVerticalContentAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of ListViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT ListViewItemPresenterVerticalContentAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterPadding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT ListViewItemPresenterPadding([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT PointerOverBackgroundMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT PointerOverBackgroundMargin([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT ContentMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT ContentMargin([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT SelectedPressedBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT SelectedPressedBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT PressedBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PressedBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckBoxBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT CheckBoxBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT FocusSecondaryBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT FocusSecondaryBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT CheckMode([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode* value);
                        [propput] HRESULT CheckMode([in] Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode value);
                        [propget] HRESULT PointerOverForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT PointerOverForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT RevealBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT RevealBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT RevealBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT RevealBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT RevealBorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propput] HRESULT RevealBorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                        [propget] HRESULT RevealBackgroundShowsAboveContent([out] [retval] boolean* value);
                        [propput] HRESULT RevealBackgroundShowsAboveContent([in] boolean value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter)]
                    [uuid(F86AC266-2740-505C-95EB-A7331B53B4A3)]
                    interface IListViewItemPresenterFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter)]
                    [uuid(4D2F6FF4-1C7D-5527-B262-F14ED661C1AF)]
                    interface IListViewItemPresenterStatics : IInspectable
                    {
                        [propget] HRESULT SelectionCheckMarkVisualEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckHintBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckSelectingBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT FocusBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PlaceholderBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PointerOverBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedPointerOverBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedPointerOverBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedBorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DisabledOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DragOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ReorderHintOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.HorizontalContentAlignment instead of ListViewItemPresenterHorizontalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterHorizontalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.VerticalContentAlignment instead of ListViewItemPresenterVerticalContentAlignment. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterVerticalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [deprecated("Use ContentPresenter.Padding instead of GridViewItemPresenterPadding. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ListViewItemPresenterPaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PointerOverBackgroundMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ContentMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedPressedBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PressedBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckBoxBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT FocusSecondaryBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT CheckModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PointerOverForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RevealBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RevealBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RevealBorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RevealBackgroundShowsAboveContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings)]
                    [uuid(6E302714-2955-5961-94ED-5D0C0C1D0B07)]
                    interface IListViewItemTemplateSettings : IInspectable
                    {
                        [propget] HRESULT DragItemsCount([out] [retval] INT32* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector)]
                    [uuid(077759AC-6B52-5054-BD49-9EBA843CF894)]
                    interface ILoopingSelector : IInspectable
                    {
                        [propget] HRESULT ShouldLoop([out] [retval] boolean* value);
                        [propput] HRESULT ShouldLoop([in] boolean value);
                        [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                        [propput] HRESULT Items([in] Windows.Foundation.Collections.IVector<IInspectable*>* value);
                        [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                        [propput] HRESULT SelectedIndex([in] INT32 value);
                        [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                        [propput] HRESULT SelectedItem([in] IInspectable* value);
                        [propget] HRESULT ItemWidth([out] [retval] INT32* value);
                        [propput] HRESULT ItemWidth([in] INT32 value);
                        [propget] HRESULT ItemHeight([out] [retval] INT32* value);
                        [propput] HRESULT ItemHeight([in] INT32 value);
                        [propget] HRESULT ItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                        [propput] HRESULT ItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                        [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem)]
                    [uuid(75D36595-BF4F-5393-819F-EB1E321CE1DC)]
                    interface ILoopingSelectorItem : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel)]
                    [uuid(7479C3A4-C5B1-5112-BEA9-BEEF5CC79F57)]
                    interface ILoopingSelectorPanel : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector)]
                    [uuid(E7F8770E-729B-57AA-9A79-EDE3F84253CC)]
                    interface ILoopingSelectorStatics : IInspectable
                    {
                        [propget] HRESULT ShouldLoopProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings)]
                    [uuid(FA7B8B1F-020D-58EC-8658-F2CE97310051)]
                    interface IMenuFlyoutItemTemplateSettings : IInspectable
                    {
                        [propget] HRESULT KeyboardAcceleratorTextMinWidth([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings)]
                    [uuid(2BFCFA7E-483C-5FC9-B070-FBB58E6E974D)]
                    interface IMenuFlyoutPresenterTemplateSettings : IInspectable
                    {
                        [propget] HRESULT FlyoutContentMinWidth([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter)]
                    [uuid(70943859-BE4E-5AD6-B014-AEB9EBE3C091)]
                    [version(0x00000001)]
                    interface INavigationViewItemPresenter : IInspectable
                    {
                        [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                        [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter)]
                    [uuid(B28B0160-022C-593C-AB9A-7B3DED2C0754)]
                    [version(0x00000001)]
                    interface INavigationViewItemPresenterFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter)]
                    [uuid(11C86E8F-A525-5BC0-B72E-0BBD61B46F5E)]
                    [version(0x00000001)]
                    interface INavigationViewItemPresenterStatics : IInspectable
                    {
                        [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel)]
                    [uuid(450D2984-1E70-53D8-8269-A27564DAA69F)]
                    interface IOrientedVirtualizingPanel : IInspectable
                    {
                        [propget] HRESULT CanVerticallyScroll([out] [retval] boolean* value);
                        [propput] HRESULT CanVerticallyScroll([in] boolean value);
                        [propget] HRESULT CanHorizontallyScroll([out] [retval] boolean* value);
                        [propput] HRESULT CanHorizontallyScroll([in] boolean value);
                        [propget] HRESULT ExtentWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExtentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT ScrollOwner([out] [retval] IInspectable** value);
                        [propput] HRESULT ScrollOwner([in] IInspectable* value);
                        HRESULT LineUp();
                        HRESULT LineDown();
                        HRESULT LineLeft();
                        HRESULT LineRight();
                        HRESULT PageUp();
                        HRESULT PageDown();
                        HRESULT PageLeft();
                        HRESULT PageRight();
                        HRESULT MouseWheelUp();
                        HRESULT MouseWheelDown();
                        HRESULT MouseWheelLeft();
                        HRESULT MouseWheelRight();
                        HRESULT SetHorizontalOffset([in] DOUBLE offset);
                        HRESULT SetVerticalOffset([in] DOUBLE offset);
                        HRESULT MakeVisible([in] Microsoft.UI.Xaml.UIElement* visual, [in] Windows.Foundation.Rect rectangle, [out] [retval] Windows.Foundation.Rect* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel)]
                    [uuid(A70C98F4-D671-5F46-9B01-28B1B5528FC0)]
                    interface IOrientedVirtualizingPanelFactory : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase)]
                    [uuid(8C2CC030-14FE-5FCA-8CE3-E11A918632CC)]
                    interface IPickerFlyoutBase : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase)]
                    [uuid(8231DAB5-4B8B-5674-B273-1C66701C14E1)]
                    interface IPickerFlyoutBaseFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase)]
                    [uuid(5B090FFC-D423-5756-A01C-AA734579D856)]
                    interface IPickerFlyoutBaseOverrides : IInspectable
                    {
                        HRESULT OnConfirmed();
                        HRESULT ShouldShowConfirmationButtons([out] [retval] boolean* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase)]
                    [uuid(0E414DC2-38E0-5EFE-BAE8-A0C6A78514C8)]
                    interface IPickerFlyoutBaseStatics : IInspectable
                    {
                        [propget] HRESULT TitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        HRESULT GetTitle([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] HSTRING* result);
                        HRESULT SetTitle([in] Microsoft.UI.Xaml.DependencyObject* element, [in] HSTRING value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem)]
                    [uuid(612D6F77-6C76-5239-8894-EFBAB0F53E3E)]
                    interface IPivotHeaderItem : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem)]
                    [uuid(D8DB1A66-1384-518D-BC8F-9EDC2CA79190)]
                    interface IPivotHeaderItemFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel)]
                    [uuid(B5AF5BED-5F2F-5AF6-BF17-C085531C880F)]
                    interface IPivotHeaderPanel : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.PivotPanel)]
                    [uuid(8E66CDCF-3BF5-5FE0-B05B-1125E961F0CC)]
                    interface IPivotPanel : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Popup)]
                    [uuid(4E3AB19D-2F95-579C-9535-906C58629437)]
                    interface IPopup : IInspectable
                    {
                        [propget] HRESULT Child([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                        [propput] HRESULT Child([in] Microsoft.UI.Xaml.UIElement* value);
                        [propget] HRESULT IsOpen([out] [retval] boolean* value);
                        [propput] HRESULT IsOpen([in] boolean value);
                        [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                        [propput] HRESULT HorizontalOffset([in] DOUBLE value);
                        [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                        [propput] HRESULT VerticalOffset([in] DOUBLE value);
                        [propget] HRESULT ChildTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                        [propput] HRESULT ChildTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                        [propget] HRESULT IsLightDismissEnabled([out] [retval] boolean* value);
                        [propput] HRESULT IsLightDismissEnabled([in] boolean value);
                        [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                        [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                        [propget] HRESULT ShouldConstrainToRootBounds([out] [retval] boolean* value);
                        [propput] HRESULT ShouldConstrainToRootBounds([in] boolean value);
                        [propget] HRESULT IsConstrainedToRootBounds([out] [retval] boolean* value);
                        [eventadd] HRESULT Opened([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                        [eventadd] HRESULT Closed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Popup)]
                    [uuid(C1ACFAA4-209A-5FB8-8934-8825976769B8)]
                    interface IPopupStatics : IInspectable
                    {
                        [propget] HRESULT ChildProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HorizontalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VerticalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ChildTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsLightDismissEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ShouldConstrainToRootBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings)]
                    [uuid(1FEAAC59-7D62-575D-92C6-D76900E13E70)]
                    interface IProgressBarTemplateSettings : IInspectable
                    {
                        [propget] HRESULT EllipseDiameter([out] [retval] DOUBLE* value);
                        [propget] HRESULT EllipseOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT EllipseAnimationWellPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT EllipseAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ContainerAnimationStartPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT ContainerAnimationEndPosition([out] [retval] DOUBLE* value);
                        [propget] HRESULT IndicatorLengthDelta([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings)]
                    [uuid(D44DFE3B-F1F3-5667-80FB-7C9410161F18)]
                    interface IProgressRingTemplateSettings : IInspectable
                    {
                        [propget] HRESULT EllipseDiameter([out] [retval] DOUBLE* value);
                        [propget] HRESULT EllipseOffset([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                        [propget] HRESULT MaxSideLength([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RangeBase)]
                    [uuid(540D6D61-8FAC-5D5C-B5B0-E172A7DDE103)]
                    interface IRangeBase : IInspectable
                    {
                        [propget] HRESULT Minimum([out] [retval] DOUBLE* value);
                        [propput] HRESULT Minimum([in] DOUBLE value);
                        [propget] HRESULT Maximum([out] [retval] DOUBLE* value);
                        [propput] HRESULT Maximum([in] DOUBLE value);
                        [propget] HRESULT SmallChange([out] [retval] DOUBLE* value);
                        [propput] HRESULT SmallChange([in] DOUBLE value);
                        [propget] HRESULT LargeChange([out] [retval] DOUBLE* value);
                        [propput] HRESULT LargeChange([in] DOUBLE value);
                        [propget] HRESULT Value([out] [retval] DOUBLE* value);
                        [propput] HRESULT Value([in] DOUBLE value);
                        [eventadd] HRESULT ValueChanged([in] Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ValueChanged([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RangeBase)]
                    [uuid(41C205E2-4422-5DCA-9B49-E31210EA396C)]
                    interface IRangeBaseFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.RangeBase** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RangeBase)]
                    [uuid(B3DEB76F-68A6-5C14-A824-AB58E8774745)]
                    interface IRangeBaseOverrides : IInspectable
                    {
                        HRESULT OnMinimumChanged([in] DOUBLE oldMinimum, [in] DOUBLE newMinimum);
                        HRESULT OnMaximumChanged([in] DOUBLE oldMaximum, [in] DOUBLE newMaximum);
                        HRESULT OnValueChanged([in] DOUBLE oldValue, [in] DOUBLE newValue);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RangeBase)]
                    [uuid(4AED5E49-64EC-56F1-874D-B8C0F83F9AC8)]
                    interface IRangeBaseStatics : IInspectable
                    {
                        [propget] HRESULT MinimumProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MaximumProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SmallChangeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT LargeChangeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs)]
                    [uuid(B0181692-9578-51C7-9D1C-ADFCF8945AA9)]
                    interface IRangeBaseValueChangedEventArgs : IInspectable
                    {
                        [propget] HRESULT OldValue([out] [retval] DOUBLE* value);
                        [propget] HRESULT NewValue([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatButton)]
                    [uuid(97F4C728-4A94-56B5-91E4-E7C6F6A1251A)]
                    interface IRepeatButton : IInspectable
                    {
                        [propget] HRESULT Delay([out] [retval] INT32* value);
                        [propput] HRESULT Delay([in] INT32 value);
                        [propget] HRESULT Interval([out] [retval] INT32* value);
                        [propput] HRESULT Interval([in] INT32 value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatButton)]
                    [uuid(B57320F6-A58A-589C-9F41-AAB02F51E829)]
                    interface IRepeatButtonStatics : IInspectable
                    {
                        [propget] HRESULT DelayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IntervalProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint)]
                    [uuid(5828FB51-8EBB-596D-A871-50063479362D)]
                    [version(0x00000001)]
                    interface IRepeatedScrollSnapPoint : IInspectable
                    {
                        [propget] HRESULT Offset([out] [retval] DOUBLE* value);
                        [propget] HRESULT Interval([out] [retval] DOUBLE* value);
                        [propget] HRESULT Start([out] [retval] DOUBLE* value);
                        [propget] HRESULT End([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint)]
                    [uuid(F2FD8403-679E-5C31-B431-72A0E0014E6A)]
                    [version(0x00000001)]
                    interface IRepeatedScrollSnapPointFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE offset, [in] DOUBLE interval, [in] DOUBLE start, [in] DOUBLE end, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment alignment, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint)]
                    [uuid(1FA6DBBE-5E11-5D32-873B-C92B1D171538)]
                    [version(0x00000001)]
                    interface IRepeatedZoomSnapPoint : IInspectable
                    {
                        [propget] HRESULT Offset([out] [retval] DOUBLE* value);
                        [propget] HRESULT Interval([out] [retval] DOUBLE* value);
                        [propget] HRESULT Start([out] [retval] DOUBLE* value);
                        [propget] HRESULT End([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint)]
                    [uuid(7D032A7C-D91C-5660-B1C2-B36E8810AC65)]
                    [version(0x00000001)]
                    interface IRepeatedZoomSnapPointFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE offset, [in] DOUBLE interval, [in] DOUBLE start, [in] DOUBLE end, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollBar)]
                    [uuid(568CBF41-F741-5F05-8E08-C0A50AC17C8C)]
                    interface IScrollBar : IInspectable
                    {
                        [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                        [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                        [propget] HRESULT ViewportSize([out] [retval] DOUBLE* value);
                        [propput] HRESULT ViewportSize([in] DOUBLE value);
                        [propget] HRESULT IndicatorMode([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode* value);
                        [propput] HRESULT IndicatorMode([in] Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode value);
                        [eventadd] HRESULT Scroll([in] Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Scroll([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollBar)]
                    [uuid(88B52E18-9528-579F-BD84-EBA585A01C7A)]
                    interface IScrollBarStatics : IInspectable
                    {
                        [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ViewportSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IndicatorModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [uuid(641B7AFB-3C4E-5D3D-815B-A45C8D68789F)]
                    [version(0x00000001)]
                    interface IScrollController : IInspectable
                    {
                        [propget] HRESULT AreInteractionsAllowed([out] [retval] boolean* value);
                        [propget] HRESULT AreScrollerInteractionsAllowed([out] [retval] boolean* value);
                        [propget] HRESULT IsInteracting([out] [retval] boolean* value);
                        [propget] HRESULT IsInteractionVisualRailEnabled([out] [retval] boolean* value);
                        [propget] HRESULT InteractionVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                        [propget] HRESULT InteractionVisualScrollOrientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                        HRESULT SetExpressionAnimationSources([in] Microsoft.UI.Composition.CompositionPropertySet* propertySet, [in] HSTRING minOffsetPropertyName, [in] HSTRING maxOffsetPropertyName, [in] HSTRING offsetPropertyName, [in] HSTRING multiplierPropertyName);
                        HRESULT SetScrollMode([in] Microsoft.UI.Xaml.Controls.ScrollMode scrollMode);
                        HRESULT SetValues([in] DOUBLE minOffset, [in] DOUBLE maxOffset, [in] DOUBLE offset, [in] DOUBLE viewport);
                        HRESULT GetScrollAnimation([in] Microsoft.UI.Xaml.Controls.ScrollInfo info, [in] Windows.Foundation.Numerics.Vector2 currentPosition, [in] Microsoft.UI.Composition.CompositionAnimation* defaultAnimation, [out] [retval] Microsoft.UI.Composition.CompositionAnimation** result);
                        HRESULT OnScrollCompleted([in] Microsoft.UI.Xaml.Controls.ScrollInfo info);
                        [eventadd] HRESULT ScrollToRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ScrollToRequested([in] EventRegistrationToken token);
                        [eventadd] HRESULT ScrollByRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ScrollByRequested([in] EventRegistrationToken token);
                        [eventadd] HRESULT ScrollFromRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollFromRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ScrollFromRequested([in] EventRegistrationToken token);
                        [eventadd] HRESULT InteractionRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT InteractionRequested([in] EventRegistrationToken token);
                        [eventadd] HRESULT InteractionInfoChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.IScrollController*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT InteractionInfoChanged([in] EventRegistrationToken token);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs)]
                    [uuid(9D39B918-9C63-5154-92FB-59CB928E8FAE)]
                    [version(0x00000001)]
                    interface IScrollControllerInteractionRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT PointerPoint([out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPoint** value);
                        [propget] HRESULT Handled([out] [retval] boolean* value);
                        [propput] HRESULT Handled([in] boolean value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs)]
                    [uuid(C74FE9BA-8660-59C9-889A-12E292032B89)]
                    [version(0x00000001)]
                    interface IScrollControllerInteractionRequestedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* pointerPoint, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs)]
                    [uuid(38CF8BD7-5BB2-575D-9C83-9B5E23D2363D)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollByRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT OffsetDelta([out] [retval] DOUBLE* value);
                        [propget] HRESULT Options([out] [retval] Microsoft.UI.Xaml.Controls.ScrollOptions** value);
                        [propget] HRESULT Info([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                        [propput] HRESULT Info([in] Microsoft.UI.Xaml.Controls.ScrollInfo value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs)]
                    [uuid(A690796D-B6C8-550E-B7BE-40C581684639)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollByRequestedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE offsetDelta, [in] Microsoft.UI.Xaml.Controls.ScrollOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollFromRequestedEventArgs)]
                    [uuid(CFB817EB-2A20-550B-97BC-BD15BADA69EC)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollFromRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT OffsetVelocity([out] [retval] FLOAT* value);
                        [propget] HRESULT InertiaDecayRate([out] [retval] Windows.Foundation.IReference<FLOAT>** value);
                        [propget] HRESULT Info([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                        [propput] HRESULT Info([in] Microsoft.UI.Xaml.Controls.ScrollInfo value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollFromRequestedEventArgs)]
                    [uuid(0C4F8B39-D458-51DA-B7B7-BE899D0D9835)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollFromRequestedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] FLOAT offsetVelocity, [in] Windows.Foundation.IReference<FLOAT>* inertiaDecayRate, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollFromRequestedEventArgs** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs)]
                    [uuid(4A87932C-A2E0-542E-87CE-ADBC284CDCF0)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollToRequestedEventArgs : IInspectable
                    {
                        [propget] HRESULT Offset([out] [retval] DOUBLE* value);
                        [propget] HRESULT Options([out] [retval] Microsoft.UI.Xaml.Controls.ScrollOptions** value);
                        [propget] HRESULT Info([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                        [propput] HRESULT Info([in] Microsoft.UI.Xaml.Controls.ScrollInfo value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs)]
                    [uuid(CA68119D-6ADE-5164-BB13-CC36F1AC652F)]
                    [version(0x00000001)]
                    interface IScrollControllerScrollToRequestedEventArgsFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE offset, [in] Microsoft.UI.Xaml.Controls.ScrollOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs)]
                    [uuid(DBD27F11-F937-5AD0-9F75-B962C33254CF)]
                    interface IScrollEventArgs : IInspectable
                    {
                        [propget] HRESULT NewValue([out] [retval] DOUBLE* value);
                        [propget] HRESULT ScrollEventType([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint)]
                    [uuid(73D918FF-D16C-52CD-9657-E392EE08868A)]
                    [version(0x00000001)]
                    interface IScrollSnapPoint : IInspectable
                    {
                        [propget] HRESULT Value([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase)]
                    [uuid(45D7319D-C9EB-5109-9668-FF3FC6CCDF11)]
                    [version(0x00000001)]
                    interface IScrollSnapPointBase : IInspectable
                    {
                        [propget] HRESULT Alignment([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase)]
                    [uuid(3FA2E552-1A45-5691-99DC-6400087CBB38)]
                    [version(0x00000001)]
                    interface IScrollSnapPointBaseFactory : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint)]
                    [uuid(39304BC7-0E54-5C06-8920-ADCF67E7C466)]
                    [version(0x00000001)]
                    interface IScrollSnapPointFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE snapPointValue, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment alignment, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(D3EA6E09-ECF7-51A8-BD54-FC84B9653766)]
                    interface IScrollSnapPointsInfo : IInspectable
                    {
                        [propget] HRESULT AreHorizontalSnapPointsRegular([out] [retval] boolean* value);
                        [propget] HRESULT AreVerticalSnapPointsRegular([out] [retval] boolean* value);
                        [eventadd] HRESULT HorizontalSnapPointsChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT HorizontalSnapPointsChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT VerticalSnapPointsChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT VerticalSnapPointsChanged([in] EventRegistrationToken token);
                        HRESULT GetIrregularSnapPoints([in] Microsoft.UI.Xaml.Controls.Orientation orientation, [in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, [out] [retval] Windows.Foundation.Collections.IVectorView<FLOAT>** result);
                        HRESULT GetRegularSnapPoints([in] Microsoft.UI.Xaml.Controls.Orientation orientation, [in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment alignment, [out] FLOAT* offset, [out] [retval] FLOAT* returnValue);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Scroller)]
                    [uuid(FC76B194-4EC5-5EA0-BE6A-64EC73BFA7CC)]
                    [version(0x00000001)]
                    interface IScroller : IInspectable
                    {
                        [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                        [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                        [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                        [propget] HRESULT ExpressionAnimationSources([out] [retval] Microsoft.UI.Composition.CompositionPropertySet** value);
                        [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT ZoomFactor([out] [retval] FLOAT* value);
                        [propget] HRESULT ExtentWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ExtentHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ViewportHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT ScrollableWidth([out] [retval] DOUBLE* value);
                        [propget] HRESULT ScrollableHeight([out] [retval] DOUBLE* value);
                        [propget] HRESULT ContentOrientation([out] [retval] Microsoft.UI.Xaml.Controls.ContentOrientation* value);
                        [propput] HRESULT ContentOrientation([in] Microsoft.UI.Xaml.Controls.ContentOrientation value);
                        [propget] HRESULT HorizontalScrollChainingMode([out] [retval] Microsoft.UI.Xaml.Controls.ChainingMode* value);
                        [propput] HRESULT HorizontalScrollChainingMode([in] Microsoft.UI.Xaml.Controls.ChainingMode value);
                        [propget] HRESULT VerticalScrollChainingMode([out] [retval] Microsoft.UI.Xaml.Controls.ChainingMode* value);
                        [propput] HRESULT VerticalScrollChainingMode([in] Microsoft.UI.Xaml.Controls.ChainingMode value);
                        [propget] HRESULT HorizontalScrollRailingMode([out] [retval] Microsoft.UI.Xaml.Controls.RailingMode* value);
                        [propput] HRESULT HorizontalScrollRailingMode([in] Microsoft.UI.Xaml.Controls.RailingMode value);
                        [propget] HRESULT VerticalScrollRailingMode([out] [retval] Microsoft.UI.Xaml.Controls.RailingMode* value);
                        [propput] HRESULT VerticalScrollRailingMode([in] Microsoft.UI.Xaml.Controls.RailingMode value);
                        [propget] HRESULT HorizontalScrollMode([out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* value);
                        [propput] HRESULT HorizontalScrollMode([in] Microsoft.UI.Xaml.Controls.ScrollMode value);
                        [propget] HRESULT VerticalScrollMode([out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* value);
                        [propput] HRESULT VerticalScrollMode([in] Microsoft.UI.Xaml.Controls.ScrollMode value);
                        [propget] HRESULT ZoomChainingMode([out] [retval] Microsoft.UI.Xaml.Controls.ChainingMode* value);
                        [propput] HRESULT ZoomChainingMode([in] Microsoft.UI.Xaml.Controls.ChainingMode value);
                        [propget] HRESULT ZoomMode([out] [retval] Microsoft.UI.Xaml.Controls.ZoomMode* value);
                        [propput] HRESULT ZoomMode([in] Microsoft.UI.Xaml.Controls.ZoomMode value);
                        [propget] HRESULT IgnoredInputKind([out] [retval] Microsoft.UI.Xaml.Controls.InputKind* value);
                        [propput] HRESULT IgnoredInputKind([in] Microsoft.UI.Xaml.Controls.InputKind value);
                        [propget] HRESULT MinZoomFactor([out] [retval] DOUBLE* value);
                        [propput] HRESULT MinZoomFactor([in] DOUBLE value);
                        [propget] HRESULT MaxZoomFactor([out] [retval] DOUBLE* value);
                        [propput] HRESULT MaxZoomFactor([in] DOUBLE value);
                        [propget] HRESULT State([out] [retval] Microsoft.UI.Xaml.Controls.InteractionState* value);
                        [propget] HRESULT HorizontalScrollController([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.IScrollController** value);
                        [propput] HRESULT HorizontalScrollController([in] Microsoft.UI.Xaml.Controls.Primitives.IScrollController* value);
                        [propget] HRESULT VerticalScrollController([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.IScrollController** value);
                        [propput] HRESULT VerticalScrollController([in] Microsoft.UI.Xaml.Controls.Primitives.IScrollController* value);
                        [propget] HRESULT HorizontalAnchorRatio([out] [retval] DOUBLE* value);
                        [propput] HRESULT HorizontalAnchorRatio([in] DOUBLE value);
                        [propget] HRESULT VerticalAnchorRatio([out] [retval] DOUBLE* value);
                        [propput] HRESULT VerticalAnchorRatio([in] DOUBLE value);
                        [propget] HRESULT HorizontalSnapPoints([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>** value);
                        [propget] HRESULT VerticalSnapPoints([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>** value);
                        [propget] HRESULT ZoomSnapPoints([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>** value);
                        [overload("ScrollTo")] HRESULT ScrollTo([in] DOUBLE horizontalOffset, [in] DOUBLE verticalOffset, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* result);
                        [overload("ScrollTo")] HRESULT ScrollToWithOptions([in] DOUBLE horizontalOffset, [in] DOUBLE verticalOffset, [in] Microsoft.UI.Xaml.Controls.ScrollOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* result);
                        [overload("ScrollBy")] HRESULT ScrollBy([in] DOUBLE horizontalOffsetDelta, [in] DOUBLE verticalOffsetDelta, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* result);
                        [overload("ScrollBy")] HRESULT ScrollByWithOptions([in] DOUBLE horizontalOffsetDelta, [in] DOUBLE verticalOffsetDelta, [in] Microsoft.UI.Xaml.Controls.ScrollOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* result);
                        HRESULT ScrollFrom([in] Windows.Foundation.Numerics.Vector2 offsetsVelocity, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* inertiaDecayRate, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* result);
                        [overload("ZoomTo")] HRESULT ZoomTo([in] FLOAT zoomFactor, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* centerPoint, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* result);
                        [overload("ZoomTo")] HRESULT ZoomToWithOptions([in] FLOAT zoomFactor, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* centerPoint, [in] Microsoft.UI.Xaml.Controls.ZoomOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* result);
                        [overload("ZoomBy")] HRESULT ZoomBy([in] FLOAT zoomFactorDelta, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* centerPoint, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* result);
                        [overload("ZoomBy")] HRESULT ZoomByWithOptions([in] FLOAT zoomFactorDelta, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* centerPoint, [in] Microsoft.UI.Xaml.Controls.ZoomOptions* options, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* result);
                        HRESULT ZoomFrom([in] FLOAT zoomFactorVelocity, [in] Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2>* centerPoint, [in] Windows.Foundation.IReference<FLOAT>* inertiaDecayRate, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* result);
                        [eventadd] HRESULT ExtentChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ExtentChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT StateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT StateChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT ViewChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ViewChanged([in] EventRegistrationToken token);
                        [eventadd] HRESULT ScrollAnimationStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollAnimationStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ScrollAnimationStarting([in] EventRegistrationToken token);
                        [eventadd] HRESULT ZoomAnimationStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ZoomAnimationStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ZoomAnimationStarting([in] EventRegistrationToken token);
                        [eventadd] HRESULT ScrollCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ScrollCompleted([in] EventRegistrationToken token);
                        [eventadd] HRESULT ZoomCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ZoomCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ZoomCompleted([in] EventRegistrationToken token);
                        [eventadd] HRESULT BringingIntoView([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollerBringingIntoViewEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT BringingIntoView([in] EventRegistrationToken token);
                        [eventadd] HRESULT AnchorRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollerAnchorRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT AnchorRequested([in] EventRegistrationToken token);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Scroller)]
                    [uuid(6094F4DD-F93D-5636-B4B5-E938C0CB068E)]
                    [version(0x00000001)]
                    interface IScrollerFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.Scroller** value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Scroller)]
                    [uuid(75A0D811-DF8D-5606-A3FC-7131848CFC38)]
                    [version(0x00000001)]
                    interface IScrollerStatics : IInspectable
                    {
                        [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ContentOrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HorizontalScrollChainingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VerticalScrollChainingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HorizontalScrollRailingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VerticalScrollRailingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HorizontalScrollModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VerticalScrollModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZoomChainingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT ZoomModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IgnoredInputKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MinZoomFactorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT MaxZoomFactorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT HorizontalAnchorRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT VerticalAnchorRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Selector)]
                    [uuid(8F7E2159-E61D-576F-8476-F83FDE3D689E)]
                    interface ISelector : IInspectable
                    {
                        [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                        [propput] HRESULT SelectedIndex([in] INT32 value);
                        [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                        [propput] HRESULT SelectedItem([in] IInspectable* value);
                        [propget] HRESULT SelectedValue([out] [retval] IInspectable** value);
                        [propput] HRESULT SelectedValue([in] IInspectable* value);
                        [propget] HRESULT SelectedValuePath([out] [retval] HSTRING* value);
                        [propput] HRESULT SelectedValuePath([in] HSTRING value);
                        [propget] HRESULT IsSynchronizedWithCurrentItem([out] [retval] Windows.Foundation.IReference<boolean>** value);
                        [propput] HRESULT IsSynchronizedWithCurrentItem([in] Windows.Foundation.IReference<boolean>* value);
                        [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Selector)]
                    [uuid(21A42024-AF07-58F9-8789-848D3324D901)]
                    interface ISelectorFactory : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SelectorItem)]
                    [uuid(5772C4DE-60EA-5492-8C5E-B3323D5A3CA6)]
                    interface ISelectorItem : IInspectable
                    {
                        [propget] HRESULT IsSelected([out] [retval] boolean* value);
                        [propput] HRESULT IsSelected([in] boolean value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SelectorItem)]
                    [uuid(078039F5-76ED-5299-9715-FC8C58173560)]
                    interface ISelectorItemFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SelectorItem** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SelectorItem)]
                    [uuid(4B201A54-A414-5E79-9B6B-3DA9DE442A35)]
                    interface ISelectorItemStatics : IInspectable
                    {
                        [propget] HRESULT IsSelectedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Selector)]
                    [uuid(569B2234-1CEB-516E-B64E-0D479452E279)]
                    interface ISelectorStatics : IInspectable
                    {
                        [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT SelectedValuePathProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsSynchronizedWithCurrentItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        HRESULT GetIsSelectionActive([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase)]
                    [uuid(14ED1089-FB97-5211-8C45-C352CD8B96A1)]
                    [version(0x00000001)]
                    interface ISnapPointBase : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase)]
                    [uuid(50266508-15F8-530A-A213-E976E04E670B)]
                    [version(0x00000001)]
                    interface ISnapPointBaseFactory : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings)]
                    [uuid(44D6F6F7-0058-5EAC-8837-F7F16D961F7C)]
                    interface ISplitViewTemplateSettings : IInspectable
                    {
                        [propget] HRESULT OpenPaneLength([out] [retval] DOUBLE* value);
                        [propget] HRESULT NegativeOpenPaneLength([out] [retval] DOUBLE* value);
                        [propget] HRESULT OpenPaneLengthMinusCompactLength([out] [retval] DOUBLE* value);
                        [propget] HRESULT NegativeOpenPaneLengthMinusCompactLength([out] [retval] DOUBLE* value);
                        [propget] HRESULT OpenPaneGridLength([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                        [propget] HRESULT CompactPaneGridLength([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.TabViewListView)]
                    [uuid(EC48EFB5-2CB3-562B-921C-E554923CE1D5)]
                    [version(0x00000001)]
                    interface ITabViewListView : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.TabViewListView)]
                    [uuid(8A084FDD-86F0-51EE-98DF-5FBD0B5669BE)]
                    [version(0x00000001)]
                    interface ITabViewListViewFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.TabViewListView** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Thumb)]
                    [uuid(9B540AE4-98ED-5A19-9512-A56878C52FEE)]
                    interface IThumb : IInspectable
                    {
                        [propget] HRESULT IsDragging([out] [retval] boolean* value);
                        [eventadd] HRESULT DragStarted([in] Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT DragStarted([in] EventRegistrationToken token);
                        [eventadd] HRESULT DragDelta([in] Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT DragDelta([in] EventRegistrationToken token);
                        [eventadd] HRESULT DragCompleted([in] Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT DragCompleted([in] EventRegistrationToken token);
                        HRESULT CancelDrag();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.Thumb)]
                    [uuid(900C4924-886A-5F24-96D1-1EC3A36E8D66)]
                    interface IThumbStatics : IInspectable
                    {
                        [propget] HRESULT IsDraggingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.TickBar)]
                    [uuid(573293BD-3F6A-56C3-BF95-6254C9BBBC89)]
                    interface ITickBar : IInspectable
                    {
                        [propget] HRESULT Fill([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                        [propput] HRESULT Fill([in] Microsoft.UI.Xaml.Media.Brush* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.TickBar)]
                    [uuid(41C210CF-7060-5B7B-83AB-A302AA6EED6B)]
                    interface ITickBarStatics : IInspectable
                    {
                        [propget] HRESULT FillProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)]
                    [uuid(686FBAA4-C866-568B-8F75-481D8D545291)]
                    interface IToggleButton : IInspectable
                    {
                        [propget] HRESULT IsChecked([out] [retval] Windows.Foundation.IReference<boolean>** value);
                        [propput] HRESULT IsChecked([in] Windows.Foundation.IReference<boolean>* value);
                        [propget] HRESULT IsThreeState([out] [retval] boolean* value);
                        [propput] HRESULT IsThreeState([in] boolean value);
                        [eventadd] HRESULT Checked([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Checked([in] EventRegistrationToken token);
                        [eventadd] HRESULT Unchecked([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Unchecked([in] EventRegistrationToken token);
                        [eventadd] HRESULT Indeterminate([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Indeterminate([in] EventRegistrationToken token);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)]
                    [uuid(519511BB-D35B-5E2D-966C-8369405A4408)]
                    interface IToggleButtonFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ToggleButton** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)]
                    [uuid(EE55F85D-9061-5D18-B31A-90BC5625CFE9)]
                    interface IToggleButtonOverrides : IInspectable
                    {
                        HRESULT OnToggle();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)]
                    [uuid(4B8397E3-76FD-59DF-824F-40AE339FB00B)]
                    interface IToggleButtonStatics : IInspectable
                    {
                        [propget] HRESULT IsCheckedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsThreeStateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings)]
                    [uuid(8F9640A3-AA4E-52DA-A2C6-9167C800BABA)]
                    interface IToggleSwitchTemplateSettings : IInspectable
                    {
                        [propget] HRESULT KnobCurrentToOnOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT KnobCurrentToOffOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT KnobOnToOffOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT KnobOffToOnOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT CurtainCurrentToOnOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT CurtainCurrentToOffOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT CurtainOnToOffOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT CurtainOffToOnOffset([out] [retval] DOUBLE* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings)]
                    [uuid(4F725950-FF64-5CF1-9E86-9011FB10E88E)]
                    interface IToolTipTemplateSettings : IInspectable
                    {
                        [propget] HRESULT FromHorizontalOffset([out] [retval] DOUBLE* value);
                        [propget] HRESULT FromVerticalOffset([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint)]
                    [uuid(8101D353-8DB3-5AC6-A7F8-B18EB9C123AC)]
                    [version(0x00000001)]
                    interface IZoomSnapPoint : IInspectable
                    {
                        [propget] HRESULT Value([out] [retval] DOUBLE* value);
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase)]
                    [uuid(C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7)]
                    [version(0x00000001)]
                    interface IZoomSnapPointBase : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase)]
                    [uuid(2C689EEA-B6CF-5024-847B-589355D5A2FA)]
                    [version(0x00000001)]
                    interface IZoomSnapPointBaseFactory : IInspectable
                    {
                    }

                    [exclusiveto(Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint)]
                    [uuid(0B3B5418-BFF6-5A9E-B734-B68ADF49F775)]
                    [version(0x00000001)]
                    interface IZoomSnapPointFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] DOUBLE snapPointValue, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass AppBarButtonTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass AppBarTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass AppBarToggleButtonTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettings;
                    }

                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass AutoSuggestBoxHelper
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelper;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass ButtonBase : Microsoft.UI.Xaml.Controls.ContentControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IButtonBase;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass CalendarPanel : Microsoft.UI.Xaml.Controls.Panel
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanel;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass CalendarViewTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass CarouselPanel : Microsoft.UI.Xaml.Controls.VirtualizingPanel
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanel;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ColorPickerSlider : Microsoft.UI.Xaml.Controls.Slider
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ColorSpectrum : Microsoft.UI.Xaml.Controls.Control
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ColumnMajorUniformToLargestGridLayout : Microsoft.UI.Xaml.Controls.NonVirtualizingLayout
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayout;
                    }

                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ComboBoxHelper
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelper;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ComboBoxTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass CommandBarFlyoutCommandBar : Microsoft.UI.Xaml.Controls.CommandBar
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar;
                    }

                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass CommandBarFlyoutCommandBarTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass CommandBarTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings;
                    }

                    [activatable(0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass CornerRadiusFilterConverter : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverter;
                        interface Microsoft.UI.Xaml.Data.IValueConverter;
                    }

                    [activatable(0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass CornerRadiusToThicknessConverter : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverter;
                        interface Microsoft.UI.Xaml.Data.IValueConverter;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass DragCompletedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass DragDeltaEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass DragStartedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgs;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass FlyoutBase : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase;
                        [overridable] interface Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    runtimeclass FlyoutBaseClosingEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgs;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass FlyoutShowOptions
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptions;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IGeneratorPositionHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass GeneratorPositionHelper
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IGeneratorPositionHelper;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass GridViewItemPresenter : Microsoft.UI.Xaml.Controls.ContentPresenter
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenter;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass GridViewItemTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    runtimeclass ItemsChangedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass JumpListItemBackgroundConverter : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Data.IValueConverter;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass JumpListItemForegroundConverter : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Data.IValueConverter;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass LayoutInformation
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformation;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass ListViewItemPresenter : Microsoft.UI.Xaml.Controls.ContentPresenter
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenter;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ListViewItemTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass LoopingSelector : Microsoft.UI.Xaml.Controls.Control
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelector;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass LoopingSelectorItem : Microsoft.UI.Xaml.Controls.ContentControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItem;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass LoopingSelectorPanel : Microsoft.UI.Xaml.Controls.Canvas
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MenuFlyoutItemTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass MenuFlyoutPresenterTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass NavigationViewItemPresenter : Microsoft.UI.Xaml.Controls.ContentControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass OrientedVirtualizingPanel : Microsoft.UI.Xaml.Controls.VirtualizingPanel
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInsertionPanel;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass PickerFlyoutBase : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBase;
                        [overridable] interface Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass PivotHeaderItem : Microsoft.UI.Xaml.Controls.ContentControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItem;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass PivotHeaderPanel : Microsoft.UI.Xaml.Controls.Canvas
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanel;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass PivotPanel : Microsoft.UI.Xaml.Controls.Panel
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IPivotPanel;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass Popup : Microsoft.UI.Xaml.FrameworkElement
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IPopup;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ProgressBarTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IProgressBarTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ProgressRingTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IProgressRingTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass RangeBase : Microsoft.UI.Xaml.Controls.Control
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IRangeBase;
                        [overridable] interface Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass RangeBaseValueChangedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass RepeatButton : Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IRepeatButton;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass RepeatedScrollSnapPoint : Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPoint;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass RepeatedZoomSnapPoint : Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPoint;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass ScrollBar : Microsoft.UI.Xaml.Controls.Primitives.RangeBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollBar;
                    }

                    [activatable(Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerInteractionRequestedEventArgsFactory, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollControllerInteractionRequestedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerInteractionRequestedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactory, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollControllerScrollByRequestedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollFromRequestedEventArgsFactory, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollControllerScrollFromRequestedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollFromRequestedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactory, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollControllerScrollToRequestedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ScrollEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgs;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollSnapPoint : Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPoint;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ScrollSnapPointBase : Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBase;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IScrollerFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IScrollerStatics, 0x00000001)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass Scroller : Microsoft.UI.Xaml.FrameworkElement
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IScroller;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ISelectorStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass Selector : Microsoft.UI.Xaml.Controls.ItemsControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ISelector;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass SelectorItem : Microsoft.UI.Xaml.Controls.ContentControl
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ISelectorItem;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass SnapPointBase : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBase;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass SplitViewTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass TabViewListView : Microsoft.UI.Xaml.Controls.ListView
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ITabViewListView;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IThumbStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass Thumb : Microsoft.UI.Xaml.Controls.Control
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IThumb;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.ITickBarStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass TickBar : Microsoft.UI.Xaml.FrameworkElement
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.ITickBar;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass ToggleButton : Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IToggleButton;
                        [overridable] interface Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverrides;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ToggleSwitchTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettings;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass ToolTipTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettings;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ZoomSnapPoint : Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPoint;
                    }

                    [composable(Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactory, public, 0x00000001)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    [version(0x00000001)]
                    runtimeclass ZoomSnapPointBase : Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase
                    {
                        [default] interface Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBase;
                    }
                }
            }
        }
    }
}
