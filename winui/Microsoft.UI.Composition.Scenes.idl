//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.Graphics.DirectX.idl";
import "Microsoft.UI.Composition.idl";
import "Windows.Foundation.Numerics.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedContract;
    }
}
namespace Microsoft
{
    namespace Graphics
    {
        namespace DirectX
        {
            typedef enum DirectXPixelFormat DirectXPixelFormat;

            typedef enum DirectXPrimitiveTopology DirectXPrimitiveTopology;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            typedef enum CompositionBitmapInterpolationMode CompositionBitmapInterpolationMode;

            runtimeclass Compositor;

            interface ICompositionSurface;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass MemoryBuffer;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Quaternion Quaternion;

            typedef struct Vector3 Vector3;

            typedef struct Vector4 Vector4;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Scenes
            {
                typedef enum SceneAlphaMode SceneAlphaMode;

                typedef enum SceneAttributeSemantic SceneAttributeSemantic;

                typedef enum SceneComponentType SceneComponentType;

                typedef enum SceneWrappingMode SceneWrappingMode;

                interface ISceneBoundingBox;

                interface ISceneComponent;

                interface ISceneComponentCollection;

                interface ISceneComponentFactory;

                interface ISceneMaterial;

                interface ISceneMaterialFactory;

                interface ISceneMaterialInput;

                interface ISceneMaterialInputFactory;

                interface ISceneMesh;

                interface ISceneMeshMaterialAttributeMap;

                interface ISceneMeshRendererComponent;

                interface ISceneMeshRendererComponentStatics;

                interface ISceneMeshStatics;

                interface ISceneMetallicRoughnessMaterial;

                interface ISceneMetallicRoughnessMaterialStatics;

                interface ISceneModelTransform;

                interface ISceneNode;

                interface ISceneNodeCollection;

                interface ISceneNodeStatics;

                interface ISceneObject;

                interface ISceneObjectFactory;

                interface IScenePbrMaterial;

                interface IScenePbrMaterialFactory;

                interface ISceneRendererComponent;

                interface ISceneRendererComponentFactory;

                interface ISceneSurfaceMaterialInput;

                interface ISceneSurfaceMaterialInputStatics;

                interface ISceneVisual;

                interface ISceneVisualStatics;

                runtimeclass SceneBoundingBox;

                runtimeclass SceneComponent;

                runtimeclass SceneComponentCollection;

                runtimeclass SceneMaterial;

                runtimeclass SceneMaterialInput;

                runtimeclass SceneMesh;

                runtimeclass SceneMeshMaterialAttributeMap;

                runtimeclass SceneMeshRendererComponent;

                runtimeclass SceneMetallicRoughnessMaterial;

                runtimeclass SceneModelTransform;

                runtimeclass SceneNode;

                runtimeclass SceneNodeCollection;

                runtimeclass SceneObject;

                runtimeclass ScenePbrMaterial;

                runtimeclass SceneRendererComponent;

                runtimeclass SceneSurfaceMaterialInput;

                runtimeclass SceneVisual;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Scenes
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Scenes.SceneComponent*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Scenes.SceneNode*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.Scenes.SceneComponent*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.Scenes.SceneNode*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>*>;

                    interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>;

                    interface Windows.Foundation.Collections.IMapView<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>;

                    interface Windows.Foundation.Collections.IMap<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.Scenes.SceneComponent*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.Scenes.SceneNode*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Composition.Scenes.SceneComponent*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Composition.Scenes.SceneNode*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Scenes
            {
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                enum SceneAlphaMode
                {
                    Opaque    = 0,
                    AlphaTest = 1,
                    Blend     = 2
                };

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                enum SceneAttributeSemantic
                {
                    Index     = 0,
                    Vertex    = 1,
                    Normal    = 2,
                    TexCoord0 = 3,
                    TexCoord1 = 4,
                    Color     = 5,
                    Tangent   = 6
                };

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                enum SceneComponentType
                {
                    MeshRendererComponent = 0
                };

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                enum SceneWrappingMode
                {
                    ClampToEdge    = 0,
                    MirroredRepeat = 1,
                    Repeat         = 2
                };

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneBoundingBox)]
                [uuid(39FB48E0-216A-5608-9186-6BA9F98B5C67)]
                interface ISceneBoundingBox : IInspectable
                {
                    [propget] HRESULT Center([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT Extents([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT Max([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT Min([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propget] HRESULT Size([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneComponent)]
                [uuid(F73361CB-8027-50E2-98EE-B2E3EA050A54)]
                interface ISceneComponent : IInspectable
                {
                    [propget] HRESULT ComponentType([out] [retval] Microsoft.UI.Composition.Scenes.SceneComponentType* value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneComponentCollection)]
                [uuid(E4B21C71-87E2-5AEB-85BE-884E8302273E)]
                interface ISceneComponentCollection : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneComponent)]
                [uuid(254088B0-BABF-503D-9A66-0D86AF5F7303)]
                interface ISceneComponentFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMaterial)]
                [uuid(042142A7-BF6B-57AD-BADC-F581F38EDB48)]
                interface ISceneMaterial : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMaterial)]
                [uuid(25747893-8748-5F60-969F-318FA0B735CA)]
                interface ISceneMaterialFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMaterialInput)]
                [uuid(446BDADE-719B-5DB4-B699-F226D0062A2E)]
                interface ISceneMaterialInput : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMaterialInput)]
                [uuid(B4DABD1D-58C0-5710-928A-BC49B0735694)]
                interface ISceneMaterialInputFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMesh)]
                [uuid(5CF846AA-F53F-555E-A3AD-F5BC52CA32FB)]
                interface ISceneMesh : IInspectable
                {
                    [propget] HRESULT Bounds([out] [retval] Microsoft.UI.Composition.Scenes.SceneBoundingBox** value);
                    [propget] HRESULT PrimitiveTopology([out] [retval] Microsoft.Graphics.DirectX.DirectXPrimitiveTopology* value);
                    [propput] HRESULT PrimitiveTopology([in] Microsoft.Graphics.DirectX.DirectXPrimitiveTopology value);
                    HRESULT FillMeshAttribute([in] Microsoft.UI.Composition.Scenes.SceneAttributeSemantic semantic, [in] Microsoft.Graphics.DirectX.DirectXPixelFormat format, [in] Windows.Foundation.MemoryBuffer* memory);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap)]
                [uuid(2360C457-EDAE-5660-BEDC-89096582ED70)]
                interface ISceneMeshMaterialAttributeMap : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent)]
                [uuid(D2BE85A0-70A8-5C62-84D8-8BA55E4C64A9)]
                interface ISceneMeshRendererComponent : IInspectable
                {
                    [propget] HRESULT Material([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterial** value);
                    [propput] HRESULT Material([in] Microsoft.UI.Composition.Scenes.SceneMaterial* value);
                    [propget] HRESULT Mesh([out] [retval] Microsoft.UI.Composition.Scenes.SceneMesh** value);
                    [propput] HRESULT Mesh([in] Microsoft.UI.Composition.Scenes.SceneMesh* value);
                    [propget] HRESULT UVMappings([out] [retval] Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap** value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent)]
                [uuid(C54F8C5A-A104-5CFA-89DC-13EDAA6E3D88)]
                interface ISceneMeshRendererComponentStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMesh)]
                [uuid(29C52125-964B-5315-80F9-3893713290F5)]
                interface ISceneMeshStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneMesh** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial)]
                [uuid(0A4AFCF4-7BAE-5702-9B85-8BC849F39987)]
                interface ISceneMetallicRoughnessMaterial : IInspectable
                {
                    [propget] HRESULT BaseColorInput([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterialInput** value);
                    [propput] HRESULT BaseColorInput([in] Microsoft.UI.Composition.Scenes.SceneMaterialInput* value);
                    [propget] HRESULT BaseColorFactor([out] [retval] Windows.Foundation.Numerics.Vector4* value);
                    [propput] HRESULT BaseColorFactor([in] Windows.Foundation.Numerics.Vector4 value);
                    [propget] HRESULT MetallicFactor([out] [retval] FLOAT* value);
                    [propput] HRESULT MetallicFactor([in] FLOAT value);
                    [propget] HRESULT MetallicRoughnessInput([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterialInput** value);
                    [propput] HRESULT MetallicRoughnessInput([in] Microsoft.UI.Composition.Scenes.SceneMaterialInput* value);
                    [propget] HRESULT RoughnessFactor([out] [retval] FLOAT* value);
                    [propput] HRESULT RoughnessFactor([in] FLOAT value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial)]
                [uuid(DFFD2043-AB3C-57A0-8E13-6F09725E970F)]
                interface ISceneMetallicRoughnessMaterialStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneModelTransform)]
                [uuid(3F05555F-0F67-576E-9D8A-93C1F250C29F)]
                interface ISceneModelTransform : IInspectable
                {
                    [propget] HRESULT Orientation([out] [retval] Windows.Foundation.Numerics.Quaternion* value);
                    [propput] HRESULT Orientation([in] Windows.Foundation.Numerics.Quaternion value);
                    [propget] HRESULT RotationAngle([out] [retval] FLOAT* value);
                    [propput] HRESULT RotationAngle([in] FLOAT value);
                    [propget] HRESULT RotationAngleInDegrees([out] [retval] FLOAT* value);
                    [propput] HRESULT RotationAngleInDegrees([in] FLOAT value);
                    [propget] HRESULT RotationAxis([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT RotationAxis([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT Scale([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT Scale([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT Translation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT Translation([in] Windows.Foundation.Numerics.Vector3 value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneNode)]
                [uuid(A1BCE140-79C2-59E6-9B68-63B1BAB0E2A6)]
                interface ISceneNode : IInspectable
                {
                    [propget] HRESULT Children([out] [retval] Microsoft.UI.Composition.Scenes.SceneNodeCollection** value);
                    [propget] HRESULT Components([out] [retval] Microsoft.UI.Composition.Scenes.SceneComponentCollection** value);
                    [propget] HRESULT Parent([out] [retval] Microsoft.UI.Composition.Scenes.SceneNode** value);
                    [propget] HRESULT Transform([out] [retval] Microsoft.UI.Composition.Scenes.SceneModelTransform** value);
                    HRESULT FindFirstComponentOfType([in] Microsoft.UI.Composition.Scenes.SceneComponentType value, [out] [retval] Microsoft.UI.Composition.Scenes.SceneComponent** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneNodeCollection)]
                [uuid(F219B68E-5666-5C6C-AA4E-08DB07FD6BCF)]
                interface ISceneNodeCollection : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneNode)]
                [uuid(801C4394-4198-5DA1-AC39-6E8A44B5CE57)]
                interface ISceneNodeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneNode** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneObject)]
                [uuid(4333E514-4FC7-521E-8BCA-11C51FBCAF1E)]
                interface ISceneObject : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneObject)]
                [uuid(EE797F7D-77DB-5C4C-B6F5-C1930FAD85C5)]
                interface ISceneObjectFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.ScenePbrMaterial)]
                [uuid(295D0725-56FE-5954-8057-3F4CA7515B36)]
                interface IScenePbrMaterial : IInspectable
                {
                    [propget] HRESULT AlphaCutoff([out] [retval] FLOAT* value);
                    [propput] HRESULT AlphaCutoff([in] FLOAT value);
                    [propget] HRESULT AlphaMode([out] [retval] Microsoft.UI.Composition.Scenes.SceneAlphaMode* value);
                    [propput] HRESULT AlphaMode([in] Microsoft.UI.Composition.Scenes.SceneAlphaMode value);
                    [propget] HRESULT EmissiveInput([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterialInput** value);
                    [propput] HRESULT EmissiveInput([in] Microsoft.UI.Composition.Scenes.SceneMaterialInput* value);
                    [propget] HRESULT EmissiveFactor([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                    [propput] HRESULT EmissiveFactor([in] Windows.Foundation.Numerics.Vector3 value);
                    [propget] HRESULT IsDoubleSided([out] [retval] boolean* value);
                    [propput] HRESULT IsDoubleSided([in] boolean value);
                    [propget] HRESULT NormalInput([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterialInput** value);
                    [propput] HRESULT NormalInput([in] Microsoft.UI.Composition.Scenes.SceneMaterialInput* value);
                    [propget] HRESULT NormalScale([out] [retval] FLOAT* value);
                    [propput] HRESULT NormalScale([in] FLOAT value);
                    [propget] HRESULT OcclusionInput([out] [retval] Microsoft.UI.Composition.Scenes.SceneMaterialInput** value);
                    [propput] HRESULT OcclusionInput([in] Microsoft.UI.Composition.Scenes.SceneMaterialInput* value);
                    [propget] HRESULT OcclusionStrength([out] [retval] FLOAT* value);
                    [propput] HRESULT OcclusionStrength([in] FLOAT value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.ScenePbrMaterial)]
                [uuid(9E34D32A-E30C-51F5-84AC-6467950605CA)]
                interface IScenePbrMaterialFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneRendererComponent)]
                [uuid(6BAB8030-89C1-5DBC-A48E-1805DDF9CDD1)]
                interface ISceneRendererComponent : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneRendererComponent)]
                [uuid(3CCAC1D6-6A0F-582E-BB1A-10EBC1E405CA)]
                interface ISceneRendererComponentFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput)]
                [uuid(B9854B4F-286C-50CD-A734-491A251D5FD3)]
                interface ISceneSurfaceMaterialInput : IInspectable
                {
                    [propget] HRESULT BitmapInterpolationMode([out] [retval] Microsoft.UI.Composition.CompositionBitmapInterpolationMode* value);
                    [propput] HRESULT BitmapInterpolationMode([in] Microsoft.UI.Composition.CompositionBitmapInterpolationMode value);
                    [propget] HRESULT Surface([out] [retval] Microsoft.UI.Composition.ICompositionSurface** value);
                    [propput] HRESULT Surface([in] Microsoft.UI.Composition.ICompositionSurface* value);
                    [propget] HRESULT WrappingUMode([out] [retval] Microsoft.UI.Composition.Scenes.SceneWrappingMode* value);
                    [propput] HRESULT WrappingUMode([in] Microsoft.UI.Composition.Scenes.SceneWrappingMode value);
                    [propget] HRESULT WrappingVMode([out] [retval] Microsoft.UI.Composition.Scenes.SceneWrappingMode* value);
                    [propput] HRESULT WrappingVMode([in] Microsoft.UI.Composition.Scenes.SceneWrappingMode value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput)]
                [uuid(8E1BA937-AD60-51BC-8256-CA62C4B2AE92)]
                interface ISceneSurfaceMaterialInputStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneVisual)]
                [uuid(0144D7AD-6A7D-59CB-A0F9-74A04E85352C)]
                interface ISceneVisual : IInspectable
                {
                    [propget] HRESULT Root([out] [retval] Microsoft.UI.Composition.Scenes.SceneNode** value);
                    [propput] HRESULT Root([in] Microsoft.UI.Composition.Scenes.SceneNode* value);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [exclusiveto(Microsoft.UI.Composition.Scenes.SceneVisual)]
                [uuid(7B8DA6D1-5BD8-5095-9264-E5572653EA07)]
                interface ISceneVisualStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Composition.Scenes.SceneVisual** result);
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneBoundingBox : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneBoundingBox;
                }

                [composable(Microsoft.UI.Composition.Scenes.ISceneComponentFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneComponent : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneComponent;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneComponentCollection : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    interface Microsoft.UI.Composition.Scenes.ISceneComponentCollection;
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Composition.Scenes.SceneComponent*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Scenes.SceneComponent*>;
                }

                [composable(Microsoft.UI.Composition.Scenes.ISceneMaterialFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneMaterial : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMaterial;
                }

                [composable(Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneMaterialInput : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMaterialInput;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneMeshStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneMesh : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMesh;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneMeshMaterialAttributeMap : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap;
                    interface Windows.Foundation.Collections.IMap<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>*>;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneMeshRendererComponent : Microsoft.UI.Composition.Scenes.SceneRendererComponent
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneMetallicRoughnessMaterial : Microsoft.UI.Composition.Scenes.ScenePbrMaterial
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneModelTransform : Microsoft.UI.Composition.CompositionTransform
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneModelTransform;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneNodeStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneNode : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneNode;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneNodeCollection : Microsoft.UI.Composition.Scenes.SceneObject
                {
                    interface Microsoft.UI.Composition.Scenes.ISceneNodeCollection;
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Composition.Scenes.SceneNode*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Scenes.SceneNode*>;
                }

                [composable(Microsoft.UI.Composition.Scenes.ISceneObjectFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneObject : Microsoft.UI.Composition.CompositionObject
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneObject;
                }

                [composable(Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ScenePbrMaterial : Microsoft.UI.Composition.Scenes.SceneMaterial
                {
                    [default] interface Microsoft.UI.Composition.Scenes.IScenePbrMaterial;
                }

                [composable(Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactory, public, Microsoft.Foundation.LiftedContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SceneRendererComponent : Microsoft.UI.Composition.Scenes.SceneComponent
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneRendererComponent;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneSurfaceMaterialInput : Microsoft.UI.Composition.Scenes.SceneMaterialInput
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput;
                }

                [contract(Microsoft.Foundation.LiftedContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Composition.Scenes.ISceneVisualStatics, Microsoft.Foundation.LiftedContract, 1.0)]
                [threading(both)]
                runtimeclass SceneVisual : Microsoft.UI.Composition.ContainerVisual
                {
                    [default] interface Microsoft.UI.Composition.Scenes.ISceneVisual;
                }
            }
        }
    }
}
