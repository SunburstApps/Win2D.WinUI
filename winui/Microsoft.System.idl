//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedContract;
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Deferral;

        interface IAsyncAction;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Microsoft
{
    namespace System
    {
        typedef enum DispatcherQueuePriority DispatcherQueuePriority;

        delegate DispatcherQueueHandler;

        interface IDispatcherQueue;

        interface IDispatcherQueue2;

        interface IDispatcherQueueController;

        interface IDispatcherQueueControllerStatics;

        interface IDispatcherQueueControllerStatics2;

        interface IDispatcherQueueShutdownStartingEventArgs;

        interface IDispatcherQueueStatics;

        interface IDispatcherQueueTimer;

        runtimeclass DispatcherQueue;

        runtimeclass DispatcherQueueController;

        runtimeclass DispatcherQueueShutdownStartingEventArgs;

        runtimeclass DispatcherQueueTimer;
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace System
    {
        declare
        {
            interface Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueue*, IInspectable*>;

            interface Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueue*, Microsoft.System.DispatcherQueueShutdownStartingEventArgs*>;

            interface Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueueTimer*, IInspectable*>;
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace System
    {
        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        enum DispatcherQueuePriority
        {
            Low_d = -10
        };

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [uuid(12C37105-AC93-5BEB-98FF-0D010DB18E21)]
        delegate
            HRESULT DispatcherQueueHandler();

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueue)]
        [uuid(02FE405F-96CF-5B1C-8413-3AC2C2D7C264)]
        interface IDispatcherQueue : IInspectable
        {
            HRESULT CreateTimer([out] [retval] Microsoft.System.DispatcherQueueTimer** result);
            [overload("TryEnqueue")] HRESULT TryEnqueue([in] Microsoft.System.DispatcherQueueHandler* callback, [out] [retval] boolean* result);
            [overload("TryEnqueue")] HRESULT TryEnqueueWithPriority([in] Microsoft.System.DispatcherQueuePriority priority, [in] Microsoft.System.DispatcherQueueHandler* callback, [out] [retval] boolean* result);
            [eventadd] HRESULT ShutdownStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueue*, Microsoft.System.DispatcherQueueShutdownStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT ShutdownStarting([in] EventRegistrationToken token);
            [eventadd] HRESULT ShutdownCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueue*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT ShutdownCompleted([in] EventRegistrationToken token);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueue)]
        [uuid(628F432E-6697-5026-8432-185BF55F1524)]
        interface IDispatcherQueue2 : IInspectable
        {
            [propget] HRESULT HasThreadAccess([out] [retval] boolean* value);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueueController)]
        [uuid(CD77F174-B93B-5B26-BA6C-2E5D6EE81C5C)]
        interface IDispatcherQueueController : IInspectable
        {
            [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
            HRESULT ShutdownQueueAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueueController)]
        [uuid(1776A6FD-CB56-5553-9381-E3E0F0DDB647)]
        interface IDispatcherQueueControllerStatics : IInspectable
        {
            HRESULT CreateOnDedicatedThread([out] [retval] Microsoft.System.DispatcherQueueController** result);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueueController)]
        [uuid(300E83C1-380B-537D-B1AA-281E690ED688)]
        interface IDispatcherQueueControllerStatics2 : IInspectable
        {
            HRESULT CreateOnCurrentThread([out] [retval] Microsoft.System.DispatcherQueueController** result);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueueShutdownStartingEventArgs)]
        [uuid(B0A4EA8B-AD6C-5DEF-8546-1541E5112E94)]
        interface IDispatcherQueueShutdownStartingEventArgs : IInspectable
        {
            HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** result);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueue)]
        [uuid(B5417ADD-2B64-5293-AE6D-AEE24CC0FC2A)]
        interface IDispatcherQueueStatics : IInspectable
        {
            HRESULT GetForCurrentThread([out] [retval] Microsoft.System.DispatcherQueue** result);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [exclusiveto(Microsoft.System.DispatcherQueueTimer)]
        [uuid(30357864-57C6-59A0-B7B1-EF7177D47D4D)]
        interface IDispatcherQueueTimer : IInspectable
        {
            [propget] HRESULT Interval([out] [retval] Windows.Foundation.TimeSpan* value);
            [propput] HRESULT Interval([in] Windows.Foundation.TimeSpan value);
            [propget] HRESULT IsRunning([out] [retval] boolean* value);
            [propget] HRESULT IsRepeating([out] [retval] boolean* value);
            [propput] HRESULT IsRepeating([in] boolean value);
            HRESULT Start();
            HRESULT Stop();
            [eventadd] HRESULT Tick([in] Windows.Foundation.TypedEventHandler<Microsoft.System.DispatcherQueueTimer*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT Tick([in] EventRegistrationToken token);
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Microsoft.System.IDispatcherQueueStatics, Microsoft.Foundation.LiftedContract, 1.0)]
        [threading(both)]
        runtimeclass DispatcherQueue
        {
            [default] interface Microsoft.System.IDispatcherQueue;
            [contract(Microsoft.Foundation.LiftedContract, 1.0)] interface Microsoft.System.IDispatcherQueue2;
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Microsoft.System.IDispatcherQueueControllerStatics, Microsoft.Foundation.LiftedContract, 1.0)]
        [static(Microsoft.System.IDispatcherQueueControllerStatics2, Microsoft.Foundation.LiftedContract, 1.0)]
        [threading(both)]
        runtimeclass DispatcherQueueController
        {
            [default] interface Microsoft.System.IDispatcherQueueController;
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass DispatcherQueueShutdownStartingEventArgs
        {
            [default] interface Microsoft.System.IDispatcherQueueShutdownStartingEventArgs;
        }

        [contract(Microsoft.Foundation.LiftedContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass DispatcherQueueTimer
        {
            [default] interface Microsoft.System.IDispatcherQueueTimer;
        }
    }
}
