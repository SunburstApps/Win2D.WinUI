//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Automation.idl";
import "Microsoft.UI.Xaml.Automation.Peers.idl";
import "Microsoft.UI.Xaml.Automation.Text.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                typedef enum AnnotationType AnnotationType;

                runtimeclass AutomationProperty;

                typedef enum DockPosition DockPosition;

                typedef enum ExpandCollapseState ExpandCollapseState;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Peers
                {
                    typedef enum AutomationNavigationDirection AutomationNavigationDirection;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                typedef enum RowOrColumnMajor RowOrColumnMajor;

                typedef enum ScrollAmount ScrollAmount;

                typedef enum SupportedTextSelection SupportedTextSelection;

                typedef enum SynchronizedInputType SynchronizedInputType;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Text
                {
                    typedef enum TextPatternRangeEndpoint TextPatternRangeEndpoint;

                    typedef enum TextUnit TextUnit;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                typedef enum ToggleState ToggleState;

                typedef enum WindowInteractionState WindowInteractionState;

                typedef enum WindowVisualState WindowVisualState;

                typedef enum ZoomUnit ZoomUnit;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            apicontract WinUIContract;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Provider
                {
                    interface IAnnotationProvider;

                    interface ICustomNavigationProvider;

                    interface IDockProvider;

                    interface IDragProvider;

                    interface IDropTargetProvider;

                    interface IExpandCollapseProvider;

                    interface IGridItemProvider;

                    interface IGridProvider;

                    interface IIRawElementProviderSimple;

                    interface IInvokeProvider;

                    interface IItemContainerProvider;

                    interface IMultipleViewProvider;

                    interface IObjectModelProvider;

                    interface IRangeValueProvider;

                    interface IScrollItemProvider;

                    interface IScrollProvider;

                    interface ISelectionItemProvider;

                    interface ISelectionProvider;

                    interface ISpreadsheetItemProvider;

                    interface ISpreadsheetProvider;

                    interface IStylesProvider;

                    interface ISynchronizedInputProvider;

                    interface ITableItemProvider;

                    interface ITableProvider;

                    interface ITextChildProvider;

                    interface ITextEditProvider;

                    interface ITextProvider;

                    interface ITextProvider2;

                    interface ITextRangeProvider;

                    interface ITextRangeProvider2;

                    interface IToggleProvider;

                    interface ITransformProvider;

                    interface ITransformProvider2;

                    interface IValueProvider;

                    interface IVirtualizedItemProvider;

                    interface IWindowProvider;

                    runtimeclass IRawElementProviderSimple;
                }
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Provider
                {
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(546AB18E-986D-5DEB-8F2A-2D9303A43006)]
                    interface IAnnotationProvider : IInspectable
                    {
                        [propget] HRESULT AnnotationTypeId([out] [retval] INT32* value);
                        [propget] HRESULT AnnotationTypeName([out] [retval] HSTRING* value);
                        [propget] HRESULT Author([out] [retval] HSTRING* value);
                        [propget] HRESULT DateTime([out] [retval] HSTRING* value);
                        [propget] HRESULT Target([out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(CAD51322-FAA9-5A2B-90F0-B762C46178B3)]
                    interface ICustomNavigationProvider : IInspectable
                    {
                        HRESULT NavigateCustom([in] Microsoft.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction, [out] [retval] IInspectable** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(9882B971-70EA-5C6D-A818-7A7AB68C6F3B)]
                    interface IDockProvider : IInspectable
                    {
                        [propget] HRESULT DockPosition([out] [retval] Microsoft.UI.Xaml.Automation.DockPosition* value);
                        HRESULT SetDockPosition([in] Microsoft.UI.Xaml.Automation.DockPosition dockPosition);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(C60BB643-A356-5132-A258-FFBA6C7480F2)]
                    interface IDragProvider : IInspectable
                    {
                        [propget] HRESULT IsGrabbed([out] [retval] boolean* value);
                        [propget] HRESULT DropEffect([out] [retval] HSTRING* value);
                        [propget] HRESULT DropEffects([out] UINT32* __valueSize, [out] [retval] [size_is(, *__valueSize)] HSTRING** value);
                        HRESULT GetGrabbedItems([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(9B2A9F3D-BBB1-510D-99E8-0E0AE14A6E3B)]
                    interface IDropTargetProvider : IInspectable
                    {
                        [propget] HRESULT DropEffect([out] [retval] HSTRING* value);
                        [propget] HRESULT DropEffects([out] UINT32* __valueSize, [out] [retval] [size_is(, *__valueSize)] HSTRING** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(6CEF349C-B181-5D0B-B297-C3B0166120C3)]
                    interface IExpandCollapseProvider : IInspectable
                    {
                        [propget] HRESULT ExpandCollapseState([out] [retval] Microsoft.UI.Xaml.Automation.ExpandCollapseState* value);
                        HRESULT Collapse();
                        HRESULT Expand();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(D2557A0E-6909-5170-A680-60728DF339B4)]
                    interface IGridItemProvider : IInspectable
                    {
                        [propget] HRESULT Column([out] [retval] INT32* value);
                        [propget] HRESULT ColumnSpan([out] [retval] INT32* value);
                        [propget] HRESULT ContainingGrid([out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** value);
                        [propget] HRESULT Row([out] [retval] INT32* value);
                        [propget] HRESULT RowSpan([out] [retval] INT32* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(50992D5E-D225-56E9-A25A-78C372E81955)]
                    interface IGridProvider : IInspectable
                    {
                        [propget] HRESULT ColumnCount([out] [retval] INT32* value);
                        [propget] HRESULT RowCount([out] [retval] INT32* value);
                        HRESULT GetItem([in] INT32 row, [in] INT32 column, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple)]
                    [uuid(F90BC239-ADE2-55C9-A838-A3B0579763C5)]
                    interface IIRawElementProviderSimple : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(02481105-3378-544D-B4E1-A1B368AFBC02)]
                    interface IInvokeProvider : IInspectable
                    {
                        HRESULT Invoke();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(AD297363-694E-5885-997D-A2D6DFF415A7)]
                    interface IItemContainerProvider : IInspectable
                    {
                        HRESULT FindItemByProperty([in] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple* startAfter, [in] Microsoft.UI.Xaml.Automation.AutomationProperty* automationProperty, [in] IInspectable* value, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(60BE5484-3D8F-51FD-BEAB-423422EE1E03)]
                    interface IMultipleViewProvider : IInspectable
                    {
                        [propget] HRESULT CurrentView([out] [retval] INT32* value);
                        HRESULT GetSupportedViews([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] INT32** result);
                        HRESULT GetViewName([in] INT32 viewId, [out] [retval] HSTRING* result);
                        HRESULT SetCurrentView([in] INT32 viewId);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(92953ED0-4BD8-5624-8E3D-78D45FDE9CF2)]
                    interface IObjectModelProvider : IInspectable
                    {
                        HRESULT GetUnderlyingObjectModel([out] [retval] IInspectable** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(729AE414-1E8F-5020-82BB-BB574D145FD8)]
                    interface IRangeValueProvider : IInspectable
                    {
                        [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
                        [propget] HRESULT LargeChange([out] [retval] DOUBLE* value);
                        [propget] HRESULT Maximum([out] [retval] DOUBLE* value);
                        [propget] HRESULT Minimum([out] [retval] DOUBLE* value);
                        [propget] HRESULT SmallChange([out] [retval] DOUBLE* value);
                        [propget] HRESULT Value([out] [retval] DOUBLE* value);
                        HRESULT SetValue([in] DOUBLE value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(8A6FB8EB-E5F1-58EB-8E72-8B95F236FC47)]
                    interface IScrollItemProvider : IInspectable
                    {
                        HRESULT ScrollIntoView();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(7E2E5AF3-FF50-5365-BCFE-EF424B2FD590)]
                    interface IScrollProvider : IInspectable
                    {
                        [propget] HRESULT HorizontallyScrollable([out] [retval] boolean* value);
                        [propget] HRESULT HorizontalScrollPercent([out] [retval] DOUBLE* value);
                        [propget] HRESULT HorizontalViewSize([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticallyScrollable([out] [retval] boolean* value);
                        [propget] HRESULT VerticalScrollPercent([out] [retval] DOUBLE* value);
                        [propget] HRESULT VerticalViewSize([out] [retval] DOUBLE* value);
                        HRESULT Scroll([in] Microsoft.UI.Xaml.Automation.ScrollAmount horizontalAmount, [in] Microsoft.UI.Xaml.Automation.ScrollAmount verticalAmount);
                        HRESULT SetScrollPercent([in] DOUBLE horizontalPercent, [in] DOUBLE verticalPercent);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(C9DFDD81-D4AC-5D31-BE7F-24FAB16060E4)]
                    interface ISelectionItemProvider : IInspectable
                    {
                        [propget] HRESULT IsSelected([out] [retval] boolean* value);
                        [propget] HRESULT SelectionContainer([out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** value);
                        HRESULT AddToSelection();
                        HRESULT RemoveFromSelection();
                        HRESULT Select();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(80D56D4E-0052-541F-9411-9D1778B3BFCA)]
                    interface ISelectionProvider : IInspectable
                    {
                        [propget] HRESULT CanSelectMultiple([out] [retval] boolean* value);
                        [propget] HRESULT IsSelectionRequired([out] [retval] boolean* value);
                        HRESULT GetSelection([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(51C1CE89-B21F-592C-8768-0ACCDEFD5738)]
                    interface ISpreadsheetItemProvider : IInspectable
                    {
                        [propget] HRESULT Formula([out] [retval] HSTRING* value);
                        HRESULT GetAnnotationObjects([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                        HRESULT GetAnnotationTypes([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.AnnotationType** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(1FF41BAC-D9E3-5E48-B5F8-9EAB0FB2D9D8)]
                    interface ISpreadsheetProvider : IInspectable
                    {
                        HRESULT GetItemByName([in] HSTRING name, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(D8895839-0048-54DE-9C1F-152DE6665E80)]
                    interface IStylesProvider : IInspectable
                    {
                        [propget] HRESULT ExtendedProperties([out] [retval] HSTRING* value);
                        [propget] HRESULT FillColor([out] [retval] Windows.UI.Color* value);
                        [propget] HRESULT FillPatternColor([out] [retval] Windows.UI.Color* value);
                        [propget] HRESULT FillPatternStyle([out] [retval] HSTRING* value);
                        [propget] HRESULT Shape([out] [retval] HSTRING* value);
                        [propget] HRESULT StyleId([out] [retval] INT32* value);
                        [propget] HRESULT StyleName([out] [retval] HSTRING* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(C5615613-936D-5289-A190-E82057E0FF5A)]
                    interface ISynchronizedInputProvider : IInspectable
                    {
                        HRESULT Cancel();
                        HRESULT StartListening([in] Microsoft.UI.Xaml.Automation.SynchronizedInputType inputType);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(6CE6F038-54D4-5553-A4AD-03CBCF358197)]
                    interface ITableItemProvider : IInspectable
                    {
                        HRESULT GetColumnHeaderItems([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                        HRESULT GetRowHeaderItems([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(9ABA6724-B22D-5DB8-8ABB-81F911F18AF2)]
                    interface ITableProvider : IInspectable
                    {
                        [propget] HRESULT RowOrColumnMajor([out] [retval] Microsoft.UI.Xaml.Automation.RowOrColumnMajor* value);
                        HRESULT GetColumnHeaders([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                        HRESULT GetRowHeaders([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(7C72E55F-F75D-5522-AEB5-C1F82C32933B)]
                    interface ITextChildProvider : IInspectable
                    {
                        [propget] HRESULT TextContainer([out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** value);
                        [propget] HRESULT TextRange([out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(7F09BBE8-BEA7-5DD3-BA6B-28DBB402FAD4)]
                    interface ITextEditProvider : IInspectable
                        requires
                            Microsoft.UI.Xaml.Automation.Provider.ITextProvider
                    {
                        HRESULT GetActiveComposition([out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT GetConversionTarget([out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(37E7DCE6-FE7A-56A7-A47A-9462872C67EF)]
                    interface ITextProvider : IInspectable
                    {
                        [propget] HRESULT DocumentRange([out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** value);
                        [propget] HRESULT SupportedTextSelection([out] [retval] Microsoft.UI.Xaml.Automation.SupportedTextSelection* value);
                        HRESULT GetSelection([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider*** result);
                        HRESULT GetVisibleRanges([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider*** result);
                        HRESULT RangeFromChild([in] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple* childElement, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT RangeFromPoint([in] Windows.Foundation.Point screenLocation, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(6844F012-C7E6-5763-BA04-5B6DB910CD34)]
                    interface ITextProvider2 : IInspectable
                        requires
                            Microsoft.UI.Xaml.Automation.Provider.ITextProvider
                    {
                        HRESULT RangeFromAnnotation([in] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple* annotationElement, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT GetCaretRange([out] boolean* isActive, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** returnValue);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(84210361-6CE2-5084-BF3B-28AFA6E9851F)]
                    interface ITextRangeProvider : IInspectable
                    {
                        HRESULT Clone([out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT Compare([in] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider* textRangeProvider, [out] [retval] boolean* result);
                        HRESULT CompareEndpoints([in] Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, [in] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider* textRangeProvider, [in] Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint targetEndpoint, [out] [retval] INT32* result);
                        HRESULT ExpandToEnclosingUnit([in] Microsoft.UI.Xaml.Automation.Text.TextUnit unit);
                        HRESULT FindAttribute([in] INT32 attributeId, [in] IInspectable* value, [in] boolean backward, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT FindText([in] HSTRING text, [in] boolean backward, [in] boolean ignoreCase, [out] [retval] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider** result);
                        HRESULT GetAttributeValue([in] INT32 attributeId, [out] [retval] IInspectable** result);
                        HRESULT GetBoundingRectangles([out] UINT32* __returnValueSize, [out] [size_is(, *__returnValueSize)] DOUBLE** returnValue);
                        HRESULT GetEnclosingElement([out] [retval] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple** result);
                        HRESULT GetText([in] INT32 maxLength, [out] [retval] HSTRING* result);
                        HRESULT Move([in] Microsoft.UI.Xaml.Automation.Text.TextUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                        HRESULT MoveEndpointByUnit([in] Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, [in] Microsoft.UI.Xaml.Automation.Text.TextUnit unit, [in] INT32 count, [out] [retval] INT32* result);
                        HRESULT MoveEndpointByRange([in] Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint endpoint, [in] Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider* textRangeProvider, [in] Microsoft.UI.Xaml.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
                        HRESULT Select();
                        HRESULT AddToSelection();
                        HRESULT RemoveFromSelection();
                        HRESULT ScrollIntoView([in] boolean alignToTop);
                        HRESULT GetChildren([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Microsoft.UI.Xaml.Automation.Provider.IRawElementProviderSimple*** result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(34D4A80E-36BB-5362-A53B-490428A8B367)]
                    interface ITextRangeProvider2 : IInspectable
                        requires
                            Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider
                    {
                        HRESULT ShowContextMenu();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(021080C2-30A9-52EF-BC32-2B79847B6BA7)]
                    interface IToggleProvider : IInspectable
                    {
                        [propget] HRESULT ToggleState([out] [retval] Microsoft.UI.Xaml.Automation.ToggleState* value);
                        HRESULT Toggle();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(6FD76988-8F52-5EF2-A826-9C8C4951C911)]
                    interface ITransformProvider : IInspectable
                    {
                        [propget] HRESULT CanMove([out] [retval] boolean* value);
                        [propget] HRESULT CanResize([out] [retval] boolean* value);
                        [propget] HRESULT CanRotate([out] [retval] boolean* value);
                        HRESULT Move([in] DOUBLE x, [in] DOUBLE y);
                        HRESULT Resize([in] DOUBLE width, [in] DOUBLE height);
                        HRESULT Rotate([in] DOUBLE degrees);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(7D91D02D-8401-5CF8-BBC4-47391A524215)]
                    interface ITransformProvider2 : IInspectable
                        requires
                            Microsoft.UI.Xaml.Automation.Provider.ITransformProvider
                    {
                        [propget] HRESULT CanZoom([out] [retval] boolean* value);
                        [propget] HRESULT ZoomLevel([out] [retval] DOUBLE* value);
                        [propget] HRESULT MaxZoom([out] [retval] DOUBLE* value);
                        [propget] HRESULT MinZoom([out] [retval] DOUBLE* value);
                        HRESULT Zoom([in] DOUBLE zoom);
                        HRESULT ZoomByUnit([in] Microsoft.UI.Xaml.Automation.ZoomUnit zoomUnit);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(984F11CF-4611-588E-B52E-B96A12322C71)]
                    interface IValueProvider : IInspectable
                    {
                        [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
                        [propget] HRESULT Value([out] [retval] HSTRING* value);
                        HRESULT SetValue([in] HSTRING value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(098F858A-2E63-5985-AB87-F8EBDB1C5740)]
                    interface IVirtualizedItemProvider : IInspectable
                    {
                        HRESULT Realize();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(83F1DF99-9DDF-575E-A651-2EE657FD16E0)]
                    interface IWindowProvider : IInspectable
                    {
                        [propget] HRESULT IsModal([out] [retval] boolean* value);
                        [propget] HRESULT IsTopmost([out] [retval] boolean* value);
                        [propget] HRESULT Maximizable([out] [retval] boolean* value);
                        [propget] HRESULT Minimizable([out] [retval] boolean* value);
                        [propget] HRESULT InteractionState([out] [retval] Microsoft.UI.Xaml.Automation.WindowInteractionState* value);
                        [propget] HRESULT VisualState([out] [retval] Microsoft.UI.Xaml.Automation.WindowVisualState* value);
                        HRESULT Close();
                        HRESULT SetVisualState([in] Microsoft.UI.Xaml.Automation.WindowVisualState state);
                        HRESULT WaitForInputIdle([in] INT32 milliseconds, [out] [retval] boolean* result);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass IRawElementProviderSimple : Microsoft.UI.Xaml.DependencyObject
                    {
                        [default] interface Microsoft.UI.Xaml.Automation.Provider.IIRawElementProviderSimple;
                    }
                }
            }
        }
    }
}
