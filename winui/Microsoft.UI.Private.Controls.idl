//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Composition.Interactions.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Controls.idl";
import "Microsoft.UI.Xaml.Controls.Primitives.idl";
import "Microsoft.UI.Xaml.Data.idl";
import "Microsoft.UI.Xaml.Media.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass CompositionEasingFunction;

            runtimeclass CompositionPropertySet;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Interactions
            {
                runtimeclass CompositionInteractionSourceCollection;

                runtimeclass InteractionTracker;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                typedef enum Orientation Orientation;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    runtimeclass Popup;

                    runtimeclass ScrollSnapPointBase;

                    runtimeclass Scroller;

                    runtimeclass SnapPointBase;

                    runtimeclass ZoomSnapPointBase;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass RadioButtons;

                runtimeclass RefreshInteractionRatioChangedEventArgs;

                typedef enum RefreshPullDirection RefreshPullDirection;

                runtimeclass RefreshRequestedEventArgs;

                runtimeclass RefreshStateChangedEventArgs;

                typedef enum RefreshVisualizerState RefreshVisualizerState;

                runtimeclass ScrollCompletedEventArgs;

                runtimeclass ScrollViewer;

                runtimeclass SwipeControl;

                runtimeclass TeachingTip;

                typedef enum TeachingTipHeroContentPlacementMode TeachingTipHeroContentPlacementMode;

                typedef enum TeachingTipPlacementMode TeachingTipPlacementMode;

                typedef enum TwoPaneViewMode TwoPaneViewMode;

                runtimeclass ZoomCompletedEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Data
            {
                interface INotifyPropertyChanged;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DependencyProperty;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass LoadedImageSurface;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass UIElement;

            typedef enum Visibility Visibility;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Deferral;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Vector2 Vector2;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Rect Rect;

        typedef struct Size Size;

        typedef struct TimeSpan TimeSpan;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Private
        {
            namespace Controls
            {
                typedef enum ButtonInteractionInvokeMode ButtonInteractionInvokeMode;

                typedef enum ScrollerViewChangeResult ScrollerViewChangeResult;

                delegate ConfigurationChangedEventHandler;

                delegate PostArrangeEventHandler;

                delegate ViewportChangedEventHandler;

                interface IAdapterAnimationHandler;

                interface IButtonInteraction;

                interface IButtonInteractionFactory;

                interface IButtonInteractionInvokedEventArgs;

                interface IDisplayRegionHelperTestApi;

                interface IDisplayRegionHelperTestApiStatics;

                interface IMUXControlsTestHooks;

                interface IMUXControlsTestHooksLoggingMessageEventArgs;

                interface IMUXControlsTestHooksStatics;

                interface IPullToRefreshHelperTestApi;

                interface IPullToRefreshHelperTestApiStatics;

                interface IRadioButtonsTestHooks;

                interface IRadioButtonsTestHooksStatics;

                interface IRefreshContainerPrivate;

                interface IRefreshInfoProvider;

                interface IRefreshInfoProviderAdapter;

                interface IRefreshVisualizerPrivate;

                interface IRepeaterScrollingSurface;

                interface IRepeaterTestHooks;

                interface IRepeaterTestHooksStatics;

                interface IScrollViewerIRefreshInfoProviderAdapter;

                interface IScrollViewerIRefreshInfoProviderAdapterFactory;

                interface IScrollerTestHooks;

                interface IScrollerTestHooksAnchorEvaluatedEventArgs;

                interface IScrollerTestHooksExpressionAnimationStatusChangedEventArgs;

                interface IScrollerTestHooksInteractionSourcesChangedEventArgs;

                interface IScrollerTestHooksStatics;

                interface ISliderInteraction;

                interface ISliderInteractionFactory;

                interface ISpectrumBrush;

                interface ISpectrumBrushStatics;

                interface ISplitButtonTestApi;

                interface ISplitButtonTestApiStatics;

                interface ISwipeTestHooks;

                interface ISwipeTestHooksStatics;

                interface ITeachingTipTestHooks;

                interface ITeachingTipTestHooksStatics;

                runtimeclass ButtonInteraction;

                runtimeclass ButtonInteractionInvokedEventArgs;

                runtimeclass DisplayRegionHelperTestApi;

                runtimeclass MUXControlsTestHooks;

                runtimeclass MUXControlsTestHooksLoggingMessageEventArgs;

                runtimeclass PullToRefreshHelperTestApi;

                runtimeclass RadioButtonsTestHooks;

                runtimeclass RepeaterTestHooks;

                runtimeclass ScrollViewerIRefreshInfoProviderAdapter;

                runtimeclass ScrollerTestHooks;

                runtimeclass ScrollerTestHooksAnchorEvaluatedEventArgs;

                runtimeclass ScrollerTestHooksExpressionAnimationStatusChangedEventArgs;

                runtimeclass ScrollerTestHooksInteractionSourcesChangedEventArgs;

                runtimeclass SliderInteraction;

                runtimeclass SpectrumBrush;

                runtimeclass SplitButtonTestApi;

                runtimeclass SwipeTestHooks;

                runtimeclass TeachingTipTestHooks;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Private
        {
            namespace Controls
            {
                declare
                {
                    interface Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Private.Controls.MUXControlsTestHooksLoggingMessageEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.ButtonInteraction*, Microsoft.UI.Private.Controls.ButtonInteractionInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksAnchorEvaluatedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksExpressionAnimationStatusChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksInteractionSourcesChangedEventArgs*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Private
        {
            namespace Controls
            {
                [version(0x00000001)]
                enum ButtonInteractionInvokeMode
                {
                    Release = 0,
                    Press   = 1,
                    Hover   = 2
                };

                [version(0x00000001)]
                enum ScrollerViewChangeResult
                {
                    Completed   = 0,
                    Interrupted = 1,
                    Ignored     = 2
                };

                [uuid(B9632DA1-94F2-5C01-A3C5-F77E39F9932E)]
                [version(0x00000001)]
                delegate
                    HRESULT ConfigurationChangedEventHandler([in] Microsoft.UI.Private.Controls.IRepeaterScrollingSurface* sender);

                [uuid(0543EA9A-E419-5530-BDE0-C073D515E8B4)]
                [version(0x00000001)]
                delegate
                    HRESULT PostArrangeEventHandler([in] Microsoft.UI.Private.Controls.IRepeaterScrollingSurface* sender);

                [uuid(319622FC-620E-5E3D-B768-2743CF278E7E)]
                [version(0x00000001)]
                delegate
                    HRESULT ViewportChangedEventHandler([in] Microsoft.UI.Private.Controls.IRepeaterScrollingSurface* sender, [in] boolean isFinal);

                [uuid(25D4A4BC-B4DB-54EF-A6E0-5E2058E8276A)]
                [version(0x00000001)]
                interface IAdapterAnimationHandler : IInspectable
                {
                    HRESULT InteractionTrackerAnimation([in] Microsoft.UI.Xaml.UIElement* refreshVisualizer, [in] Microsoft.UI.Xaml.UIElement* infoProvider, [in] Microsoft.UI.Composition.Interactions.InteractionTracker* interactionTracker);
                    HRESULT RefreshRequestedAnimation([in] Microsoft.UI.Xaml.UIElement* refreshVisualizer, [in] Microsoft.UI.Xaml.UIElement* infoProvider, [in] DOUBLE executionRatio);
                    HRESULT RefreshCompletedAnimation([in] Microsoft.UI.Xaml.UIElement* refreshVisualizer, [in] Microsoft.UI.Xaml.UIElement* infoProvider);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ButtonInteraction)]
                [uuid(E64AA68F-67EE-5541-A777-BE9BBF6FA70C)]
                [version(0x00000001)]
                interface IButtonInteraction : IInspectable
                {
                    [propget] HRESULT InvokeMode([out] [retval] Microsoft.UI.Private.Controls.ButtonInteractionInvokeMode* value);
                    [propput] HRESULT InvokeMode([in] Microsoft.UI.Private.Controls.ButtonInteractionInvokeMode value);
                    [propget] HRESULT IsHovering([out] [retval] boolean* value);
                    [propget] HRESULT IsPressing([out] [retval] boolean* value);
                    [eventadd] HRESULT Invoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.ButtonInteraction*, Microsoft.UI.Private.Controls.ButtonInteractionInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Invoked([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ButtonInteraction)]
                [uuid(7E76E898-90B2-5C33-8E79-B1B72B066735)]
                [version(0x00000001)]
                interface IButtonInteractionFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Private.Controls.ButtonInteraction** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ButtonInteractionInvokedEventArgs)]
                [uuid(0F174283-EC4D-5340-8F45-9C73C9B20634)]
                [version(0x00000001)]
                interface IButtonInteractionInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT Target([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.DisplayRegionHelperTestApi)]
                [uuid(CB2C0727-F02A-5325-9A89-74AEC8546D85)]
                [version(0x00000001)]
                interface IDisplayRegionHelperTestApi : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.DisplayRegionHelperTestApi)]
                [uuid(8312FD4D-14ED-52D3-A7C7-C2AC3AFB8748)]
                [version(0x00000001)]
                interface IDisplayRegionHelperTestApiStatics : IInspectable
                {
                    [propget] HRESULT SimulateDisplayRegions([out] [retval] boolean* value);
                    [propput] HRESULT SimulateDisplayRegions([in] boolean value);
                    [propget] HRESULT SimulateMode([out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneViewMode* value);
                    [propput] HRESULT SimulateMode([in] Microsoft.UI.Xaml.Controls.TwoPaneViewMode value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.MUXControlsTestHooks)]
                [uuid(DDB77E64-E10E-51A8-9E72-A2CA438F0572)]
                [version(0x00000001)]
                interface IMUXControlsTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.MUXControlsTestHooksLoggingMessageEventArgs)]
                [uuid(794ECDDA-8439-5BC8-9F5D-361B6875C01E)]
                [version(0x00000001)]
                interface IMUXControlsTestHooksLoggingMessageEventArgs : IInspectable
                {
                    [propget] HRESULT Message([out] [retval] HSTRING* value);
                    [propget] HRESULT IsVerboseLevel([out] [retval] boolean* value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.MUXControlsTestHooks)]
                [uuid(82F23C73-FF09-5B19-8A0D-79BC9515FA22)]
                [version(0x00000001)]
                interface IMUXControlsTestHooksStatics : IInspectable
                {
                    HRESULT SetOutputDebugStringLevelForType([in] HSTRING type, [in] boolean isLoggingInfoLevel, [in] boolean isLoggingVerboseLevel);
                    HRESULT SetLoggingLevelForType([in] HSTRING type, [in] boolean isLoggingInfoLevel, [in] boolean isLoggingVerboseLevel);
                    HRESULT SetLoggingLevelForInstance([in] IInspectable* sender, [in] boolean isLoggingInfoLevel, [in] boolean isLoggingVerboseLevel);
                    [eventadd] HRESULT LoggingMessage([in] Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Private.Controls.MUXControlsTestHooksLoggingMessageEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LoggingMessage([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.PullToRefreshHelperTestApi)]
                [uuid(6D3133D3-C2D5-5206-9E49-5A99AB4E4AB3)]
                [version(0x00000001)]
                interface IPullToRefreshHelperTestApi : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.PullToRefreshHelperTestApi)]
                [uuid(6ACB6568-1035-53B2-955E-4CD69A8EB172)]
                [version(0x00000001)]
                interface IPullToRefreshHelperTestApiStatics : IInspectable
                {
                    HRESULT CreateRefreshInteractionRatioChangedEventArgsInstance([in] DOUBLE value, [out] [retval] Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs** result);
                    HRESULT CreateRefreshStateChangedEventArgsInstance([in] Microsoft.UI.Xaml.Controls.RefreshVisualizerState oldValue, [in] Microsoft.UI.Xaml.Controls.RefreshVisualizerState newValue, [out] [retval] Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs** result);
                    HRESULT CreateRefreshRequestedEventArgsInstance([in] Windows.Foundation.Deferral* handler, [out] [retval] Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs** result);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.RadioButtonsTestHooks)]
                [uuid(FC4BEA9D-62DF-5AF5-B676-462ADB210D3F)]
                [version(0x00000001)]
                interface IRadioButtonsTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.RadioButtonsTestHooks)]
                [uuid(4DA17A75-F719-5333-AB4D-EFC919D4AA71)]
                [version(0x00000001)]
                interface IRadioButtonsTestHooksStatics : IInspectable
                {
                    HRESULT SetTestHooksEnabled([in] Microsoft.UI.Xaml.Controls.RadioButtons* radioButtons, [in] boolean enabled);
                    HRESULT GetRows([in] Microsoft.UI.Xaml.Controls.RadioButtons* radioButtons, [out] [retval] INT32* result);
                    HRESULT GetColumns([in] Microsoft.UI.Xaml.Controls.RadioButtons* radioButtons, [out] [retval] INT32* result);
                    HRESULT GetLargerColumns([in] Microsoft.UI.Xaml.Controls.RadioButtons* radioButtons, [out] [retval] INT32* result);
                    [eventadd] HRESULT LayoutChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RadioButtons*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LayoutChanged([in] EventRegistrationToken token);
                }

                [uuid(20C0EE3F-06B5-5152-B015-0664A4ADA213)]
                [version(0x00000001)]
                interface IRefreshContainerPrivate : IInspectable
                {
                    [propget] HRESULT RefreshInfoProviderAdapter([out] [retval] Microsoft.UI.Private.Controls.IRefreshInfoProviderAdapter** value);
                    [propput] HRESULT RefreshInfoProviderAdapter([in] Microsoft.UI.Private.Controls.IRefreshInfoProviderAdapter* value);
                }

                [uuid(623906A9-0ACF-54EF-88E1-9A36DA043648)]
                [version(0x00000001)]
                interface IRefreshInfoProvider : IInspectable
                {
                    HRESULT OnRefreshStarted();
                    HRESULT OnRefreshCompleted();
                    [propget] HRESULT IsInteractingForRefresh([out] [retval] boolean* value);
                    [propget] HRESULT CompositionProperties([out] [retval] Microsoft.UI.Composition.CompositionPropertySet** value);
                    [propget] HRESULT InteractionRatioCompositionProperty([out] [retval] HSTRING* value);
                    [propget] HRESULT ExecutionRatio([out] [retval] DOUBLE* value);
                    [eventadd] HRESULT IsInteractingForRefreshChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsInteractingForRefreshChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT InteractionRatioChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT InteractionRatioChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT RefreshStarted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RefreshStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT RefreshCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RefreshCompleted([in] EventRegistrationToken token);
                }

                [uuid(D1040D59-1490-587A-B116-6F45C873748A)]
                [version(0x00000001)]
                interface IRefreshInfoProviderAdapter : IInspectable
                {
                    HRESULT AdaptFromTree([in] Microsoft.UI.Xaml.UIElement* root, [in] Windows.Foundation.Size visualizerSize, [out] [retval] Microsoft.UI.Private.Controls.IRefreshInfoProvider** result);
                    HRESULT SetAnimations([in] Microsoft.UI.Xaml.UIElement* refreshVisualizerAnimatableContainer);
                }

                [uuid(ED48295A-B54F-571A-AC5F-9CE4C7848A49)]
                [version(0x00000001)]
                interface IRefreshVisualizerPrivate : IInspectable
                {
                    [propget] HRESULT InfoProvider([out] [retval] Microsoft.UI.Private.Controls.IRefreshInfoProvider** value);
                    [propput] HRESULT InfoProvider([in] Microsoft.UI.Private.Controls.IRefreshInfoProvider* value);
                    HRESULT SetInternalPullDirection([in] Microsoft.UI.Xaml.Controls.RefreshPullDirection value);
                }

                [uuid(4D127FAA-F746-58D7-AB0E-703E1639B19E)]
                [version(0x00000001)]
                interface IRepeaterScrollingSurface : IInspectable
                {
                    [propget] HRESULT IsHorizontallyScrollable([out] [retval] boolean* value);
                    [propget] HRESULT IsVerticallyScrollable([out] [retval] boolean* value);
                    [propget] HRESULT AnchorElement([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [eventadd] HRESULT ConfigurationChanged([in] Microsoft.UI.Private.Controls.ConfigurationChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ConfigurationChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT PostArrange([in] Microsoft.UI.Private.Controls.PostArrangeEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PostArrange([in] EventRegistrationToken token);
                    [eventadd] HRESULT ViewportChanged([in] Microsoft.UI.Private.Controls.ViewportChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ViewportChanged([in] EventRegistrationToken token);
                    HRESULT RegisterAnchorCandidate([in] Microsoft.UI.Xaml.UIElement* element);
                    HRESULT UnregisterAnchorCandidate([in] Microsoft.UI.Xaml.UIElement* element);
                    HRESULT GetRelativeViewport([in] Microsoft.UI.Xaml.UIElement* child, [out] [retval] Windows.Foundation.Rect* result);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.RepeaterTestHooks)]
                [uuid(FE285751-9A67-5FEB-84E6-D397EDAFB6D3)]
                [version(0x00000001)]
                interface IRepeaterTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.RepeaterTestHooks)]
                [uuid(92132A0D-93D6-59AE-AE84-0F8FBD6D18E2)]
                [version(0x00000001)]
                interface IRepeaterTestHooksStatics : IInspectable
                {
                    [eventadd] HRESULT BuildTreeCompleted([in] Windows.Foundation.TypedEventHandler<IInspectable*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BuildTreeCompleted([in] EventRegistrationToken token);
                    HRESULT GetElementFactoryElementIndex([in] IInspectable* getArgs, [out] [retval] INT32* result);
                    HRESULT CreateRepeaterElementFactoryGetArgs([out] [retval] IInspectable** result);
                    HRESULT CreateRepeaterElementFactoryRecycleArgs([out] [retval] IInspectable** result);
                    HRESULT GetLayoutId([in] IInspectable* layout, [out] [retval] HSTRING* result);
                    HRESULT SetLayoutId([in] IInspectable* layout, [in] HSTRING id);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollViewerIRefreshInfoProviderAdapter)]
                [uuid(FD076A2C-0785-5FE6-B8CD-E3DDC86835BA)]
                [version(0x00000001)]
                interface IScrollViewerIRefreshInfoProviderAdapter : IInspectable
                {
                    HRESULT Adapt([in] Microsoft.UI.Xaml.Controls.ScrollViewer* adaptee, [in] Windows.Foundation.Size visualizerSize, [out] [retval] Microsoft.UI.Private.Controls.IRefreshInfoProvider** result);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollViewerIRefreshInfoProviderAdapter)]
                [uuid(C05066B9-E896-5AC0-AFF0-614B79EE94CD)]
                [version(0x00000001)]
                interface IScrollViewerIRefreshInfoProviderAdapterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.Xaml.Controls.RefreshPullDirection refreshPullDirection, [in] Microsoft.UI.Private.Controls.IAdapterAnimationHandler* animationHandler, [out] [retval] Microsoft.UI.Private.Controls.ScrollViewerIRefreshInfoProviderAdapter** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollerTestHooks)]
                [uuid(0E922435-9890-507D-939B-1619FB09EDFA)]
                [version(0x00000001)]
                interface IScrollerTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollerTestHooksAnchorEvaluatedEventArgs)]
                [uuid(120BB09C-ECBC-5602-B01F-7A20ACE87163)]
                [version(0x00000001)]
                interface IScrollerTestHooksAnchorEvaluatedEventArgs : IInspectable
                {
                    [propget] HRESULT ViewportAnchorPointHorizontalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ViewportAnchorPointVerticalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT AnchorElement([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollerTestHooksExpressionAnimationStatusChangedEventArgs)]
                [uuid(7BBADC93-8964-5E29-9AC4-40B1FFB14316)]
                [version(0x00000001)]
                interface IScrollerTestHooksExpressionAnimationStatusChangedEventArgs : IInspectable
                {
                    [propget] HRESULT IsExpressionAnimationStarted([out] [retval] boolean* value);
                    [propget] HRESULT PropertyName([out] [retval] HSTRING* value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollerTestHooksInteractionSourcesChangedEventArgs)]
                [uuid(F58ED2C6-29C0-52F2-937C-FA8C96994EF1)]
                [version(0x00000001)]
                interface IScrollerTestHooksInteractionSourcesChangedEventArgs : IInspectable
                {
                    [propget] HRESULT InteractionSources([out] [retval] Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.ScrollerTestHooks)]
                [uuid(9CFE2DD0-23A1-5391-911C-61C76BD3ABD9)]
                [version(0x00000001)]
                interface IScrollerTestHooksStatics : IInspectable
                {
                    [propget] HRESULT AreAnchorNotificationsRaised([out] [retval] boolean* value);
                    [propput] HRESULT AreAnchorNotificationsRaised([in] boolean value);
                    [propget] HRESULT AreInteractionSourcesNotificationsRaised([out] [retval] boolean* value);
                    [propput] HRESULT AreInteractionSourcesNotificationsRaised([in] boolean value);
                    [propget] HRESULT AreExpressionAnimationStatusNotificationsRaised([out] [retval] boolean* value);
                    [propput] HRESULT AreExpressionAnimationStatusNotificationsRaised([in] boolean value);
                    [propget] HRESULT IsAnimationsEnabledOverride([out] [retval] Windows.Foundation.IReference<boolean>** value);
                    [propput] HRESULT IsAnimationsEnabledOverride([in] Windows.Foundation.IReference<boolean>* value);
                    HRESULT GetOffsetsChangeVelocityParameters([out] INT32* millisecondsPerUnit, [out] INT32* minMilliseconds, [out] INT32* maxMilliseconds);
                    HRESULT SetOffsetsChangeVelocityParameters([in] INT32 millisecondsPerUnit, [in] INT32 minMilliseconds, [in] INT32 maxMilliseconds);
                    HRESULT GetZoomFactorChangeVelocityParameters([out] INT32* millisecondsPerUnit, [out] INT32* minMilliseconds, [out] INT32* maxMilliseconds);
                    HRESULT SetZoomFactorChangeVelocityParameters([in] INT32 millisecondsPerUnit, [in] INT32 minMilliseconds, [in] INT32 maxMilliseconds);
                    HRESULT GetContentLayoutOffsetX([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] FLOAT* contentLayoutOffsetX);
                    HRESULT SetContentLayoutOffsetX([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] FLOAT contentLayoutOffsetX);
                    HRESULT GetContentLayoutOffsetY([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] FLOAT* contentLayoutOffsetY);
                    HRESULT SetContentLayoutOffsetY([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] FLOAT contentLayoutOffsetY);
                    HRESULT GetArrangeRenderSizesDelta([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetMinPosition([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetMaxPosition([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetScrollCompletedResult([in] Microsoft.UI.Xaml.Controls.ScrollCompletedEventArgs* scrollCompletedEventArgs, [out] [retval] Microsoft.UI.Private.Controls.ScrollerViewChangeResult* result);
                    HRESULT GetZoomCompletedResult([in] Microsoft.UI.Xaml.Controls.ZoomCompletedEventArgs* zoomCompletedEventArgs, [out] [retval] Microsoft.UI.Private.Controls.ScrollerViewChangeResult* result);
                    HRESULT GetConsolidatedHorizontalScrollSnapPoints([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>** result);
                    HRESULT GetConsolidatedVerticalScrollSnapPoints([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase*>** result);
                    HRESULT GetConsolidatedZoomSnapPoints([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase*>** result);
                    HRESULT GetHorizontalSnapPointActualApplicableZone([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase* scrollSnapPoint, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetVerticalSnapPointActualApplicableZone([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase* scrollSnapPoint, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetZoomSnapPointActualApplicableZone([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase* zoomSnapPoint, [out] [retval] Windows.Foundation.Numerics.Vector2* result);
                    HRESULT GetHorizontalSnapPointCombinationCount([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase* scrollSnapPoint, [out] [retval] INT32* result);
                    HRESULT GetVerticalSnapPointCombinationCount([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase* scrollSnapPoint, [out] [retval] INT32* result);
                    HRESULT GetZoomSnapPointCombinationCount([in] Microsoft.UI.Xaml.Controls.Primitives.Scroller* scroller, [in] Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase* zoomSnapPoint, [out] [retval] INT32* result);
                    HRESULT GetSnapPointVisualizationColor([in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase* snapPoint, [out] [retval] Windows.UI.Color* result);
                    HRESULT SetSnapPointVisualizationColor([in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase* snapPoint, [in] Windows.UI.Color color);
                    [eventadd] HRESULT AnchorEvaluated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksAnchorEvaluatedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AnchorEvaluated([in] EventRegistrationToken token);
                    [eventadd] HRESULT InteractionSourcesChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksInteractionSourcesChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT InteractionSourcesChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ExpressionAnimationStatusChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Private.Controls.ScrollerTestHooksExpressionAnimationStatusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ExpressionAnimationStatusChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContentLayoutOffsetXChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContentLayoutOffsetXChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContentLayoutOffsetYChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContentLayoutOffsetYChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SliderInteraction)]
                [uuid(F3D5E90E-2206-56CA-801C-5C0686A20B40)]
                [version(0x00000001)]
                interface ISliderInteraction : IInspectable
                {
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT Minimum([out] [retval] DOUBLE* value);
                    [propput] HRESULT Minimum([in] DOUBLE value);
                    [propget] HRESULT Maximum([out] [retval] DOUBLE* value);
                    [propput] HRESULT Maximum([in] DOUBLE value);
                    [propget] HRESULT Position([out] [retval] DOUBLE* value);
                    [propget] HRESULT SmallChange([out] [retval] DOUBLE* value);
                    [propput] HRESULT SmallChange([in] DOUBLE value);
                    [propget] HRESULT LargeChange([out] [retval] DOUBLE* value);
                    [propput] HRESULT LargeChange([in] DOUBLE value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SliderInteraction)]
                [uuid(95408B5D-E733-58AF-B911-AC451C36B9F5)]
                [version(0x00000001)]
                interface ISliderInteractionFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Private.Controls.SliderInteraction** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SpectrumBrush)]
                [uuid(20FA7976-4327-5840-A421-7303A379D649)]
                [version(0x00000001)]
                interface ISpectrumBrush : IInspectable
                {
                    [propget] HRESULT MinSurface([out] [retval] Microsoft.UI.Xaml.Media.LoadedImageSurface** value);
                    [propput] HRESULT MinSurface([in] Microsoft.UI.Xaml.Media.LoadedImageSurface* value);
                    [propget] HRESULT MaxSurface([out] [retval] Microsoft.UI.Xaml.Media.LoadedImageSurface** value);
                    [propput] HRESULT MaxSurface([in] Microsoft.UI.Xaml.Media.LoadedImageSurface* value);
                    [propget] HRESULT MaxSurfaceOpacity([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxSurfaceOpacity([in] DOUBLE value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SpectrumBrush)]
                [uuid(E4A917B3-C4ED-58FF-9DE7-1E78AFE4F9A7)]
                [version(0x00000001)]
                interface ISpectrumBrushStatics : IInspectable
                {
                    [propget] HRESULT MinSurfaceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxSurfaceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxSurfaceOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SplitButtonTestApi)]
                [uuid(5260BE7A-2A5B-58E7-A092-D9B065BD07AB)]
                [version(0x00000001)]
                interface ISplitButtonTestApi : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SplitButtonTestApi)]
                [uuid(AF7AF455-4A71-5533-9109-8EDBD6C080BC)]
                [version(0x00000001)]
                interface ISplitButtonTestApiStatics : IInspectable
                {
                    [propget] HRESULT SimulateTouch([out] [retval] boolean* value);
                    [propput] HRESULT SimulateTouch([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SwipeTestHooks)]
                [uuid(F07F8599-61BF-5EF2-A92B-639E35830352)]
                [version(0x00000001)]
                interface ISwipeTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.SwipeTestHooks)]
                [uuid(BA98E941-0FCE-537D-A02E-843CB8ECA13A)]
                [version(0x00000001)]
                interface ISwipeTestHooksStatics : IInspectable
                {
                    HRESULT GetLastInteractedWithSwipeControl([out] [retval] Microsoft.UI.Xaml.Controls.SwipeControl** result);
                    HRESULT GetIsOpen([in] Microsoft.UI.Xaml.Controls.SwipeControl* swipeControl, [out] [retval] boolean* result);
                    HRESULT GetIsIdle([in] Microsoft.UI.Xaml.Controls.SwipeControl* swipeControl, [out] [retval] boolean* result);
                    [eventadd] HRESULT LastInteractedWithSwipeControlChanged([in] Windows.Foundation.TypedEventHandler<IInspectable*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LastInteractedWithSwipeControlChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT OpenedStatusChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwipeControl*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT OpenedStatusChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT IdleStatusChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwipeControl*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IdleStatusChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Private.Controls.TeachingTipTestHooks)]
                [uuid(6A393ABF-3B7F-5ECB-BC21-77D61EBB3F67)]
                [version(0x00000001)]
                interface ITeachingTipTestHooks : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Private.Controls.TeachingTipTestHooks)]
                [uuid(1168461B-E53C-53C3-87D8-F244BDF4543E)]
                [version(0x00000001)]
                interface ITeachingTipTestHooksStatics : IInspectable
                {
                    HRESULT SetExpandEasingFunction([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Microsoft.UI.Composition.CompositionEasingFunction* easingFunction);
                    HRESULT SetContractEasingFunction([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Microsoft.UI.Composition.CompositionEasingFunction* easingFunction);
                    HRESULT SetTipShouldHaveShadow([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] boolean tipShouldHaveShadow);
                    HRESULT SetContentElevation([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] FLOAT elevation);
                    HRESULT SetTailElevation([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] FLOAT elevation);
                    HRESULT SetUseTestScreenBounds([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] boolean useTestScreenBounds);
                    HRESULT SetTestScreenBounds([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Windows.Foundation.Rect testScreenBounds);
                    HRESULT SetUseTestWindowBounds([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] boolean useTestWindowBounds);
                    HRESULT SetTestWindowBounds([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Windows.Foundation.Rect testWindowBounds);
                    HRESULT SetTipFollowsTarget([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] boolean tipFollowsTarget);
                    HRESULT SetReturnTopForOutOfWindowPlacement([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] boolean returnTopForOutOfWindowPlacement);
                    HRESULT SetExpandAnimationDuration([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Windows.Foundation.TimeSpan animationDurationMultiplier);
                    HRESULT SetContractAnimationDuration([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [in] Windows.Foundation.TimeSpan animationDurationMultiplier);
                    HRESULT GetIsIdle([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] boolean* result);
                    HRESULT GetEffectivePlacement([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode* result);
                    HRESULT GetEffectiveHeroContentPlacement([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode* result);
                    HRESULT GetVerticalOffset([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] DOUBLE* result);
                    HRESULT GetHorizontalOffset([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] DOUBLE* result);
                    HRESULT GetTitleVisibility([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] Microsoft.UI.Xaml.Visibility* result);
                    HRESULT GetSubtitleVisibility([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] Microsoft.UI.Xaml.Visibility* result);
                    HRESULT GetPopup([in] Microsoft.UI.Xaml.Controls.TeachingTip* teachingTip, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.Popup** result);
                    [eventadd] HRESULT OpenedStatusChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT OpenedStatusChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT IdleStatusChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IdleStatusChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT OffsetChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT OffsetChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT EffectivePlacementChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT EffectivePlacementChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT EffectiveHeroContentPlacementChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT EffectiveHeroContentPlacementChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TitleVisibilityChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TitleVisibilityChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SubtitleVisibilityChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SubtitleVisibilityChanged([in] EventRegistrationToken token);
                }

                [composable(Microsoft.UI.Private.Controls.IButtonInteractionFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ButtonInteraction : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Private.Controls.IButtonInteraction;
                    interface Microsoft.UI.Xaml.Data.INotifyPropertyChanged;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ButtonInteractionInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Private.Controls.IButtonInteractionInvokedEventArgs;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IDisplayRegionHelperTestApiStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass DisplayRegionHelperTestApi
                {
                    [default] interface Microsoft.UI.Private.Controls.IDisplayRegionHelperTestApi;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IMUXControlsTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass MUXControlsTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.IMUXControlsTestHooks;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass MUXControlsTestHooksLoggingMessageEventArgs
                {
                    [default] interface Microsoft.UI.Private.Controls.IMUXControlsTestHooksLoggingMessageEventArgs;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IPullToRefreshHelperTestApiStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass PullToRefreshHelperTestApi
                {
                    [default] interface Microsoft.UI.Private.Controls.IPullToRefreshHelperTestApi;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IRadioButtonsTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RadioButtonsTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.IRadioButtonsTestHooks;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IRepeaterTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RepeaterTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.IRepeaterTestHooks;
                }

                [activatable(Microsoft.UI.Private.Controls.IScrollViewerIRefreshInfoProviderAdapterFactory, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ScrollViewerIRefreshInfoProviderAdapter
                {
                    [default] interface Microsoft.UI.Private.Controls.IScrollViewerIRefreshInfoProviderAdapter;
                    interface Microsoft.UI.Private.Controls.IRefreshInfoProviderAdapter;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.IScrollerTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ScrollerTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.IScrollerTestHooks;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollerTestHooksAnchorEvaluatedEventArgs
                {
                    [default] interface Microsoft.UI.Private.Controls.IScrollerTestHooksAnchorEvaluatedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollerTestHooksExpressionAnimationStatusChangedEventArgs
                {
                    [default] interface Microsoft.UI.Private.Controls.IScrollerTestHooksExpressionAnimationStatusChangedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollerTestHooksInteractionSourcesChangedEventArgs
                {
                    [default] interface Microsoft.UI.Private.Controls.IScrollerTestHooksInteractionSourcesChangedEventArgs;
                }

                [composable(Microsoft.UI.Private.Controls.ISliderInteractionFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SliderInteraction : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Private.Controls.ISliderInteraction;
                    interface Microsoft.UI.Xaml.Data.INotifyPropertyChanged;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.ISpectrumBrushStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SpectrumBrush : Microsoft.UI.Xaml.Media.XamlCompositionBrushBase
                {
                    [default] interface Microsoft.UI.Private.Controls.ISpectrumBrush;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.ISplitButtonTestApiStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SplitButtonTestApi
                {
                    [default] interface Microsoft.UI.Private.Controls.ISplitButtonTestApi;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.ISwipeTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SwipeTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.ISwipeTestHooks;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Private.Controls.ITeachingTipTestHooksStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TeachingTipTestHooks
                {
                    [default] interface Microsoft.UI.Private.Controls.ITeachingTipTestHooks;
                }
            }
        }
    }
}
