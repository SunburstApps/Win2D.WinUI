<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.System</name>
  </assembly>
  <members>
    <member name="T:Microsoft.System.DispatcherQueue">
      <summary>Manages a prioritized queue on which tasks execute in a serial fashion on a thread.</summary>
    </member>
    <member name="P:Microsoft.System.DispatcherQueue.HasThreadAccess">
      <summary>Gets a value indicating whether the DispatcherQueue has access to the current thread.</summary>
      <returns>
      </returns>
    </member>
    <member name="E:Microsoft.System.DispatcherQueue.ShutdownCompleted">
      <summary>Fires after the **DispatcherQueue** event loop stops which is the last step in the **DispatcherQueue** shutdown process.</summary>
    </member>
    <member name="E:Microsoft.System.DispatcherQueue.ShutdownStarting">
      <summary>Fires before the dispatcher queue initiates an exit from its event loop.</summary>
    </member>
    <member name="M:Microsoft.System.DispatcherQueue.CreateTimer">
      <summary>Creates a **DispatcherQueueTimer** on the **DispatcherQueue** to execute a task periodically after a time interval has elapsed.</summary>
      <returns>An **DispatcherQueueTimer** that can queue tasks on a timed basis to the current **DispatcherQueue**.</returns>
    </member>
    <member name="M:Microsoft.System.DispatcherQueue.GetForCurrentThread">
      <summary>Gets the **DispatcherQueue** associated with the current thread.</summary>
      <returns>A **DispatcherQueue** instance that will execute tasks serially on the current thread.</returns>
    </member>
    <member name="M:Microsoft.System.DispatcherQueue.TryEnqueue(Microsoft.System.DispatcherQueueHandler)">
      <summary>Adds a task to the **DispatcherQueue** which will be executed on the thread  associated with the **DispatcherQueue**.</summary>
      <param name="callback">The task to execute.</param>
      <returns>**True** indicates that the task was added to the queue; **false**, otherwise.</returns>
    </member>
    <member name="M:Microsoft.System.DispatcherQueue.TryEnqueue(Microsoft.System.DispatcherQueuePriority,Microsoft.System.DispatcherQueueHandler)">
      <summary>Adds a task to the **DispatcherQueue** which will be executed on the thread associated with the **DispatcherQueue**.</summary>
      <param name="priority">The priority of the task such as Low, Normal, or High.</param>
      <param name="callback">A delegate to the task to execute.</param>
      <returns>**True** indicates that the task was added to the queue; **false**, otherwise.</returns>
    </member>
    <member name="T:Microsoft.System.DispatcherQueueController">
      <summary>Manages the lifetime of a DispatcherQueue. Provides methods to create and shutdown the **DispatcherQueue**.</summary>
    </member>
    <member name="P:Microsoft.System.DispatcherQueueController.DispatcherQueue">
      <summary>Gets the **DispatcherQueue** associated with this **DispatcherQueueController**.</summary>
      <returns>The **DispatcherQueue** instance that you use to queue tasks that run on a thread.</returns>
    </member>
    <member name="M:Microsoft.System.DispatcherQueueController.CreateOnDedicatedThread">
      <summary>Creates a DispatcherQueue that you can use to run tasks on a dedicated thread.</summary>
      <returns>The created **DispatcherQueueController**.</returns>
    </member>
    <member name="M:Microsoft.System.DispatcherQueueController.ShutdownQueueAsync">
      <summary>Stops the **DispatcherQueue** associated with this **DispatcherQueueController**. Shuts down the thread if the **DispatcherQueueController** was created by **CreateOnDedicatedThread**.</summary>
      <returns>An asynchronous operation which will complete after the queue has dispatched all of its remaining work.</returns>
    </member>
    <member name="T:Microsoft.System.DispatcherQueueHandler">
      <summary>A callback that will be executed on the **DispatcherQueue** thread.</summary>
    </member>
    <member name="T:Microsoft.System.DispatcherQueuePriority">
      <summary>Defines the priority levels that can be given to work assigned to a DispatcherQueue.</summary>
    </member>
    <member name="F:Microsoft.System.DispatcherQueuePriority.High">
      <summary>Work scheduled at **High** priority will be dispatched first, along with other **High** priority System tasks, before processing **Normal** or **Low** priority work.</summary>
    </member>
    <member name="F:Microsoft.System.DispatcherQueuePriority.Low">
      <summary>**Low** priority work will be scheduled when there isn't any other work to process. Work at **Low** priority can be preempted by new incoming **High** and **Normal** priority tasks.</summary>
    </member>
    <member name="F:Microsoft.System.DispatcherQueuePriority.Normal">
      <summary>Work will be dispatched once all **High** priority tasks are dispatched. If a new **High** priority work is scheduled, all new **High** priority tasks are processed before resuming **Normal** tasks. This is the default priority.</summary>
    </member>
    <member name="T:Microsoft.System.DispatcherQueueShutdownStartingEventArgs">
      <summary>Provides the arguments for the ShutdownStarting event.</summary>
    </member>
    <member name="M:Microsoft.System.DispatcherQueueShutdownStartingEventArgs.GetDeferral">
      <summary>Gets a deferral object so that you can use to continue to post work to the **DisbpatcherQueue** until you mark the deferral complete.</summary>
      <returns>The deferral object.</returns>
    </member>
    <member name="T:Microsoft.System.DispatcherQueueTimer">
      <summary>Executes a task in a **DispatcherQueue** periodically after a time interval has elapsed.</summary>
    </member>
    <member name="P:Microsoft.System.DispatcherQueueTimer.Interval">
      <summary>Gets and sets the interval for the timer.</summary>
      <returns>The amount of time before the timer ticks.</returns>
    </member>
    <member name="P:Microsoft.System.DispatcherQueueTimer.IsRepeating">
      <summary>Indicates whether the timer is repeating.</summary>
      <returns>**True** indicates that the timer fires every **DispatcherQueueTimer.Interval**; **false** means that it fires once, after **DispatcherQueueTimer.Interval** elapses.</returns>
    </member>
    <member name="P:Microsoft.System.DispatcherQueueTimer.IsRunning">
      <summary>Indicates whether the timer is currently running.</summary>
      <returns>**True** indicates that the timer is running; otherwise **false**</returns>
    </member>
    <member name="E:Microsoft.System.DispatcherQueueTimer.Tick">
      <summary>Event that fires when the timer **Interval** elapses.</summary>
    </member>
    <member name="M:Microsoft.System.DispatcherQueueTimer.Start">
      <summary>Starts the timer.</summary>
    </member>
    <member name="M:Microsoft.System.DispatcherQueueTimer.Stop">
      <summary>Stops the timer.</summary>
    </member>
  </members>
</doc>

