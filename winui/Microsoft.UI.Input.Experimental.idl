//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.System.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Composition.Experimental.idl";
import "Microsoft.UI.Hosting.Experimental.idl";
import "Windows.Devices.Input.idl";
import "Windows.System.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Input.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedExperimentalContract;
    }
}
namespace Microsoft
{
    namespace System
    {
        runtimeclass DispatcherQueue;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                runtimeclass ExpCompositionContent;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                runtimeclass ExpDesktopWindowBridge;
            }
        }
    }
}
namespace Windows
{
    namespace Devices
    {
        namespace Input
        {
            typedef enum PointerDeviceType PointerDeviceType;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;

        typedef enum VirtualKeyModifiers VirtualKeyModifiers;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass AcceleratorKeyEventArgs;

            runtimeclass CharacterReceivedEventArgs;

            runtimeclass CoreCursor;

            typedef enum CoreInputDeviceTypes CoreInputDeviceTypes;

            typedef enum CoreVirtualKeyStates CoreVirtualKeyStates;

            runtimeclass KeyEventArgs;

            runtimeclass TouchHitTestingEventArgs;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Input
        {
            typedef struct CrossSlideThresholds CrossSlideThresholds;

            typedef enum CrossSlidingState CrossSlidingState;

            typedef enum DraggingState DraggingState;

            typedef enum GestureSettings GestureSettings;

            typedef enum HoldingState HoldingState;

            interface IPointerPointTransform;

            typedef struct ManipulationDelta ManipulationDelta;

            typedef struct ManipulationVelocities ManipulationVelocities;

            typedef enum PointerUpdateKind PointerUpdateKind;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                typedef enum ExpFocusChangedDirection ExpFocusChangedDirection;

                typedef enum ExpFocusNavigationReason ExpFocusNavigationReason;

                typedef enum ExpInputActivationState ExpInputActivationState;

                interface IExpContextMenuKeyEventArgs;

                interface IExpCrossSlidingEventArgs;

                interface IExpDirectManipulation;

                interface IExpDirectManipulationStatics;

                interface IExpDraggingEventArgs;

                interface IExpFocusChangedEventArgs;

                interface IExpFocusController;

                interface IExpFocusControllerStatics;

                interface IExpFocusNavigationHost;

                interface IExpFocusNavigationHostStatics;

                interface IExpFocusNavigationRequest;

                interface IExpFocusNavigationRequestStatics;

                interface IExpFocusNavigationResult;

                interface IExpFocusObserver;

                interface IExpFocusObserverStatics;

                interface IExpGestureRecognizer;

                interface IExpHoldingEventArgs;

                interface IExpIndependentPointerInputObserver;

                interface IExpIndependentPointerInputObserverStatics;

                interface IExpInputActivationListener;

                interface IExpInputActivationListenerActivationChangedEventArgs;

                interface IExpInputActivationListenerPartnerStatics;

                interface IExpInputObject;

                interface IExpInputObjectFactory;

                interface IExpInputSite;

                interface IExpInputSiteStatics;

                interface IExpKeyboardInput;

                interface IExpKeyboardInputStatics;

                interface IExpManipulationCompletedEventArgs;

                interface IExpManipulationInertiaStartingEventArgs;

                interface IExpManipulationStartedEventArgs;

                interface IExpManipulationUpdatedEventArgs;

                interface IExpMouseCapture;

                interface IExpMouseCaptureStatics;

                interface IExpMouseWheelParameters;

                interface IExpNavigateFocusRequestedEventArgs;

                interface IExpPointerCursorController;

                interface IExpPointerCursorControllerStatics;

                interface IExpPointerEventArgs;

                interface IExpPointerInputObserver;

                interface IExpPointerInputObserverFactory;

                interface IExpPointerInputObserverStatics;

                interface IExpPointerPoint;

                interface IExpPointerPointProperties;

                interface IExpPointerPointStatics;

                interface IExpRightTappedEventArgs;

                interface IExpTappedEventArgs;

                interface IExpTouchHitTestingProvider;

                interface IExpTouchHitTestingProviderStatics;

                runtimeclass ExpContextMenuKeyEventArgs;

                runtimeclass ExpCrossSlidingEventArgs;

                runtimeclass ExpDirectManipulation;

                runtimeclass ExpDraggingEventArgs;

                runtimeclass ExpFocusChangedEventArgs;

                runtimeclass ExpFocusController;

                runtimeclass ExpFocusNavigationHost;

                runtimeclass ExpFocusNavigationRequest;

                runtimeclass ExpFocusNavigationResult;

                runtimeclass ExpFocusObserver;

                runtimeclass ExpGestureRecognizer;

                runtimeclass ExpHoldingEventArgs;

                runtimeclass ExpIndependentPointerInputObserver;

                runtimeclass ExpInputActivationListener;

                runtimeclass ExpInputActivationListenerActivationChangedEventArgs;

                runtimeclass ExpInputActivationListenerPartner;

                runtimeclass ExpInputObject;

                runtimeclass ExpInputSite;

                runtimeclass ExpKeyboardInput;

                runtimeclass ExpManipulationCompletedEventArgs;

                runtimeclass ExpManipulationInertiaStartingEventArgs;

                runtimeclass ExpManipulationStartedEventArgs;

                runtimeclass ExpManipulationUpdatedEventArgs;

                runtimeclass ExpMouseCapture;

                runtimeclass ExpMouseWheelParameters;

                runtimeclass ExpNavigateFocusRequestedEventArgs;

                runtimeclass ExpPointerCursorController;

                runtimeclass ExpPointerEventArgs;

                runtimeclass ExpPointerInputObserver;

                runtimeclass ExpPointerPoint;

                runtimeclass ExpPointerPointProperties;

                runtimeclass ExpRightTappedEventArgs;

                runtimeclass ExpTappedEventArgs;

                runtimeclass ExpTouchHitTestingProvider;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Input.Experimental.ExpPointerPoint*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Input.Experimental.ExpPointerPoint*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Input.Experimental.ExpPointerPoint*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpDirectManipulation*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusController*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusNavigationHost*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusObserver*, Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpCrossSlidingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpDraggingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpHoldingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationInertiaStartingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationStartedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationUpdatedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpRightTappedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpTappedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpInputActivationListener*, Microsoft.UI.Input.Experimental.ExpInputActivationListenerActivationChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Microsoft.UI.Input.Experimental.ExpContextMenuKeyEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                enum ExpFocusChangedDirection
                {
                    None     = 0,
                    Next     = 1,
                    Previous = 2,
                    Up       = 3,
                    Down     = 4,
                    Left     = 5,
                    Right    = 6
                };

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                enum ExpFocusNavigationReason
                {
                    Programmatic = 0,
                    Restore      = 1,
                    First        = 2,
                    Last         = 3,
                    Left         = 4,
                    Up           = 5,
                    Right        = 6,
                    Down         = 7
                };

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                enum ExpInputActivationState
                {
                    None                   = 0,
                    Deactivated            = 1,
                    ActivatedNotForeground = 2,
                    ActivatedInForeground  = 3
                };

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpContextMenuKeyEventArgs)]
                [uuid(BBEDECBC-81D4-5EEB-98F6-7F28D8C78A59)]
                interface IExpContextMenuKeyEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpCrossSlidingEventArgs)]
                [uuid(D59CC4A9-C1A2-578B-A258-31724A9E1E94)]
                interface IExpCrossSlidingEventArgs : IInspectable
                {
                    [propget] HRESULT CrossSlidingState([out] [retval] Windows.UI.Input.CrossSlidingState* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpDirectManipulation)]
                [uuid(95D6FA5E-5A5B-5D48-85A5-7E3395BB9700)]
                interface IExpDirectManipulation : IInspectable
                {
                    [eventadd] HRESULT DirectManipulationHitTest([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpDirectManipulation*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DirectManipulationHitTest([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpDirectManipulation)]
                [uuid(6B466E5D-6A91-5301-A2D7-F9A1A29B95F2)]
                interface IExpDirectManipulationStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpDirectManipulation** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpDraggingEventArgs)]
                [uuid(4D8DAA51-23D1-50A4-A693-BA37CB345509)]
                interface IExpDraggingEventArgs : IInspectable
                {
                    [propget] HRESULT DraggingState([out] [retval] Windows.UI.Input.DraggingState* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs)]
                [uuid(714933B6-BA0D-58BC-97A9-BCC89A0B3431)]
                interface IExpFocusChangedEventArgs : IInspectable
                {
                    [propget] HRESULT Direction([out] [retval] Microsoft.UI.Input.Experimental.ExpFocusChangedDirection* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusController)]
                [uuid(FD86E2D9-1550-59BA-8B4A-973C7251CD2C)]
                interface IExpFocusController : IInspectable
                {
                    [propget] HRESULT HasFocus([out] [retval] boolean* value);
                    HRESULT TrySetFocus([out] [retval] boolean* result);
                    HRESULT DepartFocus([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest* request, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationResult** result);
                    [eventadd] HRESULT NavigateFocusRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusController*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT NavigateFocusRequested([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusController)]
                [uuid(F7D9123F-9364-566B-B6F0-19C49ED142B9)]
                interface IExpFocusControllerStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusController** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusNavigationHost)]
                [uuid(49B02D03-B0D8-55DB-985A-48611E47E838)]
                interface IExpFocusNavigationHost : IInspectable
                {
                    HRESULT NavigateFocus([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest* request, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationResult** result);
                    [eventadd] HRESULT TakeFocusRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusNavigationHost*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TakeFocusRequested([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusNavigationHost)]
                [uuid(7634E568-2177-50D9-9D95-18E3CACA2B40)]
                interface IExpFocusNavigationHostStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationHost** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest)]
                [uuid(4DE7C4D0-6F4B-5176-9AE2-346D3318DB4E)]
                interface IExpFocusNavigationRequest : IInspectable
                {
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                    [propget] HRESULT HintRect([out] [retval] Windows.Foundation.Rect* value);
                    [propget] HRESULT Reason([out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationReason* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest)]
                [uuid(1CC934BB-EC15-5FAA-AF75-AFE45D0CE1A9)]
                interface IExpFocusNavigationRequestStatics : IInspectable
                {
                    HRESULT CreateFocusNavigationRequestReasonAndHintRect([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationReason reason, [in] Windows.Foundation.Rect hintRect, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest** result);
                    HRESULT CreateFocusNavigationRequestReasonHintRectAndId([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationReason reason, [in] Windows.Foundation.Rect hintRect, [in] GUID correlationId, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest** result);
                    HRESULT CreateFocusNavigationRequestWithReason([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationReason reason, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusNavigationResult)]
                [uuid(33007903-6CD1-54A2-A5D3-5724EF673C6C)]
                interface IExpFocusNavigationResult : IInspectable
                {
                    [propget] HRESULT WasMoved([out] [retval] boolean* value);
                    [propput] HRESULT WasMoved([in] boolean value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusObserver)]
                [uuid(75B7AFFC-A7F3-5EEC-AABE-B5704F28C7C1)]
                interface IExpFocusObserver : IInspectable
                {
                    [propget] HRESULT HasFocus([out] [retval] boolean* value);
                    [eventadd] HRESULT GotFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusObserver*, Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT LostFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpFocusObserver*, Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpFocusObserver)]
                [uuid(033C2A71-F0AA-589D-ADE4-6AD2800F4E00)]
                interface IExpFocusObserverStatics : IInspectable
                {
                    HRESULT CreateForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusObserver** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpGestureRecognizer)]
                [uuid(D7B6DF55-266F-5EC9-B415-0897BE2496E2)]
                interface IExpGestureRecognizer : IInspectable
                {
                    [propget] HRESULT AutoProcessInertia([out] [retval] boolean* value);
                    [propput] HRESULT AutoProcessInertia([in] boolean value);
                    [propget] HRESULT CrossSlideExact([out] [retval] boolean* value);
                    [propput] HRESULT CrossSlideExact([in] boolean value);
                    [propget] HRESULT CrossSlideHorizontally([out] [retval] boolean* value);
                    [propput] HRESULT CrossSlideHorizontally([in] boolean value);
                    [propget] HRESULT CrossSlideThresholds([out] [retval] Windows.UI.Input.CrossSlideThresholds* value);
                    [propput] HRESULT CrossSlideThresholds([in] Windows.UI.Input.CrossSlideThresholds value);
                    [propget] HRESULT GestureSettings([out] [retval] Windows.UI.Input.GestureSettings* value);
                    [propput] HRESULT GestureSettings([in] Windows.UI.Input.GestureSettings value);
                    [propget] HRESULT IsActive([out] [retval] boolean* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT PivotCenter([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT PivotCenter([in] Windows.Foundation.Point value);
                    [propget] HRESULT PivotRadius([out] [retval] FLOAT* value);
                    [propput] HRESULT PivotRadius([in] FLOAT value);
                    [propget] HRESULT InertiaExpansionDeceleration([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaExpansionDeceleration([in] FLOAT value);
                    [propget] HRESULT InertiaExpansion([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaExpansion([in] FLOAT value);
                    [propget] HRESULT InertiaRotationAngle([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaRotationAngle([in] FLOAT value);
                    [propget] HRESULT InertiaRotationDeceleration([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaRotationDeceleration([in] FLOAT value);
                    [propget] HRESULT InertiaTranslationDeceleration([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaTranslationDeceleration([in] FLOAT value);
                    [propget] HRESULT InertiaTranslationDisplacement([out] [retval] FLOAT* value);
                    [propput] HRESULT InertiaTranslationDisplacement([in] FLOAT value);
                    [propget] HRESULT ManipulationExact([out] [retval] boolean* value);
                    [propput] HRESULT ManipulationExact([in] boolean value);
                    [propget] HRESULT MouseWheelParameters([out] [retval] Microsoft.UI.Input.Experimental.ExpMouseWheelParameters** value);
                    [propget] HRESULT ShowGestureFeedback([out] [retval] boolean* value);
                    [propput] HRESULT ShowGestureFeedback([in] boolean value);
                    HRESULT CanBeDoubleTap([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* value, [out] [retval] boolean* result);
                    HRESULT CompleteGesture();
                    HRESULT ProcessDownEvent([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* value);
                    HRESULT ProcessMoveEvents([in] Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>* value);
                    HRESULT ProcessMouseWheelEvent([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* value, [in] boolean isShiftKeyDown, [in] boolean isControlKeyDown);
                    HRESULT ProcessInertia();
                    HRESULT ProcessUpEvent([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* value);
                    [eventadd] HRESULT Tapped([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpTappedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Tapped([in] EventRegistrationToken token);
                    [eventadd] HRESULT RightTapped([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpRightTappedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RightTapped([in] EventRegistrationToken token);
                    [eventadd] HRESULT Holding([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpHoldingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Holding([in] EventRegistrationToken token);
                    [eventadd] HRESULT Dragging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpDraggingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Dragging([in] EventRegistrationToken token);
                    [eventadd] HRESULT ManipulationStarted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationStartedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ManipulationStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT ManipulationUpdated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationUpdatedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ManipulationUpdated([in] EventRegistrationToken token);
                    [eventadd] HRESULT ManipulationInertiaStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationInertiaStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ManipulationInertiaStarting([in] EventRegistrationToken token);
                    [eventadd] HRESULT ManipulationCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpManipulationCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ManipulationCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT CrossSliding([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpGestureRecognizer*, Microsoft.UI.Input.Experimental.ExpCrossSlidingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CrossSliding([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpHoldingEventArgs)]
                [uuid(54D70587-13CA-5E32-82B6-A5CAA843B12F)]
                interface IExpHoldingEventArgs : IInspectable
                {
                    [propget] HRESULT HoldingState([out] [retval] Windows.UI.Input.HoldingState* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpIndependentPointerInputObserver)]
                [uuid(197CCC46-6940-56AA-BC0B-DB9BFF9D5F85)]
                interface IExpIndependentPointerInputObserver : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpIndependentPointerInputObserver)]
                [uuid(4A2AA824-939A-5DA6-B46D-4706A932D53B)]
                interface IExpIndependentPointerInputObserverStatics : IInspectable
                {
                    HRESULT CreateForVisual([in] Microsoft.UI.Composition.Visual* visual, [in] Windows.UI.Core.CoreInputDeviceTypes deviceTypes, [out] [retval] Microsoft.UI.Input.Experimental.ExpIndependentPointerInputObserver** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputActivationListener)]
                [uuid(9D00E33F-B3AF-566A-AEBF-4D62A28D10D3)]
                interface IExpInputActivationListener : IInspectable
                {
                    [propget] HRESULT State([out] [retval] Microsoft.UI.Input.Experimental.ExpInputActivationState* value);
                    [eventadd] HRESULT InputActivationChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpInputActivationListener*, Microsoft.UI.Input.Experimental.ExpInputActivationListenerActivationChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT InputActivationChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputActivationListenerActivationChangedEventArgs)]
                [uuid(DC66BABF-5945-574F-B045-EFBA91BAAA44)]
                interface IExpInputActivationListenerActivationChangedEventArgs : IInspectable
                {
                    [propget] HRESULT State([out] [retval] Microsoft.UI.Input.Experimental.ExpInputActivationState* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputActivationListenerPartner)]
                [uuid(12CB1689-BE6F-5F92-AAA3-BA899BD27BDF)]
                interface IExpInputActivationListenerPartnerStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] IInspectable** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputObject)]
                [uuid(D03CB357-5BB6-59DA-80B2-9CD42976D4AB)]
                interface IExpInputObject : IInspectable
                {
                    [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
                    [propget] HRESULT InputSite([out] [retval] Microsoft.UI.Input.Experimental.ExpInputSite** value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputObject)]
                [uuid(759669EB-EA25-551B-9B8A-4FED55C93C8D)]
                interface IExpInputObjectFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputSite)]
                [uuid(6B707B95-BBE8-5131-A6D7-B11C26CB7CB6)]
                interface IExpInputSite : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpInputSite)]
                [uuid(39750836-9503-5891-BAB2-33B8B7BCFC58)]
                interface IExpInputSiteStatics : IInspectable
                {
                    HRESULT GetOrCreateForContent([in] Microsoft.UI.Composition.Experimental.ExpCompositionContent* content, [out] [retval] Microsoft.UI.Input.Experimental.ExpInputSite** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpKeyboardInput)]
                [uuid(CE01B259-E442-565B-930E-CD9F046C5507)]
                interface IExpKeyboardInput : IInspectable
                {
                    [propget] HRESULT CurrentKeyEventDeviceId([out] [retval] HSTRING* value);
                    HRESULT GetCurrentKeyState([in] Windows.System.VirtualKey virtualKey, [out] [retval] Windows.UI.Core.CoreVirtualKeyStates* result);
                    HRESULT GetKeyState([in] Windows.System.VirtualKey virtualKey, [out] [retval] Windows.UI.Core.CoreVirtualKeyStates* result);
                    [eventadd] HRESULT AcceleratorKeyActivated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.AcceleratorKeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AcceleratorKeyActivated([in] EventRegistrationToken token);
                    [eventadd] HRESULT CharacterReceived([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.CharacterReceivedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CharacterReceived([in] EventRegistrationToken token);
                    [eventadd] HRESULT KeyDown([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT KeyDown([in] EventRegistrationToken token);
                    [eventadd] HRESULT KeyUp([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT KeyUp([in] EventRegistrationToken token);
                    [eventadd] HRESULT SysKeyDown([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SysKeyDown([in] EventRegistrationToken token);
                    [eventadd] HRESULT SysKeyUp([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Windows.UI.Core.KeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SysKeyUp([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuKey([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpKeyboardInput*, Microsoft.UI.Input.Experimental.ExpContextMenuKeyEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuKey([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpKeyboardInput)]
                [uuid(8884DED6-FAB4-5EC5-BABF-30B531672C30)]
                interface IExpKeyboardInputStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpKeyboardInput** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpManipulationCompletedEventArgs)]
                [uuid(8B968AC2-8EA5-5CD8-8485-FFA92388110E)]
                interface IExpManipulationCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpManipulationInertiaStartingEventArgs)]
                [uuid(AC4EBF4C-FC52-50C5-9A9B-D41698BA1483)]
                interface IExpManipulationInertiaStartingEventArgs : IInspectable
                {
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpManipulationStartedEventArgs)]
                [uuid(70CB834C-0A99-5723-84CE-827C555FB8CA)]
                interface IExpManipulationStartedEventArgs : IInspectable
                {
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpManipulationUpdatedEventArgs)]
                [uuid(3C034BD7-256F-54CC-9A0D-20A564BDDE79)]
                interface IExpManipulationUpdatedEventArgs : IInspectable
                {
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpMouseCapture)]
                [uuid(82919E2B-4D4B-590B-A6DD-5ACEBB8D6411)]
                interface IExpMouseCapture : IInspectable
                {
                    [propget] HRESULT HasCapture([out] [retval] boolean* value);
                    HRESULT TryReleaseCapture([out] [retval] boolean* result);
                    HRESULT TrySetCapture([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpMouseCapture)]
                [uuid(51EC13D2-EA81-593A-BB3F-AD383066C229)]
                interface IExpMouseCaptureStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpMouseCapture** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpMouseWheelParameters)]
                [uuid(53C7EFFD-7E8B-5B58-B3BF-9DA0DCD05A5F)]
                interface IExpMouseWheelParameters : IInspectable
                {
                    [propget] HRESULT CharTranslation([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT CharTranslation([in] Windows.Foundation.Point value);
                    [propget] HRESULT DeltaScale([out] [retval] FLOAT* value);
                    [propput] HRESULT DeltaScale([in] FLOAT value);
                    [propget] HRESULT DeltaRotationAngle([out] [retval] FLOAT* value);
                    [propput] HRESULT DeltaRotationAngle([in] FLOAT value);
                    [propget] HRESULT PageTranslation([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT PageTranslation([in] Windows.Foundation.Point value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs)]
                [uuid(563B3F71-ECA0-5652-B748-13C6D6794CEE)]
                interface IExpNavigateFocusRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Request([out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest** value);
                    [propget] HRESULT WasMoved([out] [retval] boolean* value);
                    [propput] HRESULT WasMoved([in] boolean value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerCursorController)]
                [uuid(46913798-802B-56B5-8B65-CA03154B00BA)]
                interface IExpPointerCursorController : IInspectable
                {
                    [propget] HRESULT Cursor([out] [retval] Windows.UI.Core.CoreCursor** value);
                    [propput] HRESULT Cursor([in] Windows.UI.Core.CoreCursor* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerCursorController)]
                [uuid(18EDF0FC-E558-51AF-B099-6AA410CA0A92)]
                interface IExpPointerCursorControllerStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpPointerCursorController** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerEventArgs)]
                [uuid(B84198C5-2A2F-5591-AC66-B35EFBB8FC52)]
                interface IExpPointerEventArgs : IInspectable
                {
                    [propget] HRESULT CurrentPoint([out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPoint** value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT KeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    HRESULT GetIntermediatePoints([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerInputObserver)]
                [uuid(7A25B08F-75FF-5218-B905-F9FF01FD4CFA)]
                interface IExpPointerInputObserver : IInspectable
                {
                    [eventadd] HRESULT PointerCaptureLost([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerCaptureLost([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerEntered([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerEntered([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerExited([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerExited([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerMoved([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerMoved([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerPressed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerPressed([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerReleased([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerReleased([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerRoutedAway([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerRoutedAway([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerRoutedReleased([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerRoutedReleased([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerRoutedTo([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerRoutedTo([in] EventRegistrationToken token);
                    [eventadd] HRESULT PointerWheelChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpPointerInputObserver*, Microsoft.UI.Input.Experimental.ExpPointerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PointerWheelChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerInputObserver)]
                [uuid(E34C0297-F73B-5D7D-87EB-4791EAB2F583)]
                interface IExpPointerInputObserverFactory : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerInputObserver)]
                [uuid(DC8D2989-AD28-58AA-91AC-17B3CF8BCD59)]
                interface IExpPointerInputObserverStatics : IInspectable
                {
                    HRESULT CreateForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpPointerInputObserver** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerPoint)]
                [uuid(97CB6935-34A2-5934-ACC8-F00AB08736EC)]
                interface IExpPointerPoint : IInspectable
                {
                    [propget] HRESULT FrameId([out] [retval] UINT32* value);
                    [propget] HRESULT IsInContact([out] [retval] boolean* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT PointerId([out] [retval] UINT32* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Properties([out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPointProperties** value);
                    [propget] HRESULT RawPosition([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Timestamp([out] [retval] UINT64* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerPointProperties)]
                [uuid(4E6E6AD8-8A8E-5441-A281-FEBD72D1CE6A)]
                interface IExpPointerPointProperties : IInspectable
                {
                    [propget] HRESULT ContactRect([out] [retval] Windows.Foundation.Rect* value);
                    [propget] HRESULT ContactRectRaw([out] [retval] Windows.Foundation.Rect* value);
                    [propget] HRESULT IsBarrelButtonPressed([out] [retval] boolean* value);
                    [propget] HRESULT IsCanceled([out] [retval] boolean* value);
                    [propget] HRESULT IsEraser([out] [retval] boolean* value);
                    [propget] HRESULT IsHorizontalMouseWheel([out] [retval] boolean* value);
                    [propget] HRESULT IsInRange([out] [retval] boolean* value);
                    [propget] HRESULT IsInverted([out] [retval] boolean* value);
                    [propget] HRESULT IsLeftButtonPressed([out] [retval] boolean* value);
                    [propget] HRESULT IsMiddleButtonPressed([out] [retval] boolean* value);
                    [propget] HRESULT IsPrimary([out] [retval] boolean* value);
                    [propget] HRESULT IsRightButtonPressed([out] [retval] boolean* value);
                    [propget] HRESULT IsXButton1Pressed([out] [retval] boolean* value);
                    [propget] HRESULT IsXButton2Pressed([out] [retval] boolean* value);
                    [propget] HRESULT MouseWheelDelta([out] [retval] INT32* value);
                    [propget] HRESULT Orientation([out] [retval] FLOAT* value);
                    [propget] HRESULT PointerUpdateKind([out] [retval] Windows.UI.Input.PointerUpdateKind* value);
                    [propget] HRESULT Pressure([out] [retval] FLOAT* value);
                    [propget] HRESULT TouchConfidence([out] [retval] boolean* value);
                    [propget] HRESULT Twist([out] [retval] FLOAT* value);
                    [propget] HRESULT XTilt([out] [retval] FLOAT* value);
                    [propget] HRESULT YTilt([out] [retval] FLOAT* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpPointerPoint)]
                [uuid(BBBD3D96-00ED-59A2-9FEC-59CABCAF270B)]
                interface IExpPointerPointStatics : IInspectable
                {
                    HRESULT GetCurrentPoint([in] UINT32 pointerId, [out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPoint** result);
                    HRESULT GetCurrentPointTransformed([in] UINT32 pointerId, [in] Windows.UI.Input.IPointerPointTransform* transform, [out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPoint** result);
                    HRESULT GetIntermediatePoints([in] UINT32 pointerId, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>** result);
                    HRESULT GetIntermediatePointsTransformed([in] UINT32 pointerId, [in] Windows.UI.Input.IPointerPointTransform* transform, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpRightTappedEventArgs)]
                [uuid(C3872670-8E4D-52C1-91A9-73C90E0BD00D)]
                interface IExpRightTappedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpTappedEventArgs)]
                [uuid(0A8DCCE9-6FFA-5FC5-8B66-6ED7A004DFF8)]
                interface IExpTappedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT TapCount([out] [retval] UINT32* value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpTouchHitTestingProvider)]
                [uuid(E66AECA3-F13B-50FC-A253-4EA22E903B17)]
                interface IExpTouchHitTestingProvider : IInspectable
                {
                    [eventadd] HRESULT TouchHitTestRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Input.Experimental.ExpTouchHitTestingProvider*, Windows.UI.Core.TouchHitTestingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TouchHitTestRequested([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Input.Experimental.ExpTouchHitTestingProvider)]
                [uuid(FBFC29FD-F441-5D62-99FA-84BE9ABDC8AD)]
                interface IExpTouchHitTestingProviderStatics : IInspectable
                {
                    HRESULT GetForInputSite([in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite, [out] [retval] Microsoft.UI.Input.Experimental.ExpTouchHitTestingProvider** result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpContextMenuKeyEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpContextMenuKeyEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpCrossSlidingEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpCrossSlidingEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpDirectManipulationStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpDirectManipulation : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpDirectManipulation;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpDraggingEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpDraggingEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpFocusChangedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusChangedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpFocusControllerStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpFocusController : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusController;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpFocusNavigationHostStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpFocusNavigationHost : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusNavigationHost;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpFocusNavigationRequestStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpFocusNavigationRequest
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusNavigationRequest;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpFocusNavigationResult
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusNavigationResult;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpFocusObserverStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpFocusObserver : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpFocusObserver;
                }

                [activatable(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ExpGestureRecognizer
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpGestureRecognizer;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpHoldingEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpHoldingEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpIndependentPointerInputObserverStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpIndependentPointerInputObserver : Microsoft.UI.Input.Experimental.ExpPointerInputObserver
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpIndependentPointerInputObserver;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpInputActivationListener
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpInputActivationListener;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpInputActivationListenerActivationChangedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpInputActivationListenerActivationChangedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpInputActivationListenerPartnerStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpInputActivationListenerPartner
                {
                }

                [composable(Microsoft.UI.Input.Experimental.IExpInputObjectFactory, public, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpInputObject;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpInputSiteStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpInputSite
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpInputSite;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpKeyboardInputStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpKeyboardInput : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpKeyboardInput;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpManipulationCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpManipulationCompletedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpManipulationInertiaStartingEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpManipulationInertiaStartingEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpManipulationStartedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpManipulationStartedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpManipulationUpdatedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpManipulationUpdatedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpMouseCaptureStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpMouseCapture : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpMouseCapture;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpMouseWheelParameters
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpMouseWheelParameters;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpNavigateFocusRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpNavigateFocusRequestedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpPointerCursorControllerStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpPointerCursorController : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpPointerCursorController;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpPointerEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpPointerEventArgs;
                }

                [composable(Microsoft.UI.Input.Experimental.IExpPointerInputObserverFactory, public, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpPointerInputObserverStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpPointerInputObserver : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpPointerInputObserver;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpPointerPointStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpPointerPoint
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpPointerPoint;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpPointerPointProperties
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpPointerPointProperties;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpRightTappedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpRightTappedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExpTappedEventArgs
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpTappedEventArgs;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Input.Experimental.IExpTouchHitTestingProviderStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpTouchHitTestingProvider : Microsoft.UI.Input.Experimental.ExpInputObject
                {
                    [default] interface Microsoft.UI.Input.Experimental.IExpTouchHitTestingProvider;
                }
            }
        }
    }
}
