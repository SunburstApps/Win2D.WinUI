//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Microsoft.UI.Private.Controls.idl";
import "Microsoft.UI.Text.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Controls.Primitives.idl";
import "Microsoft.UI.Xaml.Data.idl";
import "Microsoft.UI.Xaml.Documents.idl";
import "Microsoft.UI.Xaml.Input.idl";
import "Microsoft.UI.Xaml.Interop.idl";
import "Microsoft.UI.Xaml.Media.idl";
import "Microsoft.UI.Xaml.Media.Animation.idl";
import "Microsoft.UI.Xaml.Navigation.idl";
import "Microsoft.Web.WebView2.Core.idl";
import "Windows.ApplicationModel.Contacts.idl";
import "Windows.ApplicationModel.DataTransfer.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Globalization.idl";
import "Windows.Globalization.NumberFormatting.idl";
import "Windows.Media.Capture.idl";
import "Windows.Media.Casting.idl";
import "Windows.Media.Core.idl";
import "Windows.Media.Playback.idl";
import "Windows.Media.Protection.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Text.idl";
import "Windows.UI.Xaml.Interop.idl";
import "Windows.Web.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass CompositionAnimation;

            runtimeclass CompositionBrush;

            runtimeclass CompositionObject;

            runtimeclass CompositionPropertySet;

            runtimeclass Compositor;

            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpIndependentPointerInputObserver;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Private
        {
            namespace Controls
            {
                interface IRefreshInfoProvider;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Text
        {
            runtimeclass RichEditTextDocument;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass BringIntoViewRequestedEventArgs;

            runtimeclass BrushTransition;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    runtimeclass AppBarButtonTemplateSettings;

                    runtimeclass AppBarTemplateSettings;

                    runtimeclass AppBarToggleButtonTemplateSettings;

                    runtimeclass CalendarViewTemplateSettings;

                    runtimeclass ColorSpectrum;

                    runtimeclass ComboBoxTemplateSettings;

                    runtimeclass CommandBarTemplateSettings;

                    runtimeclass FlyoutBase;

                    typedef enum GeneratorDirection GeneratorDirection;

                    typedef struct GeneratorPosition GeneratorPosition;

                    runtimeclass GridViewItemTemplateSettings;

                    typedef enum GroupHeaderPlacement GroupHeaderPlacement;

                    interface IScrollSnapPointsInfo;

                    runtimeclass ItemsChangedEventArgs;

                    delegate ItemsChangedEventHandler;

                    runtimeclass ListViewItemTemplateSettings;

                    runtimeclass MenuFlyoutItemTemplateSettings;

                    runtimeclass MenuFlyoutPresenterTemplateSettings;

                    typedef enum PlacementMode PlacementMode;

                    runtimeclass ProgressBarTemplateSettings;

                    runtimeclass ProgressRingTemplateSettings;

                    runtimeclass Scroller;

                    runtimeclass SelectorItem;

                    typedef enum SliderSnapsTo SliderSnapsTo;

                    typedef enum SnapPointsAlignment SnapPointsAlignment;

                    runtimeclass SplitViewTemplateSettings;

                    typedef enum TickPlacement TickPlacement;

                    runtimeclass ToggleSwitchTemplateSettings;

                    runtimeclass ToolTipTemplateSettings;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            typedef struct CornerRadius CornerRadius;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Data
            {
                interface ICustomPropertyProvider;

                interface INotifyPropertyChanged;

                interface IValueConverter;

                runtimeclass ItemIndexRange;

                typedef struct LoadMoreItemsResult LoadMoreItemsResult;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DataTemplate;

            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;

            delegate DependencyPropertyChangedEventHandler;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Documents
            {
                runtimeclass BlockCollection;

                runtimeclass InlineCollection;

                runtimeclass TextHighlighter;

                runtimeclass TextPointer;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DragEventArgs;

            delegate DragEventHandler;

            typedef struct Duration Duration;

            typedef enum ElementSoundMode ElementSoundMode;

            delegate ExceptionRoutedEventHandler;

            runtimeclass FrameworkElement;

            typedef struct GridLength GridLength;

            typedef enum HorizontalAlignment HorizontalAlignment;

            interface IElementFactory;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                runtimeclass CharacterReceivedRoutedEventArgs;

                runtimeclass DoubleTappedRoutedEventArgs;

                runtimeclass HoldingRoutedEventArgs;

                interface ICommand;

                runtimeclass InputScope;

                runtimeclass KeyRoutedEventArgs;

                typedef enum KeyboardNavigationMode KeyboardNavigationMode;

                runtimeclass ManipulationCompletedRoutedEventArgs;

                runtimeclass ManipulationDeltaRoutedEventArgs;

                runtimeclass ManipulationInertiaStartingRoutedEventArgs;

                runtimeclass ManipulationStartedRoutedEventArgs;

                runtimeclass ManipulationStartingRoutedEventArgs;

                runtimeclass PointerRoutedEventArgs;

                runtimeclass RightTappedRoutedEventArgs;

                runtimeclass TappedRoutedEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                interface INotifyCollectionChanged;

                runtimeclass NotifyCollectionChangedEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            typedef enum LineStackingStrategy LineStackingStrategy;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Animation
                {
                    runtimeclass ConnectedAnimation;

                    runtimeclass NavigationTransitionInfo;

                    runtimeclass TransitionCollection;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                typedef enum AudioCategory AudioCategory;

                typedef enum AudioDeviceType AudioDeviceType;

                runtimeclass Brush;

                typedef enum FastPlayFallbackBehaviour FastPlayFallbackBehaviour;

                runtimeclass FontFamily;

                runtimeclass Geometry;

                runtimeclass ImageBrush;

                runtimeclass ImageSource;

                typedef enum MediaCanPlayResponse MediaCanPlayResponse;

                typedef enum MediaElementState MediaElementState;

                runtimeclass MediaTransportControlsThumbnailRequestedEventArgs;

                runtimeclass PartialMediaFailureDetectedEventArgs;

                delegate RateChangedRoutedEventHandler;

                runtimeclass SolidColorBrush;

                typedef enum Stereo3DVideoPackingMode Stereo3DVideoPackingMode;

                typedef enum Stereo3DVideoRenderMode Stereo3DVideoRenderMode;

                typedef enum Stretch Stretch;

                runtimeclass TimelineMarkerCollection;

                delegate TimelineMarkerRoutedEventHandler;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Navigation
            {
                runtimeclass FrameNavigationOptions;

                delegate NavigatedEventHandler;

                runtimeclass NavigatingCancelEventArgs;

                delegate NavigatingCancelEventHandler;

                typedef enum NavigationCacheMode NavigationCacheMode;

                runtimeclass NavigationEventArgs;

                delegate NavigationFailedEventHandler;

                delegate NavigationStoppedEventHandler;

                runtimeclass PageStackEntry;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            typedef enum OpticalMarginAlignment OpticalMarginAlignment;

            apicontract PrivateApiContract;

            runtimeclass RoutedEventArgs;

            delegate RoutedEventHandler;

            runtimeclass Style;

            typedef enum TextAlignment TextAlignment;

            typedef enum TextLineBounds TextLineBounds;

            typedef enum TextReadingOrder TextReadingOrder;

            typedef enum TextTrimming TextTrimming;

            typedef enum TextWrapping TextWrapping;

            typedef struct Thickness Thickness;

            runtimeclass UIElement;

            typedef enum VerticalAlignment VerticalAlignment;

            typedef enum Visibility Visibility;

            apicontract WinUIContract;
        }
    }
}
namespace Microsoft
{
    namespace Web
    {
        namespace WebView2
        {
            namespace Core
            {
                runtimeclass CoreWebView2;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Contacts
        {
            runtimeclass Contact;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace DataTransfer
        {
            runtimeclass DataPackage;

            typedef enum DataPackageOperation DataPackageOperation;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;

            interface IVectorChangedEventArgs;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        runtimeclass Deferral;

        interface IAsyncAction;

        interface IClosable;

        interface IStringable;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Vector2 Vector2;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;

        typedef struct Size Size;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Globalization
    {
        typedef enum DayOfWeek DayOfWeek;
    }
}
namespace Windows
{
    namespace Globalization
    {
        namespace NumberFormatting
        {
            interface INumberFormatter2;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            runtimeclass MediaCapture;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Casting
        {
            runtimeclass CastingSource;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Core
        {
            interface IMediaSource;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Playback
        {
            interface IMediaPlaybackSource;

            runtimeclass MediaPlayer;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Protection
        {
            runtimeclass MediaProtectionManager;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            typedef enum CoreInputDeviceTypes CoreInputDeviceTypes;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Text
        {
            typedef enum FontStretch FontStretch;

            typedef enum FontStyle FontStyle;

            typedef struct FontWeight FontWeight;

            typedef enum TextDecorations TextDecorations;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                typedef struct TypeName TypeName;
            }
        }
    }
}
namespace Windows
{
    namespace Web
    {
        typedef enum WebErrorStatus WebErrorStatus;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                typedef enum AnimationContext AnimationContext;

                typedef enum AnimationMode AnimationMode;

                typedef enum AppBarClosedDisplayMode AppBarClosedDisplayMode;

                typedef enum AutoSuggestionBoxTextChangeReason AutoSuggestionBoxTextChangeReason;

                typedef enum BackgroundSizing BackgroundSizing;

                typedef enum CalendarViewDisplayMode CalendarViewDisplayMode;

                typedef enum CalendarViewSelectionMode CalendarViewSelectionMode;

                typedef enum CandidateWindowAlignment CandidateWindowAlignment;

                typedef enum ChainingMode ChainingMode;

                typedef enum CharacterCasing CharacterCasing;

                typedef enum ClickMode ClickMode;

                typedef enum ColorPickerHsvChannel ColorPickerHsvChannel;

                typedef enum ColorSpectrumComponents ColorSpectrumComponents;

                typedef enum ColorSpectrumShape ColorSpectrumShape;

                typedef enum ComboBoxSelectionChangedTrigger ComboBoxSelectionChangedTrigger;

                typedef enum CommandBarDefaultLabelPosition CommandBarDefaultLabelPosition;

                typedef enum CommandBarDynamicOverflowAction CommandBarDynamicOverflowAction;

                typedef enum CommandBarLabelPosition CommandBarLabelPosition;

                typedef enum CommandBarOverflowButtonVisibility CommandBarOverflowButtonVisibility;

                typedef enum ContentDialogButton ContentDialogButton;

                typedef enum ContentDialogPlacement ContentDialogPlacement;

                typedef enum ContentDialogResult ContentDialogResult;

                typedef enum ContentOrientation ContentOrientation;

                typedef enum DisabledFormattingAccelerators DisabledFormattingAccelerators;

                typedef enum ElementRealizationOptions ElementRealizationOptions;

                typedef enum ElementType ElementType;

                typedef enum FlowLayoutLineAlignment FlowLayoutLineAlignment;

                typedef enum IncrementalLoadingTrigger IncrementalLoadingTrigger;

                typedef enum IndexSearchHint IndexSearchHint;

                typedef enum InputKind InputKind;

                typedef enum InputValidationErrorEventAction InputValidationErrorEventAction;

                typedef enum InputValidationKind InputValidationKind;

                typedef enum InputValidationMode InputValidationMode;

                typedef enum InteractionState InteractionState;

                typedef enum ItemsUpdatingScrollMode ItemsUpdatingScrollMode;

                typedef enum KeyNavigationAction KeyNavigationAction;

                typedef enum LightDismissOverlayMode LightDismissOverlayMode;

                typedef enum ListPickerFlyoutSelectionMode ListPickerFlyoutSelectionMode;

                typedef enum ListViewReorderMode ListViewReorderMode;

                typedef enum ListViewSelectionMode ListViewSelectionMode;

                typedef enum NavigationViewBackButtonVisible NavigationViewBackButtonVisible;

                typedef enum NavigationViewDisplayMode NavigationViewDisplayMode;

                typedef enum NavigationViewOverflowLabelMode NavigationViewOverflowLabelMode;

                typedef enum NavigationViewPaneDisplayMode NavigationViewPaneDisplayMode;

                typedef enum NavigationViewSelectionFollowsFocus NavigationViewSelectionFollowsFocus;

                typedef enum NavigationViewShoulderNavigationEnabled NavigationViewShoulderNavigationEnabled;

                typedef enum NumberBoxSpinButtonPlacementMode NumberBoxSpinButtonPlacementMode;

                typedef enum NumberBoxValidationMode NumberBoxValidationMode;

                typedef enum Orientation Orientation;

                typedef enum PanelScrollingDirection PanelScrollingDirection;

                typedef enum ParallaxSourceOffsetKind ParallaxSourceOffsetKind;

                typedef enum PasswordRevealMode PasswordRevealMode;

                typedef enum PivotHeaderFocusVisualPlacement PivotHeaderFocusVisualPlacement;

                typedef enum PivotSlideInAnimationGroup PivotSlideInAnimationGroup;

                typedef enum RailingMode RailingMode;

                typedef enum ReferenceIdentity ReferenceIdentity;

                typedef enum RefreshPullDirection RefreshPullDirection;

                typedef enum RefreshVisualizerOrientation RefreshVisualizerOrientation;

                typedef enum RefreshVisualizerState RefreshVisualizerState;

                typedef enum RequiresPointer RequiresPointer;

                typedef enum RichEditClipboardFormat RichEditClipboardFormat;

                typedef enum ScrollBarVisibility ScrollBarVisibility;

                typedef enum ScrollIntoViewAlignment ScrollIntoViewAlignment;

                typedef enum ScrollMode ScrollMode;

                typedef enum SelectionMode SelectionMode;

                typedef enum SnapPointsMode SnapPointsMode;

                typedef enum SnapPointsType SnapPointsType;

                typedef enum SplitViewDisplayMode SplitViewDisplayMode;

                typedef enum SplitViewPanePlacement SplitViewPanePlacement;

                typedef enum StretchDirection StretchDirection;

                typedef enum SwipeBehaviorOnInvoked SwipeBehaviorOnInvoked;

                typedef enum SwipeMode SwipeMode;

                typedef enum Symbol Symbol;

                typedef enum TabViewCloseButtonOverlayMode TabViewCloseButtonOverlayMode;

                typedef enum TabViewWidthMode TabViewWidthMode;

                typedef enum TeachingTipCloseReason TeachingTipCloseReason;

                typedef enum TeachingTipHeroContentPlacementMode TeachingTipHeroContentPlacementMode;

                typedef enum TeachingTipPlacementMode TeachingTipPlacementMode;

                typedef enum TeachingTipTailVisibility TeachingTipTailVisibility;

                typedef enum TreeViewSelectionMode TreeViewSelectionMode;

                typedef enum TwoPaneViewMode TwoPaneViewMode;

                typedef enum TwoPaneViewPriority TwoPaneViewPriority;

                typedef enum TwoPaneViewTallModeConfiguration TwoPaneViewTallModeConfiguration;

                typedef enum TwoPaneViewWideModeConfiguration TwoPaneViewWideModeConfiguration;

                typedef enum UniformGridLayoutItemsJustification UniformGridLayoutItemsJustification;

                typedef enum UniformGridLayoutItemsStretch UniformGridLayoutItemsStretch;

                typedef enum VirtualizationMode VirtualizationMode;

                typedef enum WebView2ProcessFailedKind WebView2ProcessFailedKind;

                typedef enum ZoomMode ZoomMode;

                typedef struct EstimationReference EstimationReference;

                typedef struct FlowLayoutAnchorInfo FlowLayoutAnchorInfo;

                typedef struct LayoutReference LayoutReference;

                typedef struct ScrollInfo ScrollInfo;

                typedef struct ZoomInfo ZoomInfo;

                delegate CalendarViewDayItemChangingEventHandler;

                delegate CleanUpVirtualizedItemEventHandler;

                delegate ContextMenuOpeningEventHandler;

                delegate DragItemsStartingEventHandler;

                delegate ElementAnimationCompleted;

                delegate HubSectionHeaderClickEventHandler;

                delegate ItemClickEventHandler;

                delegate ListViewItemToKeyHandler;

                delegate ListViewKeyToItemHandler;

                delegate SectionsInViewChangedEventHandler;

                delegate SelectionChangedEventHandler;

                delegate SemanticZoomViewChangedEventHandler;

                delegate TextChangedEventHandler;

                delegate TextControlPasteEventHandler;

                interface IAnchorRequestedEventArgs;

                interface IAnimatedVisual;

                interface IAnimatedVisualPlayer;

                interface IAnimatedVisualPlayerFactory;

                interface IAnimatedVisualPlayerStatics;

                interface IAnimatedVisualSource;

                interface IAppBar;

                interface IAppBarButton;

                interface IAppBarButtonFactory;

                interface IAppBarButtonStatics;

                interface IAppBarElementContainer;

                interface IAppBarElementContainerFactory;

                interface IAppBarElementContainerStatics;

                interface IAppBarFactory;

                interface IAppBarOverrides;

                interface IAppBarSeparator;

                interface IAppBarSeparatorFactory;

                interface IAppBarSeparatorStatics;

                interface IAppBarStatics;

                interface IAppBarToggleButton;

                interface IAppBarToggleButtonFactory;

                interface IAppBarToggleButtonStatics;

                interface IApplicationViewSpanningRects;

                interface IAutoSuggestBox;

                interface IAutoSuggestBoxQuerySubmittedEventArgs;

                interface IAutoSuggestBoxStatics;

                interface IAutoSuggestBoxSuggestionChosenEventArgs;

                interface IAutoSuggestBoxTextChangedEventArgs;

                interface IAutoSuggestBoxTextChangedEventArgsStatics;

                interface IBitmapIcon;

                interface IBitmapIconFactory;

                interface IBitmapIconSource;

                interface IBitmapIconSourceFactory;

                interface IBitmapIconSourceStatics;

                interface IBitmapIconStatics;

                interface IBorder;

                interface IBorderStatics;

                interface IButton;

                interface IButtonFactory;

                interface IButtonStatics;

                interface ICalendarDatePicker;

                interface ICalendarDatePickerDateChangedEventArgs;

                interface ICalendarDatePickerFactory;

                interface ICalendarDatePickerStatics;

                interface ICalendarView;

                interface ICalendarViewDayItem;

                interface ICalendarViewDayItemChangingEventArgs;

                interface ICalendarViewDayItemFactory;

                interface ICalendarViewDayItemStatics;

                interface ICalendarViewFactory;

                interface ICalendarViewSelectedDatesChangedEventArgs;

                interface ICalendarViewStatics;

                interface ICandidateWindowBoundsChangedEventArgs;

                interface ICanvas;

                interface ICanvasFactory;

                interface ICanvasStatics;

                interface ICaptureElement;

                interface ICaptureElementStatics;

                interface ICheckBox;

                interface ICheckBoxFactory;

                interface IChoosingGroupHeaderContainerEventArgs;

                interface IChoosingItemContainerEventArgs;

                interface ICleanUpVirtualizedItemEventArgs;

                interface IColorChangedEventArgs;

                interface IColorPicker;

                interface IColorPickerFactory;

                interface IColorPickerStatics;

                interface IColumnDefinition;

                interface IColumnDefinitionStatics;

                interface IComboBox;

                interface IComboBoxFactory;

                interface IComboBoxItem;

                interface IComboBoxItemFactory;

                interface IComboBoxOverrides;

                interface IComboBoxStatics;

                interface IComboBoxTextSubmittedEventArgs;

                interface ICommandBar;

                interface ICommandBarElement;

                interface ICommandBarFactory;

                interface ICommandBarFlyout;

                interface ICommandBarFlyoutFactory;

                interface ICommandBarLabeledElement;

                interface ICommandBarOverflowElement;

                interface ICommandBarOverflowPresenter;

                interface ICommandBarOverflowPresenterFactory;

                interface ICommandBarStatics;

                interface ICommandBarStaticsPrivate;

                interface IContainerContentChangingEventArgs;

                interface IContentControl;

                interface IContentControlFactory;

                interface IContentControlOverrides;

                interface IContentControlPrivate;

                interface IContentControlStatics;

                interface IContentDialog;

                interface IContentDialogButtonClickDeferral;

                interface IContentDialogButtonClickEventArgs;

                interface IContentDialogClosedEventArgs;

                interface IContentDialogClosingDeferral;

                interface IContentDialogClosingEventArgs;

                interface IContentDialogFactory;

                interface IContentDialogOpenedEventArgs;

                interface IContentDialogStatics;

                interface IContentPresenter;

                interface IContentPresenterFactory;

                interface IContentPresenterOverrides;

                interface IContentPresenterStatics;

                interface IContextMenuEventArgs;

                interface IControl;

                interface IControlFactory;

                interface IControlOverrides;

                interface IControlProtected;

                interface IControlStatics;

                interface IControlTemplate;

                interface IDataTemplateSelector;

                interface IDataTemplateSelectorFactory;

                interface IDataTemplateSelectorOverrides;

                interface IDatePickedEventArgs;

                interface IDatePicker;

                interface IDatePickerFactory;

                interface IDatePickerFlyout;

                interface IDatePickerFlyoutItem;

                interface IDatePickerFlyoutItemStatics;

                interface IDatePickerFlyoutPresenter;

                interface IDatePickerFlyoutPresenterStatics;

                interface IDatePickerFlyoutStatics;

                interface IDatePickerSelectedValueChangedEventArgs;

                interface IDatePickerStatics;

                interface IDatePickerValueChangedEventArgs;

                interface IDragItemsCompletedEventArgs;

                interface IDragItemsStartingEventArgs;

                interface IDropDownButton;

                interface IDropDownButtonFactory;

                interface IDynamicAnimatedVisualSource;

                interface IDynamicOverflowItemsChangingEventArgs;

                interface IElementAnimator;

                interface IElementAnimatorFactory;

                interface IElementAnimatorOverrides;

                interface IElementAnimatorProtected;

                interface IElementFactory;

                interface IElementFactoryFactory;

                interface IElementFactoryGetArgs;

                interface IElementFactoryOverrides;

                interface IElementFactoryRecycleArgs;

                interface IElementFactoryShim;

                interface IFlipView;

                interface IFlipViewFactory;

                interface IFlipViewItem;

                interface IFlipViewItemFactory;

                interface IFlipViewStatics;

                interface IFlowLayout;

                interface IFlowLayoutFactory;

                interface IFlowLayoutOverrides;

                interface IFlowLayoutState;

                interface IFlowLayoutStateFactory;

                interface IFlowLayoutStatics;

                interface IFlyout;

                interface IFlyoutFactory;

                interface IFlyoutPresenter;

                interface IFlyoutPresenterFactory;

                interface IFlyoutPresenterStatics;

                interface IFlyoutStatics;

                interface IFocusDisengagedEventArgs;

                interface IFocusEngagedEventArgs;

                interface IFontIcon;

                interface IFontIconFactory;

                interface IFontIconSource;

                interface IFontIconSourceFactory;

                interface IFontIconSourceStatics;

                interface IFontIconStatics;

                interface IFrame;

                interface IFrameFactory;

                interface IFramePrivate;

                interface IFrameStatics;

                interface IGrid;

                interface IGridFactory;

                interface IGridStatics;

                interface IGridView;

                interface IGridViewFactory;

                interface IGridViewHeaderItem;

                interface IGridViewHeaderItemFactory;

                interface IGridViewItem;

                interface IGridViewItemFactory;

                interface IGroupItem;

                interface IGroupItemFactory;

                interface IGroupStyle;

                interface IGroupStyleFactory;

                interface IGroupStyleSelector;

                interface IGroupStyleSelectorFactory;

                interface IGroupStyleSelectorOverrides;

                interface IHasValidationErrorsChangedEventArgs;

                interface IHub;

                interface IHubFactory;

                interface IHubSection;

                interface IHubSectionFactory;

                interface IHubSectionHeaderClickEventArgs;

                interface IHubSectionStatics;

                interface IHubStatics;

                interface IHyperlinkButton;

                interface IHyperlinkButtonFactory;

                interface IHyperlinkButtonStatics;

                interface IIconElement;

                interface IIconElementFactory;

                interface IIconElementStatics;

                interface IIconSource;

                interface IIconSourceElement;

                interface IIconSourceElementFactory;

                interface IIconSourceElementStatics;

                interface IIconSourceFactory;

                interface IIconSourceStatics;

                interface IImage;

                interface IImageStatics;

                interface IIndexPath;

                interface IIndexPathStatics;

                interface IInputValidationCommand;

                interface IInputValidationCommandFactory;

                interface IInputValidationCommandOverrides;

                interface IInputValidationContext;

                interface IInputValidationContextFactory;

                interface IInputValidationControl;

                interface IInputValidationControl2;

                interface IInputValidationError;

                interface IInputValidationErrorEventArgs;

                interface IInputValidationErrorFactory;

                interface IInsertionPanel;

                interface IIsTextTrimmedChangedEventArgs;

                interface IItemClickEventArgs;

                interface IItemContainerGenerator;

                interface IItemContainerMapping;

                interface IItemsControl;

                interface IItemsControlFactory;

                interface IItemsControlOverrides;

                interface IItemsControlStatics;

                interface IItemsPanelTemplate;

                interface IItemsPickedEventArgs;

                interface IItemsPresenter;

                interface IItemsPresenterStatics;

                interface IItemsRepeater;

                interface IItemsRepeaterElementClearingEventArgs;

                interface IItemsRepeaterElementIndexChangedEventArgs;

                interface IItemsRepeaterElementPreparedEventArgs;

                interface IItemsRepeaterFactory;

                interface IItemsRepeaterScrollHost;

                interface IItemsRepeaterStatics;

                interface IItemsSourceView;

                interface IItemsSourceViewFactory;

                interface IItemsStackPanel;

                interface IItemsStackPanelStatics;

                interface IItemsWrapGrid;

                interface IItemsWrapGridStatics;

                interface IKeyIndexMapping;

                interface ILayout;

                interface ILayoutContext;

                interface ILayoutContextFactory;

                interface ILayoutContextOverrides;

                interface ILayoutDataInfoProvider;

                interface ILayoutFactory;

                interface ILayoutPanel;

                interface ILayoutPanelFactory;

                interface ILayoutPanelStatics;

                interface ILayoutProtected;

                interface ILayoutStrategy;

                interface IListBox;

                interface IListBoxFactory;

                interface IListBoxItem;

                interface IListBoxItemFactory;

                interface IListBoxStatics;

                interface IListPickerFlyout;

                interface IListPickerFlyoutPresenter;

                interface IListPickerFlyoutStatics;

                interface IListView;

                interface IListViewBase;

                interface IListViewBaseFactory;

                interface IListViewBaseHeaderItem;

                interface IListViewBaseHeaderItemFactory;

                interface IListViewBasePrivate;

                interface IListViewBaseStatics;

                interface IListViewFactory;

                interface IListViewHeaderItem;

                interface IListViewHeaderItemFactory;

                interface IListViewItem;

                interface IListViewItemFactory;

                interface IListViewPersistenceHelper;

                interface IListViewPersistenceHelperStatics;

                interface IMediaElement;

                interface IMediaElementStatics;

                interface IMediaPlayerElement;

                interface IMediaPlayerElementFactory;

                interface IMediaPlayerElementStatics;

                interface IMediaPlayerPresenter;

                interface IMediaPlayerPresenterFactory;

                interface IMediaPlayerPresenterStatics;

                interface IMediaTransportControls;

                interface IMediaTransportControlsFactory;

                interface IMediaTransportControlsHelper;

                interface IMediaTransportControlsHelperStatics;

                interface IMediaTransportControlsStatics;

                interface IMenu;

                interface IMenuBar;

                interface IMenuBarFactory;

                interface IMenuBarItem;

                interface IMenuBarItemFactory;

                interface IMenuBarItemFlyout;

                interface IMenuBarItemFlyoutFactory;

                interface IMenuBarItemStatics;

                interface IMenuBarStatics;

                interface IMenuFlyout;

                interface IMenuFlyoutFactory;

                interface IMenuFlyoutItem;

                interface IMenuFlyoutItemBase;

                interface IMenuFlyoutItemBaseFactory;

                interface IMenuFlyoutItemFactory;

                interface IMenuFlyoutItemStatics;

                interface IMenuFlyoutPresenter;

                interface IMenuFlyoutPresenterFactory;

                interface IMenuFlyoutPresenterStatics;

                interface IMenuFlyoutSeparator;

                interface IMenuFlyoutSeparatorFactory;

                interface IMenuFlyoutStatics;

                interface IMenuFlyoutSubItem;

                interface IMenuFlyoutSubItemStatics;

                interface IMenuPresenter;

                interface INavigate;

                interface INavigationView;

                interface INavigationViewBackRequestedEventArgs;

                interface INavigationViewDisplayModeChangedEventArgs;

                interface INavigationViewFactory;

                interface INavigationViewItem;

                interface INavigationViewItemBase;

                interface INavigationViewItemBaseFactory;

                interface INavigationViewItemBaseStatics;

                interface INavigationViewItemCollapsedEventArgs;

                interface INavigationViewItemExpandingEventArgs;

                interface INavigationViewItemFactory;

                interface INavigationViewItemHeader;

                interface INavigationViewItemHeaderFactory;

                interface INavigationViewItemInvokedEventArgs;

                interface INavigationViewItemSeparator;

                interface INavigationViewItemSeparatorFactory;

                interface INavigationViewItemStatics;

                interface INavigationViewPaneClosingEventArgs;

                interface INavigationViewSelectionChangedEventArgs;

                interface INavigationViewStatics;

                interface INavigationViewTemplateSettings;

                interface INavigationViewTemplateSettingsFactory;

                interface INavigationViewTemplateSettingsStatics;

                interface INonVirtualizingLayout;

                interface INonVirtualizingLayoutContext;

                interface INonVirtualizingLayoutContextFactory;

                interface INonVirtualizingLayoutContextOverrides;

                interface INonVirtualizingLayoutFactory;

                interface INonVirtualizingLayoutOverrides;

                interface INumberBox;

                interface INumberBoxFactory;

                interface INumberBoxStatics;

                interface INumberBoxValueChangedEventArgs;

                interface IPage;

                interface IPageFactory;

                interface IPageOverrides;

                interface IPageStatics;

                interface IPanel;

                interface IPanelFactory;

                interface IPanelStatics;

                interface IParallaxView;

                interface IParallaxViewFactory;

                interface IParallaxViewStatics;

                interface IPasswordBox;

                interface IPasswordBoxPasswordChangingEventArgs;

                interface IPasswordBoxStatics;

                interface IPathIcon;

                interface IPathIconFactory;

                interface IPathIconSource;

                interface IPathIconSourceFactory;

                interface IPathIconSourceStatics;

                interface IPathIconStatics;

                interface IPersonPicture;

                interface IPersonPictureFactory;

                interface IPersonPictureStatics;

                interface IPersonPictureTemplateSettings;

                interface IPickerConfirmedEventArgs;

                interface IPickerFlyout;

                interface IPickerFlyoutPresenter;

                interface IPickerFlyoutStatics;

                interface IPivot;

                interface IPivotFactory;

                interface IPivotItem;

                interface IPivotItemEventArgs;

                interface IPivotItemFactory;

                interface IPivotItemStatics;

                interface IPivotStatics;

                interface IProgressBar;

                interface IProgressBarFactory;

                interface IProgressBarStatics;

                interface IProgressRing;

                interface IProgressRingStatics;

                interface IRadioButton;

                interface IRadioButtonFactory;

                interface IRadioButtonStatics;

                interface IRadioButtons;

                interface IRadioButtonsFactory;

                interface IRadioButtonsStatics;

                interface IRadioMenuFlyoutItem;

                interface IRadioMenuFlyoutItemFactory;

                interface IRadioMenuFlyoutItemStatics;

                interface IRatingControl;

                interface IRatingControlFactory;

                interface IRatingControlStatics;

                interface IRatingItemFontInfo;

                interface IRatingItemFontInfoFactory;

                interface IRatingItemFontInfoStatics;

                interface IRatingItemImageInfo;

                interface IRatingItemImageInfoFactory;

                interface IRatingItemImageInfoStatics;

                interface IRatingItemInfo;

                interface IRatingItemInfoFactory;

                interface IRecyclePool;

                interface IRecyclePoolFactory;

                interface IRecyclePoolOverrides;

                interface IRecyclePoolStatics;

                interface IRecyclingElementFactory;

                interface IRecyclingElementFactoryFactory;

                interface IRecyclingElementFactoryOverrides;

                interface IRefreshContainer;

                interface IRefreshContainerFactory;

                interface IRefreshContainerStatics;

                interface IRefreshInteractionRatioChangedEventArgs;

                interface IRefreshRequestedEventArgs;

                interface IRefreshStateChangedEventArgs;

                interface IRefreshVisualizer;

                interface IRefreshVisualizerFactory;

                interface IRefreshVisualizerStatics;

                interface IRelativePanel;

                interface IRelativePanelFactory;

                interface IRelativePanelStatics;

                interface IRevealListViewItemPresenter;

                interface IRevealListViewItemPresenterFactory;

                interface IRichEditBox;

                interface IRichEditBoxFactory;

                interface IRichEditBoxSelectionChangingEventArgs;

                interface IRichEditBoxStatics;

                interface IRichEditBoxTextChangingEventArgs;

                interface IRichTextBlock;

                interface IRichTextBlockOverflow;

                interface IRichTextBlockOverflowStatics;

                interface IRichTextBlockStatics;

                interface IRowDefinition;

                interface IRowDefinitionStatics;

                interface IScrollAnchorProvider;

                interface IScrollAnimationStartingEventArgs;

                interface IScrollCompletedEventArgs;

                interface IScrollContentPresenter;

                interface IScrollContentPresenterStatics;

                interface IScrollOptions;

                interface IScrollOptionsFactory;

                interface IScrollViewer;

                interface IScrollViewerPrivate;

                interface IScrollViewerStatics;

                interface IScrollViewerView;

                interface IScrollViewerViewChangedEventArgs;

                interface IScrollViewerViewChangingEventArgs;

                interface IScrollerAnchorRequestedEventArgs;

                interface IScrollerBringingIntoViewEventArgs;

                interface ISectionsInViewChangedEventArgs;

                interface ISectionsInViewChangedEventArgsFactory;

                interface ISelectTemplateEventArgs;

                interface ISelectionChangedEventArgs;

                interface ISelectionChangedEventArgsFactory;

                interface ISelectionModel;

                interface ISelectionModelChildrenRequestedEventArgs;

                interface ISelectionModelFactory;

                interface ISelectionModelProtected;

                interface ISelectionModelSelectionChangedEventArgs;

                interface ISelfPlayingAnimatedVisual;

                interface ISemanticZoom;

                interface ISemanticZoomInformation;

                interface ISemanticZoomLocation;

                interface ISemanticZoomStatics;

                interface ISemanticZoomViewChangedEventArgs;

                interface ISlider;

                interface ISliderFactory;

                interface ISliderStatics;

                interface ISplitButton;

                interface ISplitButtonClickEventArgs;

                interface ISplitButtonFactory;

                interface ISplitButtonStatics;

                interface ISplitView;

                interface ISplitViewFactory;

                interface ISplitViewPaneClosingEventArgs;

                interface ISplitViewStatics;

                interface IStackLayout;

                interface IStackLayoutFactory;

                interface IStackLayoutState;

                interface IStackLayoutStateFactory;

                interface IStackLayoutStatics;

                interface IStackPanel;

                interface IStackPanelFactory;

                interface IStackPanelStatics;

                interface IStyleSelector;

                interface IStyleSelectorFactory;

                interface IStyleSelectorOverrides;

                interface ISubMenuOwner;

                interface ISwapChainBackgroundPanel;

                interface ISwapChainBackgroundPanelFactory;

                interface ISwapChainPanel;

                interface ISwapChainPanelFactory;

                interface ISwapChainPanelStatics;

                interface ISwipeControl;

                interface ISwipeControlFactory;

                interface ISwipeControlStatics;

                interface ISwipeItem;

                interface ISwipeItemFactory;

                interface ISwipeItemInvokedEventArgs;

                interface ISwipeItemStatics;

                interface ISwipeItems;

                interface ISwipeItemsFactory;

                interface ISwipeItemsStatics;

                interface ISymbolIcon;

                interface ISymbolIconFactory;

                interface ISymbolIconSource;

                interface ISymbolIconSourceFactory;

                interface ISymbolIconSourceStatics;

                interface ISymbolIconStatics;

                interface ITabView;

                interface ITabViewFactory;

                interface ITabViewItem;

                interface ITabViewItemFactory;

                interface ITabViewItemStatics;

                interface ITabViewItemTemplateSettings;

                interface ITabViewItemTemplateSettingsFactory;

                interface ITabViewItemTemplateSettingsStatics;

                interface ITabViewStatics;

                interface ITabViewTabCloseRequestedEventArgs;

                interface ITabViewTabDragCompletedEventArgs;

                interface ITabViewTabDragStartingEventArgs;

                interface ITabViewTabDroppedOutsideEventArgs;

                interface ITeachingTip;

                interface ITeachingTipClosedEventArgs;

                interface ITeachingTipClosingEventArgs;

                interface ITeachingTipFactory;

                interface ITeachingTipStatics;

                interface ITeachingTipTemplateSettings;

                interface ITeachingTipTemplateSettingsFactory;

                interface ITeachingTipTemplateSettingsStatics;

                interface ITelemetryCollectionPriv;

                interface ITextBlock;

                interface ITextBlockStatics;

                interface ITextBox;

                interface ITextBoxBeforeTextChangingEventArgs;

                interface ITextBoxFactory;

                interface ITextBoxPriv2;

                interface ITextBoxPrivate;

                interface ITextBoxSelectionChangingEventArgs;

                interface ITextBoxStatics;

                interface ITextBoxTextChangingEventArgs;

                interface ITextChangedEventArgs;

                interface ITextCommandBarFlyout;

                interface ITextCommandBarFlyoutFactory;

                interface ITextCompositionChangedEventArgs;

                interface ITextCompositionEndedEventArgs;

                interface ITextCompositionStartedEventArgs;

                interface ITextControlCopyingToClipboardEventArgs;

                interface ITextControlCuttingToClipboardEventArgs;

                interface ITextControlPasteEventArgs;

                interface ITimePickedEventArgs;

                interface ITimePicker;

                interface ITimePickerFactory;

                interface ITimePickerFlyout;

                interface ITimePickerFlyoutPresenter;

                interface ITimePickerFlyoutPresenterStatics;

                interface ITimePickerFlyoutStatics;

                interface ITimePickerSelectedValueChangedEventArgs;

                interface ITimePickerStatics;

                interface ITimePickerValueChangedEventArgs;

                interface IToggleMenuFlyoutItem;

                interface IToggleMenuFlyoutItemFactory;

                interface IToggleMenuFlyoutItemStatics;

                interface IToggleSplitButton;

                interface IToggleSplitButtonFactory;

                interface IToggleSplitButtonIsCheckedChangedEventArgs;

                interface IToggleSplitButtonStatics;

                interface IToggleSwitch;

                interface IToggleSwitchOverrides;

                interface IToggleSwitchStatics;

                interface IToolTip;

                interface IToolTipFactory;

                interface IToolTipService;

                interface IToolTipServiceStatics;

                interface IToolTipStatics;

                interface ITreeView;

                interface ITreeViewCollapsedEventArgs;

                interface ITreeViewDragItemsCompletedEventArgs;

                interface ITreeViewDragItemsStartingEventArgs;

                interface ITreeViewExpandingEventArgs;

                interface ITreeViewFactory;

                interface ITreeViewItem;

                interface ITreeViewItemFactory;

                interface ITreeViewItemInvokedEventArgs;

                interface ITreeViewItemStatics;

                interface ITreeViewItemTemplateSettings;

                interface ITreeViewItemTemplateSettingsFactory;

                interface ITreeViewItemTemplateSettingsStatics;

                interface ITreeViewList;

                interface ITreeViewListFactory;

                interface ITreeViewNode;

                interface ITreeViewNodeFactory;

                interface ITreeViewNodeStatics;

                interface ITreeViewSelectionChangedEventArgs;

                interface ITreeViewStatics;

                interface ITwoPaneView;

                interface ITwoPaneViewFactory;

                interface ITwoPaneViewStatics;

                interface IUIElementCollection;

                interface IUniformGridLayout;

                interface IUniformGridLayoutFactory;

                interface IUniformGridLayoutState;

                interface IUniformGridLayoutStateFactory;

                interface IUniformGridLayoutStatics;

                interface IUserControl;

                interface IUserControlFactory;

                interface IUserControlStatics;

                interface IVariableSizedWrapGrid;

                interface IVariableSizedWrapGridStatics;

                interface IViewbox;

                interface IViewboxStatics;

                interface IVirtualizingLayout;

                interface IVirtualizingLayoutContext;

                interface IVirtualizingLayoutContextFactory;

                interface IVirtualizingLayoutContextOverrides;

                interface IVirtualizingLayoutFactory;

                interface IVirtualizingLayoutOverrides;

                interface IVirtualizingPanel;

                interface IVirtualizingPanelFactory;

                interface IVirtualizingPanelOverrides;

                interface IVirtualizingPanelProtected;

                interface IVirtualizingStackPanel;

                interface IVirtualizingStackPanelOverrides;

                interface IVirtualizingStackPanelStatics;

                interface IWebView2;

                interface IWebView2CoreWebView2ReadyEventArgs;

                interface IWebView2Factory;

                interface IWebView2NavigationCompletedEventArgs;

                interface IWebView2NavigationStartingEventArgs;

                interface IWebView2ProcessFailedEventArgs;

                interface IWebView2Statics;

                interface IWebView2WebMessageReceivedEventArgs;

                interface IWrapGrid;

                interface IWrapGridStatics;

                interface IXamlControlsResources;

                interface IXamlControlsResourcesStatics;

                interface IZoomAnimationStartingEventArgs;

                interface IZoomCompletedEventArgs;

                interface IZoomOptions;

                interface IZoomOptionsFactory;

                runtimeclass AnchorRequestedEventArgs;

                runtimeclass AnimatedVisualPlayer;

                runtimeclass AppBar;

                runtimeclass AppBarButton;

                runtimeclass AppBarElementContainer;

                runtimeclass AppBarSeparator;

                runtimeclass AppBarToggleButton;

                runtimeclass AutoSuggestBox;

                runtimeclass AutoSuggestBoxQuerySubmittedEventArgs;

                runtimeclass AutoSuggestBoxSuggestionChosenEventArgs;

                runtimeclass AutoSuggestBoxTextChangedEventArgs;

                runtimeclass BitmapIcon;

                runtimeclass BitmapIconSource;

                runtimeclass Border;

                runtimeclass Button;

                runtimeclass CalendarDatePicker;

                runtimeclass CalendarDatePickerDateChangedEventArgs;

                runtimeclass CalendarView;

                runtimeclass CalendarViewDayItem;

                runtimeclass CalendarViewDayItemChangingEventArgs;

                runtimeclass CalendarViewSelectedDatesChangedEventArgs;

                runtimeclass CandidateWindowBoundsChangedEventArgs;

                runtimeclass Canvas;

                runtimeclass CaptureElement;

                runtimeclass CheckBox;

                runtimeclass ChoosingGroupHeaderContainerEventArgs;

                runtimeclass ChoosingItemContainerEventArgs;

                runtimeclass CleanUpVirtualizedItemEventArgs;

                runtimeclass ColorChangedEventArgs;

                runtimeclass ColorPicker;

                runtimeclass ColumnDefinition;

                runtimeclass ColumnDefinitionCollection;

                runtimeclass ComboBox;

                runtimeclass ComboBoxItem;

                runtimeclass ComboBoxTextSubmittedEventArgs;

                runtimeclass CommandBar;

                runtimeclass CommandBarFlyout;

                runtimeclass CommandBarOverflowPresenter;

                runtimeclass ContainerContentChangingEventArgs;

                runtimeclass ContentControl;

                runtimeclass ContentDialog;

                runtimeclass ContentDialogButtonClickDeferral;

                runtimeclass ContentDialogButtonClickEventArgs;

                runtimeclass ContentDialogClosedEventArgs;

                runtimeclass ContentDialogClosingDeferral;

                runtimeclass ContentDialogClosingEventArgs;

                runtimeclass ContentDialogOpenedEventArgs;

                runtimeclass ContentPresenter;

                runtimeclass ContextMenuEventArgs;

                runtimeclass Control;

                runtimeclass ControlTemplate;

                runtimeclass DataTemplateSelector;

                runtimeclass DatePickedEventArgs;

                runtimeclass DatePicker;

                runtimeclass DatePickerFlyout;

                runtimeclass DatePickerFlyoutItem;

                runtimeclass DatePickerFlyoutPresenter;

                runtimeclass DatePickerSelectedValueChangedEventArgs;

                runtimeclass DatePickerValueChangedEventArgs;

                runtimeclass DragItemsCompletedEventArgs;

                runtimeclass DragItemsStartingEventArgs;

                runtimeclass DropDownButton;

                runtimeclass DynamicOverflowItemsChangingEventArgs;

                runtimeclass ElementAnimator;

                runtimeclass ElementFactory;

                runtimeclass ElementFactoryGetArgs;

                runtimeclass ElementFactoryRecycleArgs;

                runtimeclass FlipView;

                runtimeclass FlipViewItem;

                runtimeclass FlowLayout;

                runtimeclass FlowLayoutState;

                runtimeclass Flyout;

                runtimeclass FlyoutPresenter;

                runtimeclass FocusDisengagedEventArgs;

                runtimeclass FocusEngagedEventArgs;

                runtimeclass FontIcon;

                runtimeclass FontIconSource;

                runtimeclass Frame;

                runtimeclass Grid;

                runtimeclass GridView;

                runtimeclass GridViewHeaderItem;

                runtimeclass GridViewItem;

                runtimeclass GroupItem;

                runtimeclass GroupStyle;

                runtimeclass GroupStyleSelector;

                runtimeclass HasValidationErrorsChangedEventArgs;

                runtimeclass Hub;

                runtimeclass HubSection;

                runtimeclass HubSectionCollection;

                runtimeclass HubSectionHeaderClickEventArgs;

                runtimeclass HyperlinkButton;

                runtimeclass IconElement;

                runtimeclass IconSource;

                runtimeclass IconSourceElement;

                runtimeclass Image;

                runtimeclass IndexPath;

                runtimeclass InputValidationCommand;

                runtimeclass InputValidationContext;

                runtimeclass InputValidationError;

                runtimeclass InputValidationErrorEventArgs;

                runtimeclass IsTextTrimmedChangedEventArgs;

                runtimeclass ItemClickEventArgs;

                runtimeclass ItemCollection;

                runtimeclass ItemContainerGenerator;

                runtimeclass ItemsControl;

                runtimeclass ItemsPanelTemplate;

                runtimeclass ItemsPickedEventArgs;

                runtimeclass ItemsPresenter;

                runtimeclass ItemsRepeater;

                runtimeclass ItemsRepeaterElementClearingEventArgs;

                runtimeclass ItemsRepeaterElementIndexChangedEventArgs;

                runtimeclass ItemsRepeaterElementPreparedEventArgs;

                runtimeclass ItemsRepeaterScrollHost;

                runtimeclass ItemsSourceView;

                runtimeclass ItemsStackPanel;

                runtimeclass ItemsWrapGrid;

                runtimeclass Layout;

                runtimeclass LayoutContext;

                runtimeclass LayoutPanel;

                runtimeclass ListBox;

                runtimeclass ListBoxItem;

                runtimeclass ListPickerFlyout;

                runtimeclass ListPickerFlyoutPresenter;

                runtimeclass ListView;

                runtimeclass ListViewBase;

                runtimeclass ListViewBaseHeaderItem;

                runtimeclass ListViewHeaderItem;

                runtimeclass ListViewItem;

                runtimeclass ListViewPersistenceHelper;

                runtimeclass MediaElement;

                runtimeclass MediaPlayerElement;

                runtimeclass MediaPlayerPresenter;

                runtimeclass MediaTransportControls;

                runtimeclass MediaTransportControlsHelper;

                runtimeclass MenuBar;

                runtimeclass MenuBarItem;

                runtimeclass MenuBarItemFlyout;

                runtimeclass MenuFlyout;

                runtimeclass MenuFlyoutItem;

                runtimeclass MenuFlyoutItemBase;

                runtimeclass MenuFlyoutPresenter;

                runtimeclass MenuFlyoutSeparator;

                runtimeclass MenuFlyoutSubItem;

                runtimeclass NavigationView;

                runtimeclass NavigationViewBackRequestedEventArgs;

                runtimeclass NavigationViewDisplayModeChangedEventArgs;

                runtimeclass NavigationViewItem;

                runtimeclass NavigationViewItemBase;

                runtimeclass NavigationViewItemCollapsedEventArgs;

                runtimeclass NavigationViewItemExpandingEventArgs;

                runtimeclass NavigationViewItemHeader;

                runtimeclass NavigationViewItemInvokedEventArgs;

                runtimeclass NavigationViewItemSeparator;

                runtimeclass NavigationViewPaneClosingEventArgs;

                runtimeclass NavigationViewSelectionChangedEventArgs;

                runtimeclass NavigationViewTemplateSettings;

                runtimeclass NonVirtualizingLayout;

                runtimeclass NonVirtualizingLayoutContext;

                runtimeclass NumberBox;

                runtimeclass NumberBoxValueChangedEventArgs;

                runtimeclass Page;

                runtimeclass Panel;

                runtimeclass ParallaxView;

                runtimeclass PasswordBox;

                runtimeclass PasswordBoxPasswordChangingEventArgs;

                runtimeclass PathIcon;

                runtimeclass PathIconSource;

                runtimeclass PersonPicture;

                runtimeclass PersonPictureTemplateSettings;

                runtimeclass PickerConfirmedEventArgs;

                runtimeclass PickerFlyout;

                runtimeclass PickerFlyoutPresenter;

                runtimeclass Pivot;

                runtimeclass PivotItem;

                runtimeclass PivotItemEventArgs;

                runtimeclass ProgressBar;

                runtimeclass ProgressRing;

                runtimeclass RadioButton;

                runtimeclass RadioButtons;

                runtimeclass RadioMenuFlyoutItem;

                runtimeclass RatingControl;

                runtimeclass RatingItemFontInfo;

                runtimeclass RatingItemImageInfo;

                runtimeclass RatingItemInfo;

                runtimeclass RecyclePool;

                runtimeclass RecyclingElementFactory;

                runtimeclass RefreshContainer;

                runtimeclass RefreshInteractionRatioChangedEventArgs;

                runtimeclass RefreshRequestedEventArgs;

                runtimeclass RefreshStateChangedEventArgs;

                runtimeclass RefreshVisualizer;

                runtimeclass RelativePanel;

                runtimeclass RevealListViewItemPresenter;

                runtimeclass RichEditBox;

                runtimeclass RichEditBoxSelectionChangingEventArgs;

                runtimeclass RichEditBoxTextChangingEventArgs;

                runtimeclass RichTextBlock;

                runtimeclass RichTextBlockOverflow;

                runtimeclass RowDefinition;

                runtimeclass RowDefinitionCollection;

                runtimeclass ScrollAnimationStartingEventArgs;

                runtimeclass ScrollCompletedEventArgs;

                runtimeclass ScrollContentPresenter;

                runtimeclass ScrollOptions;

                runtimeclass ScrollViewer;

                runtimeclass ScrollViewerView;

                runtimeclass ScrollViewerViewChangedEventArgs;

                runtimeclass ScrollViewerViewChangingEventArgs;

                runtimeclass ScrollerAnchorRequestedEventArgs;

                runtimeclass ScrollerBringingIntoViewEventArgs;

                runtimeclass SectionsInViewChangedEventArgs;

                runtimeclass SelectTemplateEventArgs;

                runtimeclass SelectionChangedEventArgs;

                runtimeclass SelectionModel;

                runtimeclass SelectionModelChildrenRequestedEventArgs;

                runtimeclass SelectionModelSelectionChangedEventArgs;

                runtimeclass SemanticZoom;

                runtimeclass SemanticZoomLocation;

                runtimeclass SemanticZoomViewChangedEventArgs;

                runtimeclass Slider;

                runtimeclass SplitButton;

                runtimeclass SplitButtonClickEventArgs;

                runtimeclass SplitView;

                runtimeclass SplitViewPaneClosingEventArgs;

                runtimeclass StackLayout;

                runtimeclass StackLayoutState;

                runtimeclass StackPanel;

                runtimeclass StyleSelector;

                runtimeclass SwapChainBackgroundPanel;

                runtimeclass SwapChainPanel;

                runtimeclass SwipeControl;

                runtimeclass SwipeItem;

                runtimeclass SwipeItemInvokedEventArgs;

                runtimeclass SwipeItems;

                runtimeclass SymbolIcon;

                runtimeclass SymbolIconSource;

                runtimeclass TabView;

                runtimeclass TabViewItem;

                runtimeclass TabViewItemTemplateSettings;

                runtimeclass TabViewTabCloseRequestedEventArgs;

                runtimeclass TabViewTabDragCompletedEventArgs;

                runtimeclass TabViewTabDragStartingEventArgs;

                runtimeclass TabViewTabDroppedOutsideEventArgs;

                runtimeclass TeachingTip;

                runtimeclass TeachingTipClosedEventArgs;

                runtimeclass TeachingTipClosingEventArgs;

                runtimeclass TeachingTipTemplateSettings;

                runtimeclass TextBlock;

                runtimeclass TextBox;

                runtimeclass TextBoxBeforeTextChangingEventArgs;

                runtimeclass TextBoxSelectionChangingEventArgs;

                runtimeclass TextBoxTextChangingEventArgs;

                runtimeclass TextChangedEventArgs;

                runtimeclass TextCommandBarFlyout;

                runtimeclass TextCompositionChangedEventArgs;

                runtimeclass TextCompositionEndedEventArgs;

                runtimeclass TextCompositionStartedEventArgs;

                runtimeclass TextControlCopyingToClipboardEventArgs;

                runtimeclass TextControlCuttingToClipboardEventArgs;

                runtimeclass TextControlPasteEventArgs;

                runtimeclass TimePickedEventArgs;

                runtimeclass TimePicker;

                runtimeclass TimePickerFlyout;

                runtimeclass TimePickerFlyoutPresenter;

                runtimeclass TimePickerSelectedValueChangedEventArgs;

                runtimeclass TimePickerValueChangedEventArgs;

                runtimeclass ToggleMenuFlyoutItem;

                runtimeclass ToggleSplitButton;

                runtimeclass ToggleSplitButtonIsCheckedChangedEventArgs;

                runtimeclass ToggleSwitch;

                runtimeclass ToolTip;

                runtimeclass ToolTipService;

                runtimeclass TreeView;

                runtimeclass TreeViewCollapsedEventArgs;

                runtimeclass TreeViewDragItemsCompletedEventArgs;

                runtimeclass TreeViewDragItemsStartingEventArgs;

                runtimeclass TreeViewExpandingEventArgs;

                runtimeclass TreeViewItem;

                runtimeclass TreeViewItemInvokedEventArgs;

                runtimeclass TreeViewItemTemplateSettings;

                runtimeclass TreeViewList;

                runtimeclass TreeViewNode;

                runtimeclass TreeViewSelectionChangedEventArgs;

                runtimeclass TwoPaneView;

                runtimeclass UIElementCollection;

                runtimeclass UniformGridLayout;

                runtimeclass UniformGridLayoutState;

                runtimeclass UserControl;

                runtimeclass VariableSizedWrapGrid;

                runtimeclass Viewbox;

                runtimeclass VirtualizingLayout;

                runtimeclass VirtualizingLayoutContext;

                runtimeclass VirtualizingPanel;

                runtimeclass VirtualizingStackPanel;

                runtimeclass WebView2;

                runtimeclass WebView2CoreWebView2ReadyEventArgs;

                runtimeclass WebView2NavigationCompletedEventArgs;

                runtimeclass WebView2NavigationStartingEventArgs;

                runtimeclass WebView2ProcessFailedEventArgs;

                runtimeclass WebView2WebMessageReceivedEventArgs;

                runtimeclass WrapGrid;

                runtimeclass XamlControlsResources;

                runtimeclass ZoomAnimationStartingEventArgs;

                runtimeclass ZoomCompletedEventArgs;

                runtimeclass ZoomOptions;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.HubSection*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ICommandBarElement*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.IndexPath*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.InputValidationError*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.MenuBarItem*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.SwipeItem*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.TreeViewNode*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.GroupStyle*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.HubSection*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.ICommandBarElement*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.IndexPath*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.InputValidationError*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.MenuBarItem*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.RowDefinition*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.SwipeItem*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.TreeViewNode*>;

                    interface Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.GroupStyle*>;

                    interface Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>;

                    interface Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.InputValidationError*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.GroupStyle*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.HubSection*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.ICommandBarElement*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.IndexPath*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.InputValidationError*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.MenuBarItem*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.RowDefinition*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.SwipeItem*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.TreeViewNode*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.GroupStyle*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.InputValidationError*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuBarItem*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.RowDefinition*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.SwipeItem*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.TreeViewNode*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs*>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Controls.ContentDialogResult>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Private.Controls.IRefreshInfoProvider*, Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarDatePicker*, Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ColorPicker*, Microsoft.UI.Xaml.Controls.ColorChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ComboBox*, Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandBar*, Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePicker*, Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePickerFlyout*, Microsoft.UI.Xaml.Controls.DatePickedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IInputValidationControl*, Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IInputValidationControl*, Microsoft.UI.Xaml.Controls.InputValidationErrorEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementClearingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementIndexChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementPreparedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Layout*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListPickerFlyout*, Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NumberBox*, Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.PasswordBox*, Microsoft.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.PickerFlyout*, Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Pivot*, Microsoft.UI.Xaml.Controls.PivotItemEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum*, Microsoft.UI.Xaml.Controls.ColorChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollAnimationStartingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollerAnchorRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ScrollerBringingIntoViewEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ZoomAnimationStartingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.Scroller*, Microsoft.UI.Xaml.Controls.ZoomCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RadioButtons*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RatingControl*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RecyclingElementFactory*, Microsoft.UI.Xaml.Controls.SelectTemplateEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshContainer*, Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshVisualizer*, Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshVisualizer*, Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichTextBlock*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichTextBlockOverflow*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ScrollViewer*, Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SelectionModel*, Microsoft.UI.Xaml.Controls.SelectionModelChildrenRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SelectionModel*, Microsoft.UI.Xaml.Controls.SelectionModelSelectionChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitButton*, Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, Microsoft.UI.Xaml.Controls.SplitViewPaneClosingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwapChainPanel*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwipeControl*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwipeItem*, Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabViewItem*, Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, Microsoft.UI.Xaml.Controls.TeachingTipClosedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, Microsoft.UI.Xaml.Controls.TeachingTipClosingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePicker*, Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePickerFlyout*, Microsoft.UI.Xaml.Controls.TimePickedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ToggleSplitButton*, Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewSelectionChangedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TwoPaneView*, IInspectable*>;

                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                [flags]
                [version(0x00000001)]
                enum AnimationContext
                {
                    None                   = 0x0,
                    CollectionChangeAdd    = 0x1,
                    CollectionChangeRemove = 0x2,
                    CollectionChangeReset  = 0x4,
                    LayoutTransition       = 0x8
                };

                [version(0x00000001)]
                enum AnimationMode
                {
                    Disabled = 0,
                    Enabled  = 1,
                    Auto     = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum AppBarClosedDisplayMode
                {
                    Compact = 0,
                    Minimal = 1,
                    Hidden  = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum AutoSuggestionBoxTextChangeReason
                {
                    UserInput          = 0,
                    ProgrammaticChange = 1,
                    SuggestionChosen   = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum BackgroundSizing
                {
                    InnerBorderEdge = 0,
                    OuterBorderEdge = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CalendarViewDisplayMode
                {
                    Month  = 0,
                    Year   = 1,
                    Decade = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CalendarViewSelectionMode
                {
                    None     = 0,
                    Single   = 1,
                    Multiple = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CandidateWindowAlignment
                {
                    Default    = 0,
                    BottomEdge = 1
                };

                [version(0x00000001)]
                enum ChainingMode
                {
                    Auto   = 0,
                    Always = 1,
                    Never  = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CharacterCasing
                {
                    Normal = 0,
                    Lower  = 1,
                    Upper  = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ClickMode
                {
                    Release = 0,
                    Press   = 1,
                    Hover   = 2
                };

                [version(0x00000001)]
                enum ColorPickerHsvChannel
                {
                    Hue        = 0,
                    Saturation = 1,
                    Value      = 2,
                    Alpha      = 3
                };

                [version(0x00000001)]
                enum ColorSpectrumComponents
                {
                    HueValue        = 0,
                    ValueHue        = 1,
                    HueSaturation   = 2,
                    SaturationHue   = 3,
                    SaturationValue = 4,
                    ValueSaturation = 5
                };

                [version(0x00000001)]
                enum ColorSpectrumShape
                {
                    Box  = 0,
                    Ring = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ComboBoxSelectionChangedTrigger
                {
                    Committed = 0,
                    Always    = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CommandBarDefaultLabelPosition
                {
                    Bottom    = 0,
                    Right     = 1,
                    Collapsed = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CommandBarDynamicOverflowAction
                {
                    AddingToOverflow     = 0,
                    RemovingFromOverflow = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CommandBarLabelPosition
                {
                    Default   = 0,
                    Collapsed = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum CommandBarOverflowButtonVisibility
                {
                    Auto      = 0,
                    Visible   = 1,
                    Collapsed = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ContentDialogButton
                {
                    None      = 0,
                    Primary   = 1,
                    Secondary = 2,
                    Close     = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ContentDialogPlacement
                {
                    Popup   = 0,
                    InPlace = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ContentDialogResult
                {
                    None      = 0,
                    Primary   = 1,
                    Secondary = 2
                };

                [version(0x00000001)]
                enum ContentOrientation
                {
                    Vertical   = 0,
                    Horizontal = 1,
                    None       = 2,
                    Both       = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [flags]
                enum DisabledFormattingAccelerators
                {
                    None      = 0x0,
                    Bold      = 0x1,
                    Italic    = 0x2,
                    Underline = 0x4,
                    All       = 0xFFFFFFFF
                };

                [flags]
                [version(0x00000001)]
                enum ElementRealizationOptions
                {
                    None                = 0x0,
                    ForceCreate         = 0x1,
                    SuppressAutoRecycle = 0x2
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                enum ElementType
                {
                    ItemContainer = 0,
                    GroupHeader   = 1
                };

                [version(0x00000001)]
                enum FlowLayoutLineAlignment
                {
                    Start        = 0,
                    Center       = 1,
                    End          = 2,
                    SpaceAround  = 3,
                    SpaceBetween = 4,
                    SpaceEvenly  = 5
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum IncrementalLoadingTrigger
                {
                    None = 0,
                    Edge = 1
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                enum IndexSearchHint
                {
                    NoHint          = 0,
                    Exact           = 1,
                    SearchBackwards = 2,
                    SearchForwards  = 3
                };

                [flags]
                [version(0x00000001)]
                enum InputKind
                {
                    None       = 0x0,
                    Touch      = 0x1,
                    Pen        = 0x2,
                    MouseWheel = 0x4,
                    Keyboard   = 0x8,
                    Gamepad    = 0x10,
                    All        = 0xFF
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum InputValidationErrorEventAction
                {
                    Added   = 0,
                    Removed = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum InputValidationKind
                {
                    Auto    = 0,
                    Compact = 1,
                    Inline  = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum InputValidationMode
                {
                    Auto     = 0,
                    Default  = 1,
                    Disabled = 2
                };

                [version(0x00000001)]
                enum InteractionState
                {
                    Idle        = 0,
                    Interaction = 1,
                    Inertia     = 2,
                    Animation   = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ItemsUpdatingScrollMode
                {
                    KeepItemsInView    = 0,
                    KeepScrollOffset   = 1,
                    KeepLastItemInView = 2
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                enum KeyNavigationAction
                {
                    Next     = 0,
                    Previous = 1,
                    First    = 2,
                    Last     = 3,
                    Left     = 4,
                    Right    = 5,
                    Up       = 6,
                    Down     = 7
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum LightDismissOverlayMode
                {
                    Auto = 0,
                    On   = 1,
                    Off  = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ListPickerFlyoutSelectionMode
                {
                    Single   = 0,
                    Multiple = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ListViewReorderMode
                {
                    Disabled = 0,
                    Enabled  = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ListViewSelectionMode
                {
                    None     = 0,
                    Single   = 1,
                    Multiple = 2,
                    Extended = 3
                };

                [version(0x00000001)]
                enum NavigationViewBackButtonVisible
                {
                    Collapsed = 0,
                    Visible   = 1,
                    Auto      = 2
                };

                [version(0x00000001)]
                enum NavigationViewDisplayMode
                {
                    Minimal  = 0,
                    Compact  = 1,
                    Expanded = 2
                };

                [version(0x00000001)]
                enum NavigationViewOverflowLabelMode
                {
                    MoreLabel = 0,
                    NoLabel   = 1
                };

                [version(0x00000001)]
                enum NavigationViewPaneDisplayMode
                {
                    Auto        = 0,
                    Left        = 1,
                    Top         = 2,
                    LeftCompact = 3,
                    LeftMinimal = 4
                };

                [version(0x00000001)]
                enum NavigationViewSelectionFollowsFocus
                {
                    Disabled = 0,
                    Enabled  = 1
                };

                [version(0x00000001)]
                enum NavigationViewShoulderNavigationEnabled
                {
                    WhenSelectionFollowsFocus = 0,
                    Always                    = 1,
                    Never                     = 2
                };

                [version(0x00000001)]
                enum NumberBoxSpinButtonPlacementMode
                {
                    Hidden  = 0,
                    Compact = 1,
                    Inline  = 2
                };

                [version(0x00000001)]
                enum NumberBoxValidationMode
                {
                    InvalidInputOverwritten = 0,
                    Disabled                = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum Orientation
                {
                    Vertical   = 0,
                    Horizontal = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum PanelScrollingDirection
                {
                    None     = 0,
                    Forward  = 1,
                    Backward = 2
                };

                [version(0x00000001)]
                enum ParallaxSourceOffsetKind
                {
                    Absolute = 0,
                    Relative = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum PasswordRevealMode
                {
                    Peek    = 0,
                    Hidden  = 1,
                    Visible = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum PivotHeaderFocusVisualPlacement
                {
                    ItemHeaders        = 0,
                    SelectedItemHeader = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum PivotSlideInAnimationGroup
                {
                    Default    = 0,
                    GroupOne   = 1,
                    GroupTwo   = 2,
                    GroupThree = 3
                };

                [version(0x00000001)]
                enum RailingMode
                {
                    Enabled  = 0,
                    Disabled = 1
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                enum ReferenceIdentity
                {
                    Myself   = 0,
                    BeforeMe = 1,
                    AfterMe  = 2
                };

                [version(0x00000001)]
                enum RefreshPullDirection
                {
                    LeftToRight = 0,
                    TopToBottom = 1,
                    RightToLeft = 2,
                    BottomToTop = 3
                };

                [version(0x00000001)]
                enum RefreshVisualizerOrientation
                {
                    Auto                             = 0,
                    Normal                           = 1,
                    Rotate90DegreesCounterclockwise  = 2,
                    Rotate270DegreesCounterclockwise = 3
                };

                [version(0x00000001)]
                enum RefreshVisualizerState
                {
                    Idle        = 0,
                    Peeking     = 1,
                    Interacting = 2,
                    Pending     = 3,
                    Refreshing  = 4
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum RequiresPointer
                {
                    Never       = 0,
                    WhenEngaged = 1,
                    WhenFocused = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum RichEditClipboardFormat
                {
                    AllFormats = 0,
                    PlainText  = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ScrollBarVisibility
                {
                    Disabled = 0,
                    Auto     = 1,
                    Hidden   = 2,
                    Visible  = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ScrollIntoViewAlignment
                {
                    Default = 0,
                    Leading = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ScrollMode
                {
                    Disabled = 0,
                    Enabled  = 1,
                    Auto     = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum SelectionMode
                {
                    Single   = 0,
                    Multiple = 1,
                    Extended = 2
                };

                [version(0x00000001)]
                enum SnapPointsMode
                {
                    Default = 0,
                    Ignore  = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum SnapPointsType
                {
                    None            = 0,
                    Optional        = 1,
                    Mandatory       = 2,
                    OptionalSingle  = 3,
                    MandatorySingle = 4
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum SplitViewDisplayMode
                {
                    Overlay        = 0,
                    Inline         = 1,
                    CompactOverlay = 2,
                    CompactInline  = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum SplitViewPanePlacement
                {
                    Left  = 0,
                    Right = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum StretchDirection
                {
                    UpOnly   = 0,
                    DownOnly = 1,
                    Both     = 2
                };

                [version(0x00000001)]
                enum SwipeBehaviorOnInvoked
                {
                    Auto       = 0,
                    Close      = 1,
                    RemainOpen = 2
                };

                [version(0x00000001)]
                enum SwipeMode
                {
                    Reveal  = 0,
                    Execute = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum Symbol
                {
                    Previous               = 57600,
                    Next                   = 57601,
                    Play                   = 57602,
                    Pause                  = 57603,
                    Edit                   = 57604,
                    Save                   = 57605,
                    Clear                  = 57606,
                    Delete                 = 57607,
                    Remove                 = 57608,
                    Add                    = 57609,
                    Cancel                 = 57610,
                    Accept                 = 57611,
                    More                   = 57612,
                    Redo                   = 57613,
                    Undo                   = 57614,
                    Home                   = 57615,
                    Up                     = 57616,
                    Forward                = 57617,
                    Back                   = 57618,
                    Favorite               = 57619,
                    Camera                 = 57620,
                    Setting                = 57621,
                    Video                  = 57622,
                    Sync                   = 57623,
                    Download               = 57624,
                    Mail                   = 57625,
                    Find                   = 57626,
                    Help                   = 57627,
                    Upload                 = 57628,
                    Emoji                  = 57629,
                    TwoPage                = 57630,
                    LeaveChat              = 57631,
                    MailForward            = 57632,
                    Clock                  = 57633,
                    Send                   = 57634,
                    Crop                   = 57635,
                    RotateCamera           = 57636,
                    People                 = 57637,
                    OpenPane               = 57638,
                    ClosePane              = 57639,
                    World                  = 57640,
                    Flag                   = 57641,
                    PreviewLink            = 57642,
                    Globe                  = 57643,
                    Trim                   = 57644,
                    AttachCamera           = 57645,
                    ZoomIn                 = 57646,
                    Bookmarks              = 57647,
                    Document               = 57648,
                    ProtectedDocument      = 57649,
                    Page                   = 57650,
                    Bullets                = 57651,
                    Comment                = 57652,
                    MailFilled             = 57653,
                    ContactInfo            = 57654,
                    HangUp                 = 57655,
                    ViewAll                = 57656,
                    MapPin                 = 57657,
                    Phone                  = 57658,
                    VideoChat              = 57659,
                    Switch                 = 57660,
                    Contact                = 57661,
                    Rename                 = 57662,
                    Pin                    = 57665,
                    MusicInfo              = 57666,
                    Go                     = 57667,
                    Keyboard               = 57668,
                    DockLeft               = 57669,
                    DockRight              = 57670,
                    DockBottom             = 57671,
                    Remote                 = 57672,
                    Refresh                = 57673,
                    Rotate                 = 57674,
                    Shuffle                = 57675,
                    List                   = 57676,
                    Shop                   = 57677,
                    SelectAll              = 57678,
                    Orientation            = 57679,
                    Import                 = 57680,
                    ImportAll              = 57681,
                    BrowsePhotos           = 57685,
                    WebCam                 = 57686,
                    Pictures               = 57688,
                    SaveLocal              = 57689,
                    Caption                = 57690,
                    Stop                   = 57691,
                    ShowResults            = 57692,
                    Volume                 = 57693,
                    Repair                 = 57694,
                    Message                = 57695,
                    Page2                  = 57696,
                    CalendarDay            = 57697,
                    CalendarWeek           = 57698,
                    Calendar               = 57699,
                    Character              = 57700,
                    MailReplyAll           = 57701,
                    Read                   = 57702,
                    Link                   = 57703,
                    Account                = 57704,
                    ShowBcc                = 57705,
                    HideBcc                = 57706,
                    Cut                    = 57707,
                    Attach                 = 57708,
                    Paste                  = 57709,
                    Filter                 = 57710,
                    Copy                   = 57711,
                    Emoji2                 = 57712,
                    Important              = 57713,
                    MailReply              = 57714,
                    SlideShow              = 57715,
                    Sort                   = 57716,
                    Manage                 = 57720,
                    AllApps                = 57721,
                    DisconnectDrive        = 57722,
                    MapDrive               = 57723,
                    NewWindow              = 57724,
                    OpenWith               = 57725,
                    ContactPresence        = 57729,
                    Priority               = 57730,
                    GoToToday              = 57732,
                    Font                   = 57733,
                    FontColor              = 57734,
                    Contact2               = 57735,
                    Folder                 = 57736,
                    Audio                  = 57737,
                    Placeholder            = 57738,
                    View                   = 57739,
                    SetLockScreen          = 57740,
                    SetTile                = 57741,
                    ClosedCaption          = 57744,
                    StopSlideShow          = 57745,
                    Permissions            = 57746,
                    Highlight              = 57747,
                    DisableUpdates         = 57748,
                    UnFavorite             = 57749,
                    UnPin                  = 57750,
                    OpenLocal              = 57751,
                    Mute                   = 57752,
                    Italic                 = 57753,
                    Underline              = 57754,
                    Bold                   = 57755,
                    MoveToFolder           = 57756,
                    LikeDislike            = 57757,
                    Dislike                = 57758,
                    Like                   = 57759,
                    AlignRight             = 57760,
                    AlignCenter            = 57761,
                    AlignLeft              = 57762,
                    Zoom                   = 57763,
                    ZoomOut                = 57764,
                    OpenFile               = 57765,
                    OtherUser              = 57766,
                    Admin                  = 57767,
                    Street                 = 57795,
                    Map                    = 57796,
                    ClearSelection         = 57797,
                    FontDecrease           = 57798,
                    FontIncrease           = 57799,
                    FontSize               = 57800,
                    CellPhone              = 57801,
                    ReShare                = 57802,
                    Tag                    = 57803,
                    RepeatOne              = 57804,
                    RepeatAll              = 57805,
                    OutlineStar            = 57806,
                    SolidStar              = 57807,
                    Calculator             = 57808,
                    Directions             = 57809,
                    Target                 = 57810,
                    Library                = 57811,
                    PhoneBook              = 57812,
                    Memo                   = 57813,
                    Microphone             = 57814,
                    PostUpdate             = 57815,
                    BackToWindow           = 57816,
                    FullScreen             = 57817,
                    NewFolder              = 57818,
                    CalendarReply          = 57819,
                    UnSyncFolder           = 57821,
                    ReportHacked           = 57822,
                    SyncFolder             = 57823,
                    BlockContact           = 57824,
                    SwitchApps             = 57825,
                    AddFriend              = 57826,
                    TouchPointer           = 57827,
                    GoToStart              = 57828,
                    ZeroBars               = 57829,
                    OneBar                 = 57830,
                    TwoBars                = 57831,
                    ThreeBars              = 57832,
                    FourBars               = 57833,
                    Scan                   = 58004,
                    Preview                = 58005,
                    GlobalNavigationButton = 59136,
                    Share                  = 59181,
                    Print                  = 59209,
                    XboxOneConsole         = 59792
                };

                [version(0x00000001)]
                enum TabViewCloseButtonOverlayMode
                {
                    Auto          = 0,
                    OnPointerOver = 1,
                    Always        = 2
                };

                [version(0x00000001)]
                enum TabViewWidthMode
                {
                    Equal         = 0,
                    SizeToContent = 1,
                    Compact       = 2
                };

                [version(0x00000001)]
                enum TeachingTipCloseReason
                {
                    CloseButton  = 0,
                    LightDismiss = 1,
                    Programmatic = 2
                };

                [version(0x00000001)]
                enum TeachingTipHeroContentPlacementMode
                {
                    Auto   = 0,
                    Top    = 1,
                    Bottom = 2
                };

                [version(0x00000001)]
                enum TeachingTipPlacementMode
                {
                    Auto        = 0,
                    Top         = 1,
                    Bottom      = 2,
                    Left        = 3,
                    Right       = 4,
                    TopRight    = 5,
                    TopLeft     = 6,
                    BottomRight = 7,
                    BottomLeft  = 8,
                    LeftTop     = 9,
                    LeftBottom  = 10,
                    RightTop    = 11,
                    RightBottom = 12,
                    Center      = 13
                };

                [version(0x00000001)]
                enum TeachingTipTailVisibility
                {
                    Auto      = 0,
                    Visible   = 1,
                    Collapsed = 2
                };

                [version(0x00000001)]
                enum TreeViewSelectionMode
                {
                    None     = 0,
                    Single   = 1,
                    Multiple = 2
                };

                [version(0x00000001)]
                enum TwoPaneViewMode
                {
                    SinglePane = 0,
                    Wide       = 1,
                    Tall       = 2
                };

                [version(0x00000001)]
                enum TwoPaneViewPriority
                {
                    Pane1 = 0,
                    Pane2 = 1
                };

                [version(0x00000001)]
                enum TwoPaneViewTallModeConfiguration
                {
                    SinglePane = 0,
                    TopBottom  = 1,
                    BottomTop  = 2
                };

                [version(0x00000001)]
                enum TwoPaneViewWideModeConfiguration
                {
                    SinglePane = 0,
                    LeftRight  = 1,
                    RightLeft  = 2
                };

                [version(0x00000001)]
                enum UniformGridLayoutItemsJustification
                {
                    Start        = 0,
                    Center       = 1,
                    End          = 2,
                    SpaceAround  = 3,
                    SpaceBetween = 4,
                    SpaceEvenly  = 5
                };

                [version(0x00000001)]
                enum UniformGridLayoutItemsStretch
                {
                    None    = 0,
                    Fill    = 1,
                    Uniform = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum VirtualizationMode
                {
                    Standard  = 0,
                    Recycling = 1
                };

                [experimental]
                [version(0x00000001)]
                enum WebView2ProcessFailedKind
                {
                    BrowserProcessExited      = 0,
                    RenderProcessExited       = 1,
                    RenderProcessUnresponsive = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum ZoomMode
                {
                    Disabled = 0,
                    Enabled  = 1
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                struct EstimationReference
                {
                    Microsoft.UI.Xaml.Controls.ElementType ElementType;
                    INT32 ElementIndex;
                    Windows.Foundation.Rect ElementBounds;
                };

                [version(0x00000001)]
                struct FlowLayoutAnchorInfo
                {
                    INT32 Index;
                    DOUBLE Offset;
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                struct LayoutReference
                {
                    Microsoft.UI.Xaml.Controls.ReferenceIdentity RelativeLocation;
                    Windows.Foundation.Rect ReferenceBounds;
                    Windows.Foundation.Rect HeaderBounds;
                    boolean ReferenceIsHeader;
                };

                [version(0x00000001)]
                struct ScrollInfo
                {
                    INT32 OffsetsChangeId;
                };

                [version(0x00000001)]
                struct ZoomInfo
                {
                    INT32 ZoomFactorChangeId;
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(AB8075FD-7A4B-504E-8A63-D7F35570BD86)]
                delegate
                    HRESULT CalendarViewDayItemChangingEventHandler([in] Microsoft.UI.Xaml.Controls.CalendarView* sender, [in] Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(DA6960DE-89FF-575F-932F-023F6FC1F992)]
                delegate
                    HRESULT CleanUpVirtualizedItemEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(D010FF61-4067-526A-95A3-517577BC5273)]
                delegate
                    HRESULT ContextMenuOpeningEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.ContextMenuEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(55532800-7617-5D67-80BF-B98C0A41B9D6)]
                delegate
                    HRESULT DragItemsStartingEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs* e);

                [uuid(DD8E7C5A-112B-51CA-ADBE-2DE7DF47380C)]
                [version(0x00000001)]
                delegate
                    HRESULT ElementAnimationCompleted([in] Microsoft.UI.Xaml.Controls.ElementAnimator* sender, [in] Microsoft.UI.Xaml.UIElement* element);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(F69971DA-162F-51EC-9FD9-37F9B57A68F9)]
                delegate
                    HRESULT HubSectionHeaderClickEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(A3903624-3393-566C-A6B9-A6B4B3E301C3)]
                delegate
                    HRESULT ItemClickEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.ItemClickEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(2A47F009-91FC-54CE-9861-344E80F7E9D7)]
                delegate
                    HRESULT ListViewItemToKeyHandler([in] IInspectable* item, [out] [retval] HSTRING* result);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(46C8E78E-B948-5EF3-B845-B278B5918BA9)]
                delegate
                    HRESULT ListViewKeyToItemHandler([in] HSTRING key, [out] [retval] Windows.Foundation.IAsyncOperation<IInspectable*>** operation);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(830D582C-80FB-5AEA-BCB2-F151740FF792)]
                delegate
                    HRESULT SectionsInViewChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(A232390D-0E34-595E-8931-FA928A9909F4)]
                delegate
                    HRESULT SelectionChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(4CC95C52-8A54-53B7-9251-0B3EFA605398)]
                delegate
                    HRESULT SemanticZoomViewChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(5D8DDCFF-45D8-5E7C-9B8B-C41D2893C6A1)]
                delegate
                    HRESULT TextChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.TextChangedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(DDF3A6C0-5AB1-5D74-8289-892C0614658F)]
                delegate
                    HRESULT TextControlPasteEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.TextControlPasteEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs)]
                [uuid(D5645E80-D4D3-5DF8-A3AC-1F9BEEB2BCEF)]
                interface IAnchorRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Anchor([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Anchor([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT AnchorCandidates([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement*>** value);
                }

                [uuid(645FF609-FD6B-5FEF-BDC0-9C34EFF33C64)]
                [version(0x00000001)]
                interface IAnimatedVisual : IInspectable
                    requires
                        Windows.Foundation.IClosable
                {
                    [propget] HRESULT RootVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                    [propget] HRESULT Size([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer)]
                [uuid(17F024F0-1692-51DD-A4DA-F4ED648D614C)]
                [version(0x00000001)]
                interface IAnimatedVisualPlayer : IInspectable
                {
                    [propget] HRESULT Diagnostics([out] [retval] IInspectable** value);
                    [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propget] HRESULT Source([out] [retval] Microsoft.UI.Xaml.Controls.IAnimatedVisualSource** value);
                    [propput] HRESULT Source([in] Microsoft.UI.Xaml.Controls.IAnimatedVisualSource* value);
                    [propget] HRESULT FallbackContent([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT FallbackContent([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT AutoPlay([out] [retval] boolean* value);
                    [propput] HRESULT AutoPlay([in] boolean value);
                    [propget] HRESULT IsAnimatedVisualLoaded([out] [retval] boolean* value);
                    [propget] HRESULT IsPlaying([out] [retval] boolean* value);
                    [propget] HRESULT PlaybackRate([out] [retval] DOUBLE* value);
                    [propput] HRESULT PlaybackRate([in] DOUBLE value);
                    [propget] HRESULT ProgressObject([out] [retval] Microsoft.UI.Composition.CompositionObject** value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    HRESULT Pause();
                    HRESULT PlayAsync([in] DOUBLE fromProgress, [in] DOUBLE toProgress, [in] boolean looped, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                    HRESULT Resume();
                    HRESULT SetProgress([in] DOUBLE progress);
                    HRESULT Stop();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer)]
                [uuid(EBC0C6E6-C91A-5025-B4A4-E786D83BE1D8)]
                [version(0x00000001)]
                interface IAnimatedVisualPlayerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer)]
                [uuid(E3D18D97-C98B-5B91-80DB-D70C436AA44A)]
                [version(0x00000001)]
                interface IAnimatedVisualPlayerStatics : IInspectable
                {
                    [propget] HRESULT AutoPlayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DiagnosticsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DurationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FallbackContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAnimatedVisualLoadedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPlayingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaybackRateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [uuid(294765C3-70E3-555C-9657-01FC4051169D)]
                [version(0x00000001)]
                interface IAnimatedVisualSource : IInspectable
                {
                    HRESULT TryCreateAnimatedVisual([in] Microsoft.UI.Composition.Compositor* compositor, [out] IInspectable** diagnostics, [out] [retval] Microsoft.UI.Xaml.Controls.IAnimatedVisual** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBar)]
                [uuid(3D8C2927-5AC5-51BB-8BEC-13FF4C1BD6C8)]
                interface IAppBar : IInspectable
                {
                    [propget] HRESULT IsOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsOpen([in] boolean value);
                    [propget] HRESULT IsSticky([out] [retval] boolean* value);
                    [propput] HRESULT IsSticky([in] boolean value);
                    [propget] HRESULT ClosedDisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.AppBarClosedDisplayMode* value);
                    [propput] HRESULT ClosedDisplayMode([in] Microsoft.UI.Xaml.Controls.AppBarClosedDisplayMode value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings** value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [eventadd] HRESULT Opening([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Opening([in] EventRegistrationToken token);
                    [eventadd] HRESULT Opened([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closing([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closing([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarButton)]
                [uuid(8AB0E278-B6AE-569E-8DCD-D293552FE4D5)]
                interface IAppBarButton : IInspectable
                {
                    [propget] HRESULT Label([out] [retval] HSTRING* value);
                    [propput] HRESULT Label([in] HSTRING value);
                    [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    [propget] HRESULT LabelPosition([out] [retval] Microsoft.UI.Xaml.Controls.CommandBarLabelPosition* value);
                    [propput] HRESULT LabelPosition([in] Microsoft.UI.Xaml.Controls.CommandBarLabelPosition value);
                    [propget] HRESULT KeyboardAcceleratorTextOverride([out] [retval] HSTRING* value);
                    [propput] HRESULT KeyboardAcceleratorTextOverride([in] HSTRING value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarButton)]
                [uuid(4168A40A-D11F-5AEB-974E-BB43A6E7F9B2)]
                interface IAppBarButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AppBarButton** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarButton)]
                [uuid(74327A2A-18FA-59C3-8268-EC3732A4D272)]
                interface IAppBarButtonStatics : IInspectable
                {
                    [propget] HRESULT LabelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LabelPositionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT KeyboardAcceleratorTextOverrideProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCompactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsInOverflowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DynamicOverflowOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarElementContainer)]
                [uuid(55D90715-70BC-5B2B-BD12-A940297F935F)]
                interface IAppBarElementContainer : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarElementContainer)]
                [uuid(0664BF62-1FAB-5873-9608-117C3B4483FF)]
                interface IAppBarElementContainerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AppBarElementContainer** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarElementContainer)]
                [uuid(50C068DE-72D0-52BA-BB42-ADA6527B392F)]
                interface IAppBarElementContainerStatics : IInspectable
                {
                    [propget] HRESULT IsCompactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsInOverflowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DynamicOverflowOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBar)]
                [uuid(66B96B53-755B-5472-B2C4-8624E977D65B)]
                interface IAppBarFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AppBar** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBar)]
                [uuid(67F17798-E281-5E53-8EDF-42C29C354D63)]
                interface IAppBarOverrides : IInspectable
                {
                    HRESULT OnClosed([in] IInspectable* e);
                    HRESULT OnOpened([in] IInspectable* e);
                    HRESULT OnClosing([in] IInspectable* e);
                    HRESULT OnOpening([in] IInspectable* e);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarSeparator)]
                [uuid(57BB94A3-1E56-5EBE-8A57-3A243C491D67)]
                interface IAppBarSeparator : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarSeparator)]
                [uuid(6497D326-FB55-5CF5-8CC4-C556B1A958FB)]
                interface IAppBarSeparatorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AppBarSeparator** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarSeparator)]
                [uuid(DDA9A3D2-D3B9-5BE1-ABF7-DBA1EAAFE0F7)]
                interface IAppBarSeparatorStatics : IInspectable
                {
                    [propget] HRESULT IsCompactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsInOverflowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DynamicOverflowOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBar)]
                [uuid(0DC7172C-A03D-5AE4-9538-FFD804823BCE)]
                interface IAppBarStatics : IInspectable
                {
                    [propget] HRESULT IsOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsStickyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ClosedDisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarToggleButton)]
                [uuid(9687C0B1-C390-59BE-ACDC-4FC48F552823)]
                interface IAppBarToggleButton : IInspectable
                {
                    [propget] HRESULT Label([out] [retval] HSTRING* value);
                    [propput] HRESULT Label([in] HSTRING value);
                    [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    [propget] HRESULT LabelPosition([out] [retval] Microsoft.UI.Xaml.Controls.CommandBarLabelPosition* value);
                    [propput] HRESULT LabelPosition([in] Microsoft.UI.Xaml.Controls.CommandBarLabelPosition value);
                    [propget] HRESULT KeyboardAcceleratorTextOverride([out] [retval] HSTRING* value);
                    [propput] HRESULT KeyboardAcceleratorTextOverride([in] HSTRING value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarToggleButton)]
                [uuid(07BFB2D6-23B9-57A2-9122-006294BFA92F)]
                interface IAppBarToggleButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.AppBarToggleButton** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AppBarToggleButton)]
                [uuid(70021504-3FE8-53BC-ABD6-D69762F4BC87)]
                interface IAppBarToggleButtonStatics : IInspectable
                {
                    [propget] HRESULT LabelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LabelPositionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT KeyboardAcceleratorTextOverrideProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCompactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsInOverflowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DynamicOverflowOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [uuid(645737E4-A882-4E16-B289-FD860560106A)]
                [version(0x00000001)]
                interface IApplicationViewSpanningRects : IInspectable
                {
                    HRESULT GetSpanningRects([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBox)]
                [uuid(3EEA809E-B2DB-521D-97DB-E0648FB5D798)]
                interface IAutoSuggestBox : IInspectable
                {
                    [propget] HRESULT MaxSuggestionListHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxSuggestionListHeight([in] DOUBLE value);
                    [propget] HRESULT IsSuggestionListOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsSuggestionListOpen([in] boolean value);
                    [propget] HRESULT TextMemberPath([out] [retval] HSTRING* value);
                    [propput] HRESULT TextMemberPath([in] HSTRING value);
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT UpdateTextOnSelect([out] [retval] boolean* value);
                    [propput] HRESULT UpdateTextOnSelect([in] boolean value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT AutoMaximizeSuggestionArea([out] [retval] boolean* value);
                    [propput] HRESULT AutoMaximizeSuggestionArea([in] boolean value);
                    [propget] HRESULT TextBoxStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT TextBoxStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT QueryIcon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT QueryIcon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [eventadd] HRESULT SuggestionChosen([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SuggestionChosen([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT QuerySubmitted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.AutoSuggestBox*, Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT QuerySubmitted([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs)]
                [uuid(26DA5DE4-57A6-57BF-ACC9-AAC599C0B22B)]
                interface IAutoSuggestBoxQuerySubmittedEventArgs : IInspectable
                {
                    [propget] HRESULT QueryText([out] [retval] HSTRING* value);
                    [propget] HRESULT ChosenSuggestion([out] [retval] IInspectable** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBox)]
                [uuid(66DF3737-04E4-5676-B8A2-92C4DF24EEA5)]
                interface IAutoSuggestBoxStatics : IInspectable
                {
                    [propget] HRESULT MaxSuggestionListHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSuggestionListOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextMemberPathProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT UpdateTextOnSelectProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AutoMaximizeSuggestionAreaProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextBoxStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT QueryIconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ErrorTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs)]
                [uuid(7547C7E9-7429-5045-AD98-338A96B270B1)]
                interface IAutoSuggestBoxSuggestionChosenEventArgs : IInspectable
                {
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs)]
                [uuid(D7191D84-E886-547F-A3E2-12F0E05B20FA)]
                interface IAutoSuggestBoxTextChangedEventArgs : IInspectable
                {
                    [propget] HRESULT Reason([out] [retval] Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason* value);
                    [propput] HRESULT Reason([in] Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason value);
                    HRESULT CheckCurrent([out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs)]
                [uuid(40155FB9-253B-5624-A17A-294BE7A07F87)]
                interface IAutoSuggestBoxTextChangedEventArgsStatics : IInspectable
                {
                    [propget] HRESULT ReasonProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIcon)]
                [uuid(C370BC29-805B-5BAD-B615-EC640E579DBB)]
                interface IBitmapIcon : IInspectable
                {
                    [propget] HRESULT UriSource([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT UriSource([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT ShowAsMonochrome([out] [retval] boolean* value);
                    [propput] HRESULT ShowAsMonochrome([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIcon)]
                [uuid(B43B5DDC-CDB5-5AD6-8AC1-2FCCA33BE39E)]
                interface IBitmapIconFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.BitmapIcon** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIconSource)]
                [uuid(A6B6CCCC-EA8F-53CA-831F-2ABE85CD6D8C)]
                interface IBitmapIconSource : IInspectable
                {
                    [propget] HRESULT UriSource([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT UriSource([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT ShowAsMonochrome([out] [retval] boolean* value);
                    [propput] HRESULT ShowAsMonochrome([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIconSource)]
                [uuid(7D484C14-F5F6-5E39-B4E4-B6108D2EE095)]
                interface IBitmapIconSourceFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.BitmapIconSource** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIconSource)]
                [uuid(F4BA77BD-E13F-583B-B9F6-862E73753517)]
                interface IBitmapIconSourceStatics : IInspectable
                {
                    [propget] HRESULT UriSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowAsMonochromeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.BitmapIcon)]
                [uuid(01C67EB2-327E-5C4E-AFB4-38B02ED12886)]
                interface IBitmapIconStatics : IInspectable
                {
                    [propget] HRESULT UriSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowAsMonochromeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Border)]
                [uuid(1CA13B47-FF5C-5ABC-A411-A177DF9482A9)]
                interface IBorder : IInspectable
                {
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Child([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Child([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT ChildTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ChildTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT BackgroundTransition([out] [retval] Microsoft.UI.Xaml.BrushTransition** value);
                    [propput] HRESULT BackgroundTransition([in] Microsoft.UI.Xaml.BrushTransition* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Border)]
                [uuid(9385CD66-C178-5176-B4A5-160E00E93935)]
                interface IBorderStatics : IInspectable
                {
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ChildTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Button)]
                [uuid(216C183D-D07A-5AA5-B8A4-0300A2683E87)]
                interface IButton : IInspectable
                {
                    [propget] HRESULT Flyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT Flyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Button)]
                [uuid(FE393422-D91C-57B1-9A9C-2C7E3F41F77C)]
                interface IButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Button** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Button)]
                [uuid(57823D25-B26A-5E0F-94F6-BBAE70683DC5)]
                interface IButtonStatics : IInspectable
                {
                    [propget] HRESULT FlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarDatePicker)]
                [uuid(E3D9FAA1-0FD0-5932-A6DB-FF00C003AC21)]
                interface ICalendarDatePicker : IInspectable
                {
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT Date([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT IsCalendarOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsCalendarOpen([in] boolean value);
                    [propget] HRESULT DateFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT DateFormat([in] HSTRING value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT CalendarViewStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT CalendarViewStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [propget] HRESULT MinDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MinDate([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT MaxDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MaxDate([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT IsTodayHighlighted([out] [retval] boolean* value);
                    [propput] HRESULT IsTodayHighlighted([in] boolean value);
                    [propget] HRESULT DisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode* value);
                    [propput] HRESULT DisplayMode([in] Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode value);
                    [propget] HRESULT FirstDayOfWeek([out] [retval] Windows.Globalization.DayOfWeek* value);
                    [propput] HRESULT FirstDayOfWeek([in] Windows.Globalization.DayOfWeek value);
                    [propget] HRESULT DayOfWeekFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT DayOfWeekFormat([in] HSTRING value);
                    [propget] HRESULT CalendarIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT CalendarIdentifier([in] HSTRING value);
                    [propget] HRESULT IsOutOfScopeEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsOutOfScopeEnabled([in] boolean value);
                    [propget] HRESULT IsGroupLabelVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsGroupLabelVisible([in] boolean value);
                    [eventadd] HRESULT CalendarViewDayItemChanging([in] Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CalendarViewDayItemChanging([in] EventRegistrationToken token);
                    [eventadd] HRESULT DateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarDatePicker*, Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DateChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT Opened([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                    HRESULT SetDisplayDate([in] Windows.Foundation.DateTime date);
                    HRESULT SetYearDecadeDisplayDimensions([in] INT32 columns, [in] INT32 rows);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs)]
                [uuid(57C212D7-C2F2-54A0-9D41-F263B1E5106E)]
                interface ICalendarDatePickerDateChangedEventArgs : IInspectable
                {
                    [propget] HRESULT NewDate([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propget] HRESULT OldDate([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarDatePicker)]
                [uuid(B00C7818-955A-5524-B451-93868230892F)]
                interface ICalendarDatePickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CalendarDatePicker** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarDatePicker)]
                [uuid(E74EB740-1AEB-591F-B84A-EF881C3B527E)]
                interface ICalendarDatePickerStatics : IInspectable
                {
                    [propget] HRESULT DateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCalendarOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DateFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarViewStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinDateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxDateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTodayHighlightedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstDayOfWeekProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayOfWeekFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsOutOfScopeEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsGroupLabelVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarView)]
                [uuid(77534B94-C2E8-5545-A750-73F60D0252F1)]
                interface ICalendarView : IInspectable
                {
                    [propget] HRESULT CalendarIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT CalendarIdentifier([in] HSTRING value);
                    [propget] HRESULT DayOfWeekFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT DayOfWeekFormat([in] HSTRING value);
                    [propget] HRESULT IsGroupLabelVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsGroupLabelVisible([in] boolean value);
                    [propget] HRESULT DisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode* value);
                    [propput] HRESULT DisplayMode([in] Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode value);
                    [propget] HRESULT FirstDayOfWeek([out] [retval] Windows.Globalization.DayOfWeek* value);
                    [propput] HRESULT FirstDayOfWeek([in] Windows.Globalization.DayOfWeek value);
                    [propget] HRESULT IsOutOfScopeEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsOutOfScopeEnabled([in] boolean value);
                    [propget] HRESULT IsTodayHighlighted([out] [retval] boolean* value);
                    [propput] HRESULT IsTodayHighlighted([in] boolean value);
                    [propget] HRESULT MaxDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MaxDate([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT MinDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MinDate([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT NumberOfWeeksInView([out] [retval] INT32* value);
                    [propput] HRESULT NumberOfWeeksInView([in] INT32 value);
                    [propget] HRESULT SelectedDates([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.DateTime>** value);
                    [propget] HRESULT SelectionMode([out] [retval] Microsoft.UI.Xaml.Controls.CalendarViewSelectionMode* value);
                    [propput] HRESULT SelectionMode([in] Microsoft.UI.Xaml.Controls.CalendarViewSelectionMode value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings** value);
                    [propget] HRESULT FocusBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT FocusBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT SelectedHoverBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT SelectedHoverBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT SelectedPressedBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT SelectedPressedBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT SelectedBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT SelectedBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT HoverBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT HoverBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT PressedBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT PressedBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT CalendarItemBorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT CalendarItemBorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT OutOfScopeBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT OutOfScopeBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT CalendarItemBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT CalendarItemBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT PressedForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT PressedForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT TodayForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT TodayForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BlackoutForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BlackoutForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT SelectedForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT SelectedForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT OutOfScopeForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT OutOfScopeForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT CalendarItemForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT CalendarItemForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT DayItemFontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT DayItemFontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT DayItemFontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT DayItemFontSize([in] DOUBLE value);
                    [propget] HRESULT DayItemFontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT DayItemFontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT DayItemFontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT DayItemFontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT TodayFontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT TodayFontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FirstOfMonthLabelFontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FirstOfMonthLabelFontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FirstOfMonthLabelFontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FirstOfMonthLabelFontSize([in] DOUBLE value);
                    [propget] HRESULT FirstOfMonthLabelFontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FirstOfMonthLabelFontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FirstOfMonthLabelFontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FirstOfMonthLabelFontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT MonthYearItemFontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT MonthYearItemFontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT MonthYearItemFontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT MonthYearItemFontSize([in] DOUBLE value);
                    [propget] HRESULT MonthYearItemFontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT MonthYearItemFontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT MonthYearItemFontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT MonthYearItemFontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FirstOfYearDecadeLabelFontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FirstOfYearDecadeLabelFontSize([in] DOUBLE value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FirstOfYearDecadeLabelFontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FirstOfYearDecadeLabelFontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT HorizontalDayItemAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalDayItemAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalDayItemAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalDayItemAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                    [propget] HRESULT HorizontalFirstOfMonthLabelAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalFirstOfMonthLabelAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalFirstOfMonthLabelAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalFirstOfMonthLabelAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                    [propget] HRESULT CalendarItemBorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT CalendarItemBorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CalendarViewDayItemStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT CalendarViewDayItemStyle([in] Microsoft.UI.Xaml.Style* value);
                    [eventadd] HRESULT CalendarViewDayItemChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CalendarViewDayItemChanging([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectedDatesChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectedDatesChanged([in] EventRegistrationToken token);
                    HRESULT SetDisplayDate([in] Windows.Foundation.DateTime date);
                    HRESULT SetYearDecadeDisplayDimensions([in] INT32 columns, [in] INT32 rows);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarViewDayItem)]
                [uuid(947D3A07-6FA4-553C-9B12-57CA1BF72E9E)]
                interface ICalendarViewDayItem : IInspectable
                {
                    [propget] HRESULT IsBlackout([out] [retval] boolean* value);
                    [propput] HRESULT IsBlackout([in] boolean value);
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.DateTime* value);
                    HRESULT SetDensityColors([in] Windows.Foundation.Collections.IIterable<Windows.UI.Color>* colors);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs)]
                [uuid(E894FE7F-12F6-5B1A-88A2-A96764C1273F)]
                interface ICalendarViewDayItemChangingEventArgs : IInspectable
                {
                    [propget] HRESULT InRecycleQueue([out] [retval] boolean* value);
                    [propget] HRESULT Item([out] [retval] Microsoft.UI.Xaml.Controls.CalendarViewDayItem** value);
                    [propget] HRESULT Phase([out] [retval] UINT32* value);
                    [overload("RegisterUpdateCallback")] HRESULT RegisterUpdateCallback([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs*>* callback);
                    [overload("RegisterUpdateCallback")] HRESULT RegisterUpdateCallbackWithPhase([in] UINT32 callbackPhase, [in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CalendarView*, Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs*>* callback);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarViewDayItem)]
                [uuid(E6159E51-1C48-5A77-A3A1-AEF59D6A8C4E)]
                interface ICalendarViewDayItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CalendarViewDayItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarViewDayItem)]
                [uuid(2B2C4006-57FA-5F0F-B8ED-26E21F910E3A)]
                interface ICalendarViewDayItemStatics : IInspectable
                {
                    [propget] HRESULT IsBlackoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarView)]
                [uuid(2F31D1EB-8229-517C-B3A6-5A5F28724E8F)]
                interface ICalendarViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CalendarView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs)]
                [uuid(675F688F-BC30-59F6-83C4-140BD053A09A)]
                interface ICalendarViewSelectedDatesChangedEventArgs : IInspectable
                {
                    [propget] HRESULT AddedDates([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Foundation.DateTime>** value);
                    [propget] HRESULT RemovedDates([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Foundation.DateTime>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CalendarView)]
                [uuid(39E382A8-F1E6-564E-963F-79B7C6366F29)]
                interface ICalendarViewStatics : IInspectable
                {
                    [propget] HRESULT CalendarIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayOfWeekFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsGroupLabelVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstDayOfWeekProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsOutOfScopeEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTodayHighlightedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxDateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinDateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NumberOfWeeksInViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedDatesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FocusBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedHoverBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedPressedBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HoverBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PressedBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarItemBorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OutOfScopeBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarItemBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PressedForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TodayForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BlackoutForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OutOfScopeForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarItemForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayItemFontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayItemFontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayItemFontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayItemFontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TodayFontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfMonthLabelFontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfMonthLabelFontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfMonthLabelFontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfMonthLabelFontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthYearItemFontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthYearItemFontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthYearItemFontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthYearItemFontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FirstOfYearDecadeLabelFontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalDayItemAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalDayItemAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalFirstOfMonthLabelAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalFirstOfMonthLabelAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarItemBorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarViewDayItemStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs)]
                [uuid(B76FAF94-3172-5C50-9507-26CD873815A1)]
                interface ICandidateWindowBoundsChangedEventArgs : IInspectable
                {
                    [propget] HRESULT Bounds([out] [retval] Windows.Foundation.Rect* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Canvas)]
                [uuid(457BA139-1146-51D2-807E-D9D65C927060)]
                interface ICanvas : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Canvas)]
                [uuid(374C5050-3481-5557-9948-804C0B8EEA89)]
                interface ICanvasFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Canvas** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Canvas)]
                [uuid(C00D5E0F-77E3-5C59-8FCD-86761F0C6607)]
                interface ICanvasStatics : IInspectable
                {
                    [propget] HRESULT LeftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetLeft([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] DOUBLE* result);
                    HRESULT SetLeft([in] Microsoft.UI.Xaml.UIElement* element, [in] DOUBLE length);
                    [propget] HRESULT TopProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetTop([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] DOUBLE* result);
                    HRESULT SetTop([in] Microsoft.UI.Xaml.UIElement* element, [in] DOUBLE length);
                    [propget] HRESULT ZIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetZIndex([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] INT32* result);
                    HRESULT SetZIndex([in] Microsoft.UI.Xaml.UIElement* element, [in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CaptureElement)]
                [uuid(91A04307-304D-5671-988C-AD2621DD8751)]
                interface ICaptureElement : IInspectable
                {
                    [propget] HRESULT Source([out] [retval] Windows.Media.Capture.MediaCapture** value);
                    [propput] HRESULT Source([in] Windows.Media.Capture.MediaCapture* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CaptureElement)]
                [uuid(0D4FCC24-C98C-5B0C-B6D1-76CD8A3ED8E2)]
                interface ICaptureElementStatics : IInspectable
                {
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CheckBox)]
                [uuid(C5830000-4C9D-5FDD-9346-674C71CD80C5)]
                interface ICheckBox : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CheckBox)]
                [uuid(F43FF58D-31D5-5835-AF7B-375BC6A9BCF3)]
                interface ICheckBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CheckBox** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs)]
                [uuid(2DB1B0B0-AEE9-55FA-8C30-C98F00643D00)]
                interface IChoosingGroupHeaderContainerEventArgs : IInspectable
                {
                    [propget] HRESULT GroupHeaderContainer([out] [retval] Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem** value);
                    [propput] HRESULT GroupHeaderContainer([in] Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem* value);
                    [propget] HRESULT GroupIndex([out] [retval] INT32* value);
                    [propget] HRESULT Group([out] [retval] IInspectable** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs)]
                [uuid(B479B9D2-A63F-5638-9486-8CCC1F40251E)]
                interface IChoosingItemContainerEventArgs : IInspectable
                {
                    [propget] HRESULT ItemIndex([out] [retval] INT32* value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT ItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SelectorItem** value);
                    [propput] HRESULT ItemContainer([in] Microsoft.UI.Xaml.Controls.Primitives.SelectorItem* value);
                    [propget] HRESULT IsContainerPrepared([out] [retval] boolean* value);
                    [propput] HRESULT IsContainerPrepared([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs)]
                [uuid(76155AD9-E394-5313-832F-E21CF7B7FB0E)]
                interface ICleanUpVirtualizedItemEventArgs : IInspectable
                {
                    [propget] HRESULT Value([out] [retval] IInspectable** value);
                    [propget] HRESULT UIElement([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ColorChangedEventArgs)]
                [uuid(148D57A2-B1CB-5F5D-B6B5-512805D71761)]
                [version(0x00000001)]
                interface IColorChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldColor([out] [retval] Windows.UI.Color* value);
                    [propget] HRESULT NewColor([out] [retval] Windows.UI.Color* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ColorPicker)]
                [uuid(AE72B24B-F93F-5A19-8CE4-A18B73C3356D)]
                [version(0x00000001)]
                interface IColorPicker : IInspectable
                {
                    [propget] HRESULT Color([out] [retval] Windows.UI.Color* value);
                    [propput] HRESULT Color([in] Windows.UI.Color value);
                    [propget] HRESULT PreviousColor([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                    [propput] HRESULT PreviousColor([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                    [propget] HRESULT IsAlphaEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsAlphaEnabled([in] boolean value);
                    [propget] HRESULT IsColorSpectrumVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsColorSpectrumVisible([in] boolean value);
                    [propget] HRESULT IsColorPreviewVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsColorPreviewVisible([in] boolean value);
                    [propget] HRESULT IsColorSliderVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsColorSliderVisible([in] boolean value);
                    [propget] HRESULT IsAlphaSliderVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsAlphaSliderVisible([in] boolean value);
                    [propget] HRESULT IsMoreButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsMoreButtonVisible([in] boolean value);
                    [propget] HRESULT IsColorChannelTextInputVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsColorChannelTextInputVisible([in] boolean value);
                    [propget] HRESULT IsAlphaTextInputVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsAlphaTextInputVisible([in] boolean value);
                    [propget] HRESULT IsHexInputVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsHexInputVisible([in] boolean value);
                    [propget] HRESULT MinHue([out] [retval] INT32* value);
                    [propput] HRESULT MinHue([in] INT32 value);
                    [propget] HRESULT MaxHue([out] [retval] INT32* value);
                    [propput] HRESULT MaxHue([in] INT32 value);
                    [propget] HRESULT MinSaturation([out] [retval] INT32* value);
                    [propput] HRESULT MinSaturation([in] INT32 value);
                    [propget] HRESULT MaxSaturation([out] [retval] INT32* value);
                    [propput] HRESULT MaxSaturation([in] INT32 value);
                    [propget] HRESULT MinValue([out] [retval] INT32* value);
                    [propput] HRESULT MinValue([in] INT32 value);
                    [propget] HRESULT MaxValue([out] [retval] INT32* value);
                    [propput] HRESULT MaxValue([in] INT32 value);
                    [propget] HRESULT ColorSpectrumShape([out] [retval] Microsoft.UI.Xaml.Controls.ColorSpectrumShape* value);
                    [propput] HRESULT ColorSpectrumShape([in] Microsoft.UI.Xaml.Controls.ColorSpectrumShape value);
                    [propget] HRESULT ColorSpectrumComponents([out] [retval] Microsoft.UI.Xaml.Controls.ColorSpectrumComponents* value);
                    [propput] HRESULT ColorSpectrumComponents([in] Microsoft.UI.Xaml.Controls.ColorSpectrumComponents value);
                    [eventadd] HRESULT ColorChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ColorPicker*, Microsoft.UI.Xaml.Controls.ColorChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ColorChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ColorPicker)]
                [uuid(72C350E2-0A20-5B9B-AC54-633B97D7FFDE)]
                [version(0x00000001)]
                interface IColorPickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ColorPicker** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ColorPicker)]
                [uuid(920D2D62-172E-5771-B677-4069B5134574)]
                [version(0x00000001)]
                interface IColorPickerStatics : IInspectable
                {
                    [propget] HRESULT ColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreviousColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAlphaEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorSpectrumVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorPreviewVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorSliderVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAlphaSliderVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsMoreButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorChannelTextInputVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAlphaTextInputVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsHexInputVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinHueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxHueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinSaturationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxSaturationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ColorSpectrumShapeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ColorSpectrumComponentsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ColumnDefinition)]
                [uuid(454CEA14-87EC-5890-BB62-F1D82A94758E)]
                interface IColumnDefinition : IInspectable
                {
                    [propget] HRESULT Width([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                    [propput] HRESULT Width([in] Microsoft.UI.Xaml.GridLength value);
                    [propget] HRESULT MaxWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxWidth([in] DOUBLE value);
                    [propget] HRESULT MinWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinWidth([in] DOUBLE value);
                    [propget] HRESULT ActualWidth([out] [retval] DOUBLE* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ColumnDefinition)]
                [uuid(ABA4B755-CA63-5ED7-AE31-45F9F91920B0)]
                interface IColumnDefinitionStatics : IInspectable
                {
                    [propget] HRESULT WidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBox)]
                [uuid(C77DA58B-4FD7-51E0-A431-F84658A83E9E)]
                interface IComboBox : IInspectable
                {
                    [propget] HRESULT IsDropDownOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsDropDownOpen([in] boolean value);
                    [propget] HRESULT IsEditable([out] [retval] boolean* value);
                    [propput] HRESULT IsEditable([in] boolean value);
                    [propget] HRESULT IsSelectionBoxHighlighted([out] [retval] boolean* value);
                    [propget] HRESULT MaxDropDownHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxDropDownHeight([in] DOUBLE value);
                    [propget] HRESULT SelectionBoxItem([out] [retval] IInspectable** value);
                    [propget] HRESULT SelectionBoxItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings** value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [propget] HRESULT IsTextSearchEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextSearchEnabled([in] boolean value);
                    [propget] HRESULT SelectionChangedTrigger([out] [retval] Microsoft.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger* value);
                    [propput] HRESULT SelectionChangedTrigger([in] Microsoft.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger value);
                    [propget] HRESULT PlaceholderForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT PlaceholderForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT TextBoxStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT TextBoxStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [eventadd] HRESULT DropDownClosed([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DropDownClosed([in] EventRegistrationToken token);
                    [eventadd] HRESULT DropDownOpened([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DropDownOpened([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextSubmitted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ComboBox*, Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextSubmitted([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBox)]
                [uuid(71C1014B-ACDF-5C03-B5ED-02871CAAEB6B)]
                interface IComboBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ComboBox** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBoxItem)]
                [uuid(DF65F6F4-863F-558D-BC4E-82C12F28062F)]
                interface IComboBoxItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBoxItem)]
                [uuid(8540B906-C96B-592D-88D7-0C23A3386D93)]
                interface IComboBoxItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ComboBoxItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBox)]
                [uuid(A6AFBC7A-284F-5B9A-89FE-A334B613F895)]
                interface IComboBoxOverrides : IInspectable
                {
                    HRESULT OnDropDownClosed([in] IInspectable* e);
                    HRESULT OnDropDownOpened([in] IInspectable* e);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBox)]
                [uuid(1C0D07AA-C303-5CEE-A6F0-C18CE4879636)]
                interface IComboBoxStatics : IInspectable
                {
                    [propget] HRESULT IsEditableProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsDropDownOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxDropDownHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextSearchEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionChangedTriggerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextBoxStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ErrorTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs)]
                [uuid(0D7A9794-73B5-585E-BFBB-DE6DF7EB9FCF)]
                interface IComboBoxTextSubmittedEventArgs : IInspectable
                {
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBar)]
                [uuid(B7CA8EE3-A07A-5F69-8AB8-BE4E3E4CF0C8)]
                interface ICommandBar : IInspectable
                {
                    [propget] HRESULT PrimaryCommands([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>** value);
                    [propget] HRESULT SecondaryCommands([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>** value);
                    [propget] HRESULT CommandBarOverflowPresenterStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT CommandBarOverflowPresenterStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT CommandBarTemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings** value);
                    [propget] HRESULT DefaultLabelPosition([out] [retval] Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition* value);
                    [propput] HRESULT DefaultLabelPosition([in] Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition value);
                    [propget] HRESULT OverflowButtonVisibility([out] [retval] Microsoft.UI.Xaml.Controls.CommandBarOverflowButtonVisibility* value);
                    [propput] HRESULT OverflowButtonVisibility([in] Microsoft.UI.Xaml.Controls.CommandBarOverflowButtonVisibility value);
                    [propget] HRESULT IsDynamicOverflowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDynamicOverflowEnabled([in] boolean value);
                    [eventadd] HRESULT DynamicOverflowItemsChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.CommandBar*, Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DynamicOverflowItemsChanging([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(F8EB20B4-373E-5327-9942-66A1EA21F5F9)]
                interface ICommandBarElement : IInspectable
                {
                    [propget] HRESULT IsCompact([out] [retval] boolean* value);
                    [propput] HRESULT IsCompact([in] boolean value);
                    [propget] HRESULT IsInOverflow([out] [retval] boolean* value);
                    [propget] HRESULT DynamicOverflowOrder([out] [retval] INT32* value);
                    [propput] HRESULT DynamicOverflowOrder([in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBar)]
                [uuid(8D4079C3-FA0A-5BB1-B45D-499C378761B4)]
                interface ICommandBarFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CommandBar** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBarFlyout)]
                [uuid(18E2CC40-09CB-5F20-A715-F0B2039C5E18)]
                [version(0x00000001)]
                interface ICommandBarFlyout : IInspectable
                {
                    [propget] HRESULT PrimaryCommands([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>** value);
                    [propget] HRESULT SecondaryCommands([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.ICommandBarElement*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBarFlyout)]
                [uuid(A194DBE6-4311-5BD2-A8EB-B49C4733A33C)]
                [version(0x00000001)]
                interface ICommandBarFlyoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CommandBarFlyout** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(153D5B3E-C58F-571A-A42A-CEDA88706BE9)]
                interface ICommandBarLabeledElement : IInspectable
                {
                    HRESULT SetDefaultLabelPosition([in] Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition defaultLabelPosition);
                    HRESULT GetHasBottomLabel([out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(7A6DD3B4-9029-5927-8C47-E83EDF92F378)]
                interface ICommandBarOverflowElement : IInspectable
                {
                    [propget] HRESULT UseOverflowStyle([out] [retval] boolean* value);
                    [propput] HRESULT UseOverflowStyle([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBarOverflowPresenter)]
                [uuid(5FF69946-9B27-583B-A3C0-D44244B1BD38)]
                interface ICommandBarOverflowPresenter : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBarOverflowPresenter)]
                [uuid(D066ACF7-0EF5-591A-801E-52A084EEA6EB)]
                interface ICommandBarOverflowPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.CommandBarOverflowPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.CommandBar)]
                [uuid(4ED65848-4C67-588F-9666-11FF56D76F02)]
                interface ICommandBarStatics : IInspectable
                {
                    [propget] HRESULT PrimaryCommandsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryCommandsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandBarOverflowPresenterStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultLabelPositionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OverflowButtonVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsDynamicOverflowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(5C4FDE7D-F98B-5A3E-B851-F1D95142E0D0)]
                interface ICommandBarStaticsPrivate : IInspectable
                {
                    HRESULT GetCurrentBottomCommandBar([out] [retval] Microsoft.UI.Xaml.Controls.CommandBar** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs)]
                [uuid(F4C8C937-B070-53CE-A76C-074EE5750A71)]
                interface IContainerContentChangingEventArgs : IInspectable
                {
                    [propget] HRESULT ItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SelectorItem** value);
                    [propget] HRESULT InRecycleQueue([out] [retval] boolean* value);
                    [propget] HRESULT ItemIndex([out] [retval] INT32* value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT Phase([out] [retval] UINT32* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [overload("RegisterUpdateCallback")] HRESULT RegisterUpdateCallback([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs*>* callback);
                    [overload("RegisterUpdateCallback")] HRESULT RegisterUpdateCallbackWithPhase([in] UINT32 callbackPhase, [in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs*>* callback);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentControl)]
                [uuid(07E81761-11B2-52AE-8F8B-4D53D2B5900A)]
                interface IContentControl : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] IInspectable** value);
                    [propput] HRESULT Content([in] IInspectable* value);
                    [propget] HRESULT ContentTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ContentTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ContentTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT ContentTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT ContentTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ContentTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT ContentTemplateRoot([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentControl)]
                [uuid(3DEA958E-5ACD-5F80-8938-38634F51493A)]
                interface IContentControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ContentControl** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentControl)]
                [uuid(2504174A-017E-5A2D-9C28-D97C66AE9937)]
                interface IContentControlOverrides : IInspectable
                {
                    HRESULT OnContentChanged([in] IInspectable* oldContent, [in] IInspectable* newContent);
                    HRESULT OnContentTemplateChanged([in] Microsoft.UI.Xaml.DataTemplate* oldContentTemplate, [in] Microsoft.UI.Xaml.DataTemplate* newContentTemplate);
                    HRESULT OnContentTemplateSelectorChanged([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* oldContentTemplateSelector, [in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* newContentTemplateSelector);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(104C3BD5-8CA4-5100-9292-1BAF75E43C08)]
                interface IContentControlPrivate : IInspectable
                {
                    HRESULT GetGlobalBounds([out] [retval] Windows.Foundation.Rect* result);
                    HRESULT GetRasterizationScale([out] [retval] FLOAT* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentControl)]
                [uuid(F25484F4-2FED-5A0A-8864-7D6D4AC43EF8)]
                interface IContentControlStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialog)]
                [uuid(AC2145A3-4A32-5305-A81D-47509515BFCE)]
                interface IContentDialog : IInspectable
                {
                    [propget] HRESULT Title([out] [retval] IInspectable** value);
                    [propput] HRESULT Title([in] IInspectable* value);
                    [propget] HRESULT TitleTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT TitleTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT FullSizeDesired([out] [retval] boolean* value);
                    [propput] HRESULT FullSizeDesired([in] boolean value);
                    [propget] HRESULT PrimaryButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT PrimaryButtonText([in] HSTRING value);
                    [propget] HRESULT SecondaryButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT SecondaryButtonText([in] HSTRING value);
                    [propget] HRESULT CloseButtonText([out] [retval] HSTRING* value);
                    [propput] HRESULT CloseButtonText([in] HSTRING value);
                    [propget] HRESULT PrimaryButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT PrimaryButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT SecondaryButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT SecondaryButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT CloseButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT CloseButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT PrimaryButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT PrimaryButtonCommandParameter([in] IInspectable* value);
                    [propget] HRESULT SecondaryButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT SecondaryButtonCommandParameter([in] IInspectable* value);
                    [propget] HRESULT CloseButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT CloseButtonCommandParameter([in] IInspectable* value);
                    [propget] HRESULT IsPrimaryButtonEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsPrimaryButtonEnabled([in] boolean value);
                    [propget] HRESULT IsSecondaryButtonEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSecondaryButtonEnabled([in] boolean value);
                    [propget] HRESULT PrimaryButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT PrimaryButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT SecondaryButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT SecondaryButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT CloseButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT CloseButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT DefaultButton([out] [retval] Microsoft.UI.Xaml.Controls.ContentDialogButton* value);
                    [propput] HRESULT DefaultButton([in] Microsoft.UI.Xaml.Controls.ContentDialogButton value);
                    [eventadd] HRESULT Closing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closing([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                    [eventadd] HRESULT Opened([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                    [eventadd] HRESULT PrimaryButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PrimaryButtonClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT SecondaryButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SecondaryButtonClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT CloseButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ContentDialog*, Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CloseButtonClick([in] EventRegistrationToken token);
                    HRESULT Hide();
                    [overload("ShowAsync")] HRESULT ShowAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Controls.ContentDialogResult>** operation);
                    [overload("ShowAsync")] HRESULT ShowAsyncWithPlacement([in] Microsoft.UI.Xaml.Controls.ContentDialogPlacement placement, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Controls.ContentDialogResult>** operation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogButtonClickDeferral)]
                [uuid(DDCA6D2E-A81A-5F61-8B87-E4B6EC5FA398)]
                interface IContentDialogButtonClickDeferral : IInspectable
                {
                    HRESULT Complete();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs)]
                [uuid(BAE6261C-362F-5342-BA26-5F6990EF726C)]
                interface IContentDialogButtonClickEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    HRESULT GetDeferral([out] [retval] Microsoft.UI.Xaml.Controls.ContentDialogButtonClickDeferral** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs)]
                [uuid(9B84E681-1AB6-5485-88B2-D0D3C05B29F3)]
                interface IContentDialogClosedEventArgs : IInspectable
                {
                    [propget] HRESULT Result([out] [retval] Microsoft.UI.Xaml.Controls.ContentDialogResult* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogClosingDeferral)]
                [uuid(9D74ECC1-67D3-5F02-9B30-56F3B2E8B0A6)]
                interface IContentDialogClosingDeferral : IInspectable
                {
                    HRESULT Complete();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs)]
                [uuid(12782103-3B80-511C-9128-12CB8CDAC444)]
                interface IContentDialogClosingEventArgs : IInspectable
                {
                    [propget] HRESULT Result([out] [retval] Microsoft.UI.Xaml.Controls.ContentDialogResult* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    HRESULT GetDeferral([out] [retval] Microsoft.UI.Xaml.Controls.ContentDialogClosingDeferral** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialog)]
                [uuid(A05B3AD7-C60E-545A-9EE4-F098220ED816)]
                interface IContentDialogFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ContentDialog** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs)]
                [uuid(D1355ED8-64ED-5BBC-9411-5F4DBCA7D93F)]
                interface IContentDialogOpenedEventArgs : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentDialog)]
                [uuid(397B18DD-6964-5056-97C3-D69CD7716A4B)]
                interface IContentDialogStatics : IInspectable
                {
                    [propget] HRESULT TitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TitleTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FullSizeDesiredProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PrimaryButtonTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryButtonTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PrimaryButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PrimaryButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPrimaryButtonEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSecondaryButtonEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PrimaryButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultButtonProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentPresenter)]
                [uuid(075E6CA8-DA46-5EC6-8C64-03B3DDEAF74F)]
                interface IContentPresenter : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] IInspectable** value);
                    [propput] HRESULT Content([in] IInspectable* value);
                    [propget] HRESULT ContentTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ContentTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ContentTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT ContentTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT ContentTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ContentTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                    [propput] HRESULT FontStretch([in] Windows.UI.Text.FontStretch value);
                    [propget] HRESULT CharacterSpacing([out] [retval] INT32* value);
                    [propput] HRESULT CharacterSpacing([in] INT32 value);
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT OpticalMarginAlignment([out] [retval] Microsoft.UI.Xaml.OpticalMarginAlignment* value);
                    [propput] HRESULT OpticalMarginAlignment([in] Microsoft.UI.Xaml.OpticalMarginAlignment value);
                    [propget] HRESULT TextLineBounds([out] [retval] Microsoft.UI.Xaml.TextLineBounds* value);
                    [propput] HRESULT TextLineBounds([in] Microsoft.UI.Xaml.TextLineBounds value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT BackgroundTransition([out] [retval] Microsoft.UI.Xaml.BrushTransition** value);
                    [propput] HRESULT BackgroundTransition([in] Microsoft.UI.Xaml.BrushTransition* value);
                    [propget] HRESULT TextWrapping([out] [retval] Microsoft.UI.Xaml.TextWrapping* value);
                    [propput] HRESULT TextWrapping([in] Microsoft.UI.Xaml.TextWrapping value);
                    [propget] HRESULT MaxLines([out] [retval] INT32* value);
                    [propput] HRESULT MaxLines([in] INT32 value);
                    [propget] HRESULT LineStackingStrategy([out] [retval] Microsoft.UI.Xaml.LineStackingStrategy* value);
                    [propput] HRESULT LineStackingStrategy([in] Microsoft.UI.Xaml.LineStackingStrategy value);
                    [propget] HRESULT LineHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT LineHeight([in] DOUBLE value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT HorizontalContentAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalContentAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalContentAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalContentAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentPresenter)]
                [uuid(730B1D5E-2540-5A3D-A6C7-888AA8614610)]
                interface IContentPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ContentPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentPresenter)]
                [uuid(00E96954-D6E0-510F-A2D2-38A032B96236)]
                interface IContentPresenterOverrides : IInspectable
                {
                    HRESULT OnContentTemplateChanged([in] Microsoft.UI.Xaml.DataTemplate* oldContentTemplate, [in] Microsoft.UI.Xaml.DataTemplate* newContentTemplate);
                    HRESULT OnContentTemplateSelectorChanged([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* oldContentTemplateSelector, [in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* newContentTemplateSelector);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContentPresenter)]
                [uuid(C3E55F6C-7ABE-568F-B67B-8EBD3274F33E)]
                interface IContentPresenterStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OpticalMarginAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextLineBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextWrappingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLinesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineStackingStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ContextMenuEventArgs)]
                [uuid(65637BB3-E279-5507-BD16-6F7BA6705F31)]
                interface IContextMenuEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT CursorLeft([out] [retval] DOUBLE* value);
                    [propget] HRESULT CursorTop([out] [retval] DOUBLE* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Control)]
                [uuid(857D6E8A-D45A-5C69-A99C-BF6A5C54FB38)]
                interface IControl : IInspectable
                {
                    [propget] HRESULT IsFocusEngagementEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsFocusEngagementEnabled([in] boolean value);
                    [propget] HRESULT IsFocusEngaged([out] [retval] boolean* value);
                    [propput] HRESULT IsFocusEngaged([in] boolean value);
                    [propget] HRESULT RequiresPointer([out] [retval] Microsoft.UI.Xaml.Controls.RequiresPointer* value);
                    [propput] HRESULT RequiresPointer([in] Microsoft.UI.Xaml.Controls.RequiresPointer value);
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                    [propput] HRESULT FontStretch([in] Windows.UI.Text.FontStretch value);
                    [propget] HRESULT CharacterSpacing([out] [retval] INT32* value);
                    [propput] HRESULT CharacterSpacing([in] INT32 value);
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT IsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsEnabled([in] boolean value);
                    [propget] HRESULT TabNavigation([out] [retval] Microsoft.UI.Xaml.Input.KeyboardNavigationMode* value);
                    [propput] HRESULT TabNavigation([in] Microsoft.UI.Xaml.Input.KeyboardNavigationMode value);
                    [propget] HRESULT Template([out] [retval] Microsoft.UI.Xaml.Controls.ControlTemplate** value);
                    [propput] HRESULT Template([in] Microsoft.UI.Xaml.Controls.ControlTemplate* value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT HorizontalContentAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalContentAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalContentAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalContentAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT DefaultStyleResourceUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT DefaultStyleResourceUri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT ElementSoundMode([out] [retval] Microsoft.UI.Xaml.ElementSoundMode* value);
                    [propput] HRESULT ElementSoundMode([in] Microsoft.UI.Xaml.ElementSoundMode value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [eventadd] HRESULT FocusEngaged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT FocusEngaged([in] EventRegistrationToken token);
                    [eventadd] HRESULT FocusDisengaged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control*, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT FocusDisengaged([in] EventRegistrationToken token);
                    [eventadd] HRESULT IsEnabledChanged([in] Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsEnabledChanged([in] EventRegistrationToken token);
                    HRESULT RemoveFocusEngagement();
                    HRESULT ApplyTemplate([out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Control)]
                [uuid(25159233-9438-5534-AEB9-00EB059CF73F)]
                interface IControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Control** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Control)]
                [uuid(5F644395-2177-5161-9F87-C6C749C73A03)]
                interface IControlOverrides : IInspectable
                {
                    HRESULT OnPointerEntered([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerPressed([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerMoved([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerReleased([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerExited([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerCaptureLost([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerCanceled([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnPointerWheelChanged([in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);
                    HRESULT OnTapped([in] Microsoft.UI.Xaml.Input.TappedRoutedEventArgs* e);
                    HRESULT OnDoubleTapped([in] Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs* e);
                    HRESULT OnHolding([in] Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs* e);
                    HRESULT OnRightTapped([in] Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs* e);
                    HRESULT OnManipulationStarting([in] Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs* e);
                    HRESULT OnManipulationInertiaStarting([in] Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs* e);
                    HRESULT OnManipulationStarted([in] Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs* e);
                    HRESULT OnManipulationDelta([in] Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs* e);
                    HRESULT OnManipulationCompleted([in] Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs* e);
                    HRESULT OnKeyUp([in] Microsoft.UI.Xaml.Input.KeyRoutedEventArgs* e);
                    HRESULT OnKeyDown([in] Microsoft.UI.Xaml.Input.KeyRoutedEventArgs* e);
                    HRESULT OnPreviewKeyDown([in] Microsoft.UI.Xaml.Input.KeyRoutedEventArgs* e);
                    HRESULT OnPreviewKeyUp([in] Microsoft.UI.Xaml.Input.KeyRoutedEventArgs* e);
                    HRESULT OnGotFocus([in] Microsoft.UI.Xaml.RoutedEventArgs* e);
                    HRESULT OnLostFocus([in] Microsoft.UI.Xaml.RoutedEventArgs* e);
                    HRESULT OnCharacterReceived([in] Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs* e);
                    HRESULT OnDragEnter([in] Microsoft.UI.Xaml.DragEventArgs* e);
                    HRESULT OnDragLeave([in] Microsoft.UI.Xaml.DragEventArgs* e);
                    HRESULT OnDragOver([in] Microsoft.UI.Xaml.DragEventArgs* e);
                    HRESULT OnDrop([in] Microsoft.UI.Xaml.DragEventArgs* e);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Control)]
                [uuid(5C750339-1789-5095-A214-DD9D0564E579)]
                interface IControlProtected : IInspectable
                {
                    [propget] HRESULT DefaultStyleKey([out] [retval] IInspectable** value);
                    [propput] HRESULT DefaultStyleKey([in] IInspectable* value);
                    HRESULT GetTemplateChild([in] HSTRING childName, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Control)]
                [uuid(C3AE388D-AA36-5E10-ACAC-98415F47BCC7)]
                interface IControlStatics : IInspectable
                {
                    [propget] HRESULT IsFocusEngagementEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFocusEngagedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RequiresPointerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabNavigationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalContentAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultStyleKeyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultStyleResourceUriProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ElementSoundModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTemplateFocusTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsTemplateFocusTarget([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] boolean* result);
                    HRESULT SetIsTemplateFocusTarget([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] boolean value);
                    [propget] HRESULT IsTemplateKeyTipTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsTemplateKeyTipTarget([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsTemplateKeyTipTarget([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ControlTemplate)]
                [uuid(3A192751-2106-547A-ACA0-F15AE8926EA0)]
                interface IControlTemplate : IInspectable
                {
                    [propget] HRESULT TargetType([out] [retval] Windows.UI.Xaml.Interop.TypeName* value);
                    [propput] HRESULT TargetType([in] Windows.UI.Xaml.Interop.TypeName value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DataTemplateSelector)]
                [uuid(86CA4FA4-7DE0-5049-82F5-39EC78569028)]
                interface IDataTemplateSelector : IInspectable
                {
                    [overload("SelectTemplate")] HRESULT SelectTemplate([in] IInspectable* item, [in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.DataTemplate** result);
                    [overload("SelectTemplate")] HRESULT SelectTemplateForItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DataTemplate** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DataTemplateSelector)]
                [uuid(43217EDA-6F7F-5B80-A70B-944511B354AB)]
                interface IDataTemplateSelectorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DataTemplateSelector)]
                [uuid(980448CC-C114-5B89-8E09-61B0F264E592)]
                interface IDataTemplateSelectorOverrides : IInspectable
                {
                    [overload("SelectTemplateCore")] HRESULT SelectTemplateCore([in] IInspectable* item, [in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.DataTemplate** result);
                    [overload("SelectTemplateCore")] HRESULT SelectTemplateForItemCore([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DataTemplate** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickedEventArgs)]
                [uuid(001F5D4C-4AC2-5E0C-9673-E413C4BD60F3)]
                interface IDatePickedEventArgs : IInspectable
                {
                    [propget] HRESULT OldDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propget] HRESULT NewDate([out] [retval] Windows.Foundation.DateTime* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePicker)]
                [uuid(CA1DC351-3AE3-5247-8263-16BD516C6E72)]
                interface IDatePicker : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT CalendarIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT CalendarIdentifier([in] HSTRING value);
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT Date([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT DayVisible([out] [retval] boolean* value);
                    [propput] HRESULT DayVisible([in] boolean value);
                    [propget] HRESULT MonthVisible([out] [retval] boolean* value);
                    [propput] HRESULT MonthVisible([in] boolean value);
                    [propget] HRESULT YearVisible([out] [retval] boolean* value);
                    [propput] HRESULT YearVisible([in] boolean value);
                    [propget] HRESULT DayFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT DayFormat([in] HSTRING value);
                    [propget] HRESULT MonthFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT MonthFormat([in] HSTRING value);
                    [propget] HRESULT YearFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT YearFormat([in] HSTRING value);
                    [propget] HRESULT MinYear([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MinYear([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT MaxYear([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MaxYear([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [propget] HRESULT SelectedDate([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT SelectedDate([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [eventadd] HRESULT DateChanged([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DateChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectedDateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePicker*, Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectedDateChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePicker)]
                [uuid(A16BEA02-B3E0-5FDC-B5BB-25F794DC483B)]
                interface IDatePickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.DatePicker** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyout)]
                [uuid(BA7ECF3C-EDB1-593B-A4AC-C09802EACE99)]
                interface IDatePickerFlyout : IInspectable
                {
                    [propget] HRESULT CalendarIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT CalendarIdentifier([in] HSTRING value);
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT Date([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT DayVisible([out] [retval] boolean* value);
                    [propput] HRESULT DayVisible([in] boolean value);
                    [propget] HRESULT MonthVisible([out] [retval] boolean* value);
                    [propput] HRESULT MonthVisible([in] boolean value);
                    [propget] HRESULT YearVisible([out] [retval] boolean* value);
                    [propput] HRESULT YearVisible([in] boolean value);
                    [propget] HRESULT MinYear([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MinYear([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT MaxYear([out] [retval] Windows.Foundation.DateTime* value);
                    [propput] HRESULT MaxYear([in] Windows.Foundation.DateTime value);
                    [propget] HRESULT DayFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT DayFormat([in] HSTRING value);
                    [propget] HRESULT MonthFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT MonthFormat([in] HSTRING value);
                    [propget] HRESULT YearFormat([out] [retval] HSTRING* value);
                    [propput] HRESULT YearFormat([in] HSTRING value);
                    [eventadd] HRESULT DatePicked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.DatePickerFlyout*, Microsoft.UI.Xaml.Controls.DatePickedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DatePicked([in] EventRegistrationToken token);
                    HRESULT ShowAtAsync([in] Microsoft.UI.Xaml.FrameworkElement* target, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.IReference<Windows.Foundation.DateTime>*>** operation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyoutItem)]
                [uuid(EB7D591E-1314-5409-9231-5B8E3BE187A7)]
                interface IDatePickerFlyoutItem : IInspectable
                {
                    [propget] HRESULT PrimaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT PrimaryText([in] HSTRING value);
                    [propget] HRESULT SecondaryText([out] [retval] HSTRING* value);
                    [propput] HRESULT SecondaryText([in] HSTRING value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyoutItem)]
                [uuid(DA7140FC-5613-5AB2-9AAB-36CF396EF56C)]
                interface IDatePickerFlyoutItemStatics : IInspectable
                {
                    [propget] HRESULT PrimaryTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SecondaryTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyoutPresenter)]
                [uuid(1ADFDA34-60F5-501B-B8E2-73A49CAD6712)]
                interface IDatePickerFlyoutPresenter : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDefaultShadowEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyoutPresenter)]
                [uuid(611359B5-1AA8-528C-8E57-0378A9E71C57)]
                interface IDatePickerFlyoutPresenterStatics : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerFlyout)]
                [uuid(6A22EF58-7A7C-5883-8834-A6584585AF03)]
                interface IDatePickerFlyoutStatics : IInspectable
                {
                    [propget] HRESULT CalendarIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT YearVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinYearProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxYearProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT YearFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs)]
                [uuid(305ED436-370F-5E82-ACF2-F1413E8F9EC4)]
                interface IDatePickerSelectedValueChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldDate([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propget] HRESULT NewDate([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePicker)]
                [uuid(4D810253-AAE7-5BE1-B7A8-AF451CA433E1)]
                interface IDatePickerStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CalendarIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT YearVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DayFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MonthFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT YearFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinYearProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxYearProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedDateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs)]
                [uuid(BD4E36CA-F6AB-57CF-84F0-75D024084F20)]
                interface IDatePickerValueChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldDate([out] [retval] Windows.Foundation.DateTime* value);
                    [propget] HRESULT NewDate([out] [retval] Windows.Foundation.DateTime* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs)]
                [uuid(C0138552-F467-5C3E-8AF4-593607762844)]
                interface IDragItemsCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVectorView<IInspectable*>** value);
                    [propget] HRESULT DropResult([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs)]
                [uuid(A6938886-20DF-558E-AC74-BB5B7F2F7E90)]
                interface IDragItemsStartingEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.DropDownButton)]
                [uuid(C1E9FA91-4F95-5796-8A7B-3B7594A12C69)]
                [version(0x00000001)]
                interface IDropDownButton : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.DropDownButton)]
                [uuid(7CF3E13B-668D-57E7-B5D6-F5CA3DBC80BD)]
                [version(0x00000001)]
                interface IDropDownButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.DropDownButton** value);
                }

                [uuid(AB00E5CF-1BE6-559C-AD5B-0253BB17C0F7)]
                [version(0x00000001)]
                interface IDynamicAnimatedVisualSource : IInspectable
                    requires
                        Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
                {
                    [eventadd] HRESULT AnimatedVisualInvalidated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AnimatedVisualInvalidated([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs)]
                [uuid(BF64C37F-6332-541D-80F1-876C5BB9B196)]
                interface IDynamicOverflowItemsChangingEventArgs : IInspectable
                {
                    [propget] HRESULT Action([out] [retval] Microsoft.UI.Xaml.Controls.CommandBarDynamicOverflowAction* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementAnimator)]
                [uuid(CA2CF0FB-5405-5677-AE79-37239CED4324)]
                [version(0x00000001)]
                interface IElementAnimator : IInspectable
                {
                    [eventadd] HRESULT ShowAnimationCompleted([in] Microsoft.UI.Xaml.Controls.ElementAnimationCompleted* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ShowAnimationCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT HideAnimationCompleted([in] Microsoft.UI.Xaml.Controls.ElementAnimationCompleted* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT HideAnimationCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT BoundsChangeAnimationCompleted([in] Microsoft.UI.Xaml.Controls.ElementAnimationCompleted* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BoundsChangeAnimationCompleted([in] EventRegistrationToken token);
                    HRESULT OnElementShown([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context);
                    HRESULT OnElementHidden([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context);
                    HRESULT OnElementBoundsChanged([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [in] Windows.Foundation.Rect oldBounds, [in] Windows.Foundation.Rect newBounds);
                    HRESULT HasShowAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [out] [retval] boolean* result);
                    HRESULT HasHideAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [out] [retval] boolean* result);
                    HRESULT HasBoundsChangeAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [in] Windows.Foundation.Rect oldBounds, [in] Windows.Foundation.Rect newBounds, [out] [retval] boolean* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementAnimator)]
                [uuid(EA26E91C-8DC0-58B6-86AD-07077748EDA3)]
                [version(0x00000001)]
                interface IElementAnimatorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ElementAnimator** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementAnimator)]
                [uuid(7FAD280A-F5EE-5F42-9481-C1B0F1426217)]
                [version(0x00000001)]
                interface IElementAnimatorOverrides : IInspectable
                {
                    HRESULT HasShowAnimationCore([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [out] [retval] boolean* result);
                    HRESULT HasHideAnimationCore([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [out] [retval] boolean* result);
                    HRESULT HasBoundsChangeAnimationCore([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [in] Windows.Foundation.Rect oldBounds, [in] Windows.Foundation.Rect newBounds, [out] [retval] boolean* result);
                    HRESULT StartShowAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context);
                    HRESULT StartHideAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context);
                    HRESULT StartBoundsChangeAnimation([in] Microsoft.UI.Xaml.UIElement* element, [in] Microsoft.UI.Xaml.Controls.AnimationContext context, [in] Windows.Foundation.Rect oldBounds, [in] Windows.Foundation.Rect newBounds);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementAnimator)]
                [uuid(2EEA75FA-14DD-5FEF-8338-641CE3941227)]
                [version(0x00000001)]
                interface IElementAnimatorProtected : IInspectable
                {
                    [propget] HRESULT HasShowAnimationsPending([out] [retval] boolean* value);
                    [propget] HRESULT HasHideAnimationsPending([out] [retval] boolean* value);
                    [propget] HRESULT HasBoundsChangeAnimationsPending([out] [retval] boolean* value);
                    [propget] HRESULT SharedContext([out] [retval] Microsoft.UI.Xaml.Controls.AnimationContext* value);
                    HRESULT OnShowAnimationCompleted([in] Microsoft.UI.Xaml.UIElement* element);
                    HRESULT OnHideAnimationCompleted([in] Microsoft.UI.Xaml.UIElement* element);
                    HRESULT OnBoundsChangeAnimationCompleted([in] Microsoft.UI.Xaml.UIElement* element);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementFactory)]
                [uuid(122278A6-3E28-5644-BE8E-1052E3AE4EC9)]
                [version(0x00000001)]
                interface IElementFactory : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementFactory)]
                [uuid(D892556F-A875-534F-8D7F-681803342732)]
                [version(0x00000001)]
                interface IElementFactoryFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ElementFactory** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementFactoryGetArgs)]
                [uuid(AFB70283-1875-5BA1-BB41-DABECC815E92)]
                [version(0x00000001)]
                interface IElementFactoryGetArgs : IInspectable
                {
                    [propget] HRESULT Data([out] [retval] IInspectable** value);
                    [propput] HRESULT Data([in] IInspectable* value);
                    [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Parent([in] Microsoft.UI.Xaml.UIElement* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementFactory)]
                [uuid(74DA8CEF-0309-5BBA-BD71-8B4D259BB763)]
                [version(0x00000001)]
                interface IElementFactoryOverrides : IInspectable
                {
                    HRESULT GetElementCore([in] Microsoft.UI.Xaml.Controls.ElementFactoryGetArgs* args, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT RecycleElementCore([in] Microsoft.UI.Xaml.Controls.ElementFactoryRecycleArgs* args);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ElementFactoryRecycleArgs)]
                [uuid(88C031FE-5BA6-540F-A828-EF733A1FAEEE)]
                [version(0x00000001)]
                interface IElementFactoryRecycleArgs : IInspectable
                {
                    [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Element([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Parent([in] Microsoft.UI.Xaml.UIElement* value);
                }

                [uuid(C5BEAE08-81ED-5976-A119-AF4F18A35719)]
                [version(0x00000001)]
                interface IElementFactoryShim : IInspectable
                {
                    HRESULT GetElement([in] Microsoft.UI.Xaml.Controls.ElementFactoryGetArgs* args, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT RecycleElement([in] Microsoft.UI.Xaml.Controls.ElementFactoryRecycleArgs* args);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlipView)]
                [uuid(96C35E7F-CC48-5ACC-B3B4-8AB4BDF1FE17)]
                interface IFlipView : IInspectable
                {
                    [propget] HRESULT UseTouchAnimationsForAllNavigation([out] [retval] boolean* value);
                    [propput] HRESULT UseTouchAnimationsForAllNavigation([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlipView)]
                [uuid(F3A89BE6-81E3-53C4-9DC9-98A5A4E79B13)]
                interface IFlipViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FlipView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlipViewItem)]
                [uuid(516F2058-AF67-5EB3-B796-E75B34F3FD92)]
                interface IFlipViewItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlipViewItem)]
                [uuid(DEB2CD5F-9D76-5678-B1CA-0267757C4FED)]
                interface IFlipViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FlipViewItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlipView)]
                [uuid(1E98FC86-2BC1-5C89-8305-251AD56A9CDB)]
                interface IFlipViewStatics : IInspectable
                {
                    [propget] HRESULT UseTouchAnimationsForAllNavigationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayout)]
                [uuid(A957834C-DC02-5670-9735-EC3FE1037C9A)]
                [version(0x00000001)]
                interface IFlowLayout : IInspectable
                {
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT MinRowSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinRowSpacing([in] DOUBLE value);
                    [propget] HRESULT MinColumnSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinColumnSpacing([in] DOUBLE value);
                    [propget] HRESULT LineAlignment([out] [retval] Microsoft.UI.Xaml.Controls.FlowLayoutLineAlignment* value);
                    [propput] HRESULT LineAlignment([in] Microsoft.UI.Xaml.Controls.FlowLayoutLineAlignment value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayout)]
                [uuid(F4AD1DE0-DB32-52E7-9037-43C6DB9841A8)]
                [version(0x00000001)]
                interface IFlowLayoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FlowLayout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayout)]
                [uuid(F2B75B74-EFB0-54FE-95D4-8CB13C2F36EF)]
                [version(0x00000001)]
                interface IFlowLayoutOverrides : IInspectable
                {
                    HRESULT GetMeasureSize([in] INT32 index, [in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT GetProvisionalArrangeSize([in] INT32 index, [in] Windows.Foundation.Size measureSize, [in] Windows.Foundation.Size desiredSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT ShouldBreakLine([in] INT32 index, [in] DOUBLE remainingSpace, [out] [retval] boolean* result);
                    HRESULT GetAnchorForRealizationRect([in] Windows.Foundation.Size availableSize, [in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [out] [retval] Microsoft.UI.Xaml.Controls.FlowLayoutAnchorInfo* result);
                    HRESULT GetAnchorForTargetElement([in] INT32 targetIndex, [in] Windows.Foundation.Size availableSize, [in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [out] [retval] Microsoft.UI.Xaml.Controls.FlowLayoutAnchorInfo* result);
                    HRESULT GetExtent([in] Windows.Foundation.Size availableSize, [in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [in] Microsoft.UI.Xaml.UIElement* firstRealized, [in] INT32 firstRealizedItemIndex, [in] Windows.Foundation.Rect firstRealizedLayoutBounds, [in] Microsoft.UI.Xaml.UIElement* lastRealized, [in] INT32 lastRealizedItemIndex, [in] Windows.Foundation.Rect lastRealizedLayoutBounds, [out] [retval] Windows.Foundation.Rect* result);
                    HRESULT OnElementMeasured([in] Microsoft.UI.Xaml.UIElement* element, [in] INT32 index, [in] Windows.Foundation.Size availableSize, [in] Windows.Foundation.Size measureSize, [in] Windows.Foundation.Size desiredSize, [in] Windows.Foundation.Size provisionalArrangeSize, [in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context);
                    HRESULT OnLineArranged([in] INT32 startIndex, [in] INT32 countInLine, [in] DOUBLE lineSize, [in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayoutState)]
                [uuid(D31F39C3-0FB4-513E-AD5E-24375218B5AB)]
                [version(0x00000001)]
                interface IFlowLayoutState : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayoutState)]
                [uuid(6FDBE8EE-2309-5F1C-B7C5-C41359349A9E)]
                [version(0x00000001)]
                interface IFlowLayoutStateFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FlowLayoutState** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.FlowLayout)]
                [uuid(E7A6F316-880B-553A-ABF2-5CF93BF8C97C)]
                [version(0x00000001)]
                interface IFlowLayoutStatics : IInspectable
                {
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinRowSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinColumnSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Flyout)]
                [uuid(D4A1EB7D-59B8-5DF9-87C3-BD5E3856923F)]
                interface IFlyout : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT FlyoutPresenterStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT FlyoutPresenterStyle([in] Microsoft.UI.Xaml.Style* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Flyout)]
                [uuid(FD19002E-66B3-5656-B49C-B2ACA11E9602)]
                interface IFlyoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Flyout** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlyoutPresenter)]
                [uuid(70259825-7F56-5107-917E-7194B1EF1B81)]
                interface IFlyoutPresenter : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDefaultShadowEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlyoutPresenter)]
                [uuid(E9539A80-74ED-5158-9F93-893669CB046F)]
                interface IFlyoutPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FlyoutPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FlyoutPresenter)]
                [uuid(B415A2EC-1BDD-5F94-9500-257223646469)]
                interface IFlyoutPresenterStatics : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Flyout)]
                [uuid(23AE001A-AAA6-5D19-9947-917ECBD883CA)]
                interface IFlyoutStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FlyoutPresenterStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs)]
                [uuid(C0B4B88C-C195-5064-84C7-33CB262CB240)]
                interface IFocusDisengagedEventArgs : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs)]
                [uuid(1E71E8E4-74B2-50A1-8F2B-42C0118AB0EA)]
                interface IFocusEngagedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIcon)]
                [uuid(6EBA5ED9-D233-5F5E-91A8-F5134292658A)]
                interface IFontIcon : IInspectable
                {
                    [propget] HRESULT Glyph([out] [retval] HSTRING* value);
                    [propput] HRESULT Glyph([in] HSTRING value);
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT MirroredWhenRightToLeft([out] [retval] boolean* value);
                    [propput] HRESULT MirroredWhenRightToLeft([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIcon)]
                [uuid(AA9A24FE-BEF8-564A-B200-694CD6F6BA4E)]
                interface IFontIconFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FontIcon** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIconSource)]
                [uuid(B89D614C-E9B5-5B6A-9BEC-AD78B1A14B74)]
                interface IFontIconSource : IInspectable
                {
                    [propget] HRESULT Glyph([out] [retval] HSTRING* value);
                    [propput] HRESULT Glyph([in] HSTRING value);
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT MirroredWhenRightToLeft([out] [retval] boolean* value);
                    [propput] HRESULT MirroredWhenRightToLeft([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIconSource)]
                [uuid(BB40EEEE-64D1-5133-B1D6-AE13C21B6678)]
                interface IFontIconSourceFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.FontIconSource** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIconSource)]
                [uuid(C309C231-F7BF-5C06-A2D2-56502CFD33E5)]
                interface IFontIconSourceStatics : IInspectable
                {
                    [propget] HRESULT GlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MirroredWhenRightToLeftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.FontIcon)]
                [uuid(55564030-2F80-5BE5-8C2A-EBB6ECBA07E8)]
                interface IFontIconStatics : IInspectable
                {
                    [propget] HRESULT GlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MirroredWhenRightToLeftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Frame)]
                [uuid(E6D50443-621E-5360-856A-75B01E1FCD22)]
                interface IFrame : IInspectable
                {
                    [propget] HRESULT CacheSize([out] [retval] INT32* value);
                    [propput] HRESULT CacheSize([in] INT32 value);
                    [propget] HRESULT CanGoBack([out] [retval] boolean* value);
                    [propget] HRESULT CanGoForward([out] [retval] boolean* value);
                    [propget] HRESULT CurrentSourcePageType([out] [retval] Windows.UI.Xaml.Interop.TypeName* value);
                    [propget] HRESULT SourcePageType([out] [retval] Windows.UI.Xaml.Interop.TypeName* value);
                    [propput] HRESULT SourcePageType([in] Windows.UI.Xaml.Interop.TypeName value);
                    [propget] HRESULT BackStackDepth([out] [retval] INT32* value);
                    [propget] HRESULT BackStack([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Navigation.PageStackEntry*>** value);
                    [propget] HRESULT ForwardStack([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Navigation.PageStackEntry*>** value);
                    [propget] HRESULT IsNavigationStackEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsNavigationStackEnabled([in] boolean value);
                    [eventadd] HRESULT Navigated([in] Microsoft.UI.Xaml.Navigation.NavigatedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Navigated([in] EventRegistrationToken token);
                    [eventadd] HRESULT Navigating([in] Microsoft.UI.Xaml.Navigation.NavigatingCancelEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Navigating([in] EventRegistrationToken token);
                    [eventadd] HRESULT NavigationFailed([in] Microsoft.UI.Xaml.Navigation.NavigationFailedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT NavigationFailed([in] EventRegistrationToken token);
                    [eventadd] HRESULT NavigationStopped([in] Microsoft.UI.Xaml.Navigation.NavigationStoppedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT NavigationStopped([in] EventRegistrationToken token);
                    [overload("GoBack")] HRESULT GoBack();
                    [overload("GoBack")] HRESULT GoBackWithTransitionInfo([in] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo* transitionInfoOverride);
                    HRESULT GoForward();
                    [overload("Navigate")] HRESULT Navigate([in] Windows.UI.Xaml.Interop.TypeName sourcePageType, [in] IInspectable* parameter, [out] [retval] boolean* result);
                    [overload("Navigate")] HRESULT NavigateWithTransitionInfo([in] Windows.UI.Xaml.Interop.TypeName sourcePageType, [in] IInspectable* parameter, [in] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo* infoOverride, [out] [retval] boolean* result);
                    HRESULT NavigateToType([in] Windows.UI.Xaml.Interop.TypeName sourcePageType, [in] IInspectable* parameter, [in] Microsoft.UI.Xaml.Navigation.FrameNavigationOptions* navigationOptions, [out] [retval] boolean* result);
                    HRESULT GetNavigationState([out] [retval] HSTRING* result);
                    [overload("SetNavigationState")] HRESULT SetNavigationState([in] HSTRING navigationState);
                    [overload("SetNavigationState")] HRESULT SetNavigationStateWithNavigationControl([in] HSTRING navigationState, [in] boolean suppressNavigate);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Frame)]
                [uuid(53A3070F-19D9-59BC-BDD6-4DBF139E7DA5)]
                interface IFrameFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Frame** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(4164044A-D8E0-56BB-B2B3-063A29B5DAB1)]
                interface IFramePrivate : IInspectable
                {
                    HRESULT GetNavigationTransitionInfoOverride([out] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo** infoOverride, [out] boolean* isBackNavigation, [out] boolean* isInitialPage);
                    HRESULT SetNavigationTransitionInfoOverride([in] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo* infoOverride);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Frame)]
                [uuid(8A974D00-8DA2-588A-A182-1F7621EE650B)]
                interface IFrameStatics : IInspectable
                {
                    [propget] HRESULT CacheSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanGoBackProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanGoForwardProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CurrentSourcePageTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SourcePageTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackStackDepthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackStackProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForwardStackProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsNavigationStackEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Grid)]
                [uuid(C4496219-9014-58A1-B4AD-C5044913A5BB)]
                interface IGrid : IInspectable
                {
                    [propget] HRESULT RowDefinitions([out] [retval] Microsoft.UI.Xaml.Controls.RowDefinitionCollection** value);
                    [propget] HRESULT ColumnDefinitions([out] [retval] Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection** value);
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT RowSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT RowSpacing([in] DOUBLE value);
                    [propget] HRESULT ColumnSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT ColumnSpacing([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Grid)]
                [uuid(B16BF561-FC6C-57C6-8EBC-0B06CE4513AA)]
                interface IGridFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Grid** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Grid)]
                [uuid(EF9CF81D-A431-50F4-ABF5-3023FE447704)]
                interface IGridStatics : IInspectable
                {
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RowSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ColumnSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetRow([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] INT32* result);
                    HRESULT SetRow([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] INT32 value);
                    [propget] HRESULT ColumnProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetColumn([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] INT32* result);
                    HRESULT SetColumn([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] INT32 value);
                    [propget] HRESULT RowSpanProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetRowSpan([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] INT32* result);
                    HRESULT SetRowSpan([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] INT32 value);
                    [propget] HRESULT ColumnSpanProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetColumnSpan([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] INT32* result);
                    HRESULT SetColumnSpan([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridView)]
                [uuid(D495F2FA-594D-5170-B1E8-8629A179F9FB)]
                interface IGridView : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridView)]
                [uuid(892947EA-6B86-5F17-A9B8-2121B2251271)]
                interface IGridViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GridView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridViewHeaderItem)]
                [uuid(2C90C3E0-3245-55D6-9D98-0FD9540E920F)]
                interface IGridViewHeaderItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridViewHeaderItem)]
                [uuid(2518F012-54DF-587E-92B3-BD86075B71CF)]
                interface IGridViewHeaderItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GridViewHeaderItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridViewItem)]
                [uuid(9DEBB4A5-E7B7-5A41-A1EE-F77D8A7B0023)]
                interface IGridViewItem : IInspectable
                {
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GridViewItem)]
                [uuid(96A56215-230C-5EFB-8401-0CE01617C657)]
                interface IGridViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GridViewItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupItem)]
                [uuid(60E5A62B-9DF9-5DBD-9551-1D9E0F6CC3C3)]
                interface IGroupItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupItem)]
                [uuid(7C1D5F85-12A6-5E54-8C3D-EF44DD40F1BD)]
                interface IGroupItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GroupItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupStyle)]
                [uuid(A77D937E-0188-584C-AB1D-9DF1916EDC75)]
                interface IGroupStyle : IInspectable
                {
                    [propget] HRESULT Panel([out] [retval] Microsoft.UI.Xaml.Controls.ItemsPanelTemplate** value);
                    [propput] HRESULT Panel([in] Microsoft.UI.Xaml.Controls.ItemsPanelTemplate* value);
                    [deprecated("ContainerStyle may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ContainerStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [deprecated("ContainerStyle may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT ContainerStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT HeaderContainerStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT HeaderContainerStyle([in] Microsoft.UI.Xaml.Style* value);
                    [deprecated("ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT ContainerStyleSelector([out] [retval] Microsoft.UI.Xaml.Controls.StyleSelector** value);
                    [deprecated("ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1, and is not supported for ItemsControl.GroupStyle.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT ContainerStyleSelector([in] Microsoft.UI.Xaml.Controls.StyleSelector* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT HeaderTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT HeaderTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT HidesIfEmpty([out] [retval] boolean* value);
                    [propput] HRESULT HidesIfEmpty([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupStyle)]
                [uuid(DC884AA2-E2A8-57AB-8CBC-B1D8EC540B0C)]
                interface IGroupStyleFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GroupStyle** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupStyleSelector)]
                [uuid(524F5086-3E02-5B71-BE7C-8A8FA0FEAA2C)]
                interface IGroupStyleSelector : IInspectable
                {
                    HRESULT SelectGroupStyle([in] IInspectable* group, [in] UINT32 level, [out] [retval] Microsoft.UI.Xaml.Controls.GroupStyle** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupStyleSelector)]
                [uuid(0E0699BE-50C2-5C15-AED3-E7BD663E5FAD)]
                interface IGroupStyleSelectorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.GroupStyleSelector** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.GroupStyleSelector)]
                [uuid(80594304-EBEB-5A5D-A794-ACDC214CBC94)]
                interface IGroupStyleSelectorOverrides : IInspectable
                {
                    HRESULT SelectGroupStyleCore([in] IInspectable* group, [in] UINT32 level, [out] [retval] Microsoft.UI.Xaml.Controls.GroupStyle** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs)]
                [uuid(E1F0F2CF-B0EF-5F56-B597-F0771F5CFFD2)]
                interface IHasValidationErrorsChangedEventArgs : IInspectable
                {
                    [propget] HRESULT NewValue([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Hub)]
                [uuid(B867E995-0F2E-51A6-A090-E0BE2E7CF3EC)]
                interface IHub : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT DefaultSectionIndex([out] [retval] INT32* value);
                    [propput] HRESULT DefaultSectionIndex([in] INT32 value);
                    [propget] HRESULT Sections([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>** value);
                    [propget] HRESULT SectionsInView([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>** value);
                    [propget] HRESULT SectionHeaders([out] [retval] Windows.Foundation.Collections.IObservableVector<IInspectable*>** value);
                    [eventadd] HRESULT SectionHeaderClick([in] Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SectionHeaderClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT SectionsInViewChanged([in] Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SectionsInViewChanged([in] EventRegistrationToken token);
                    HRESULT ScrollToSection([in] Microsoft.UI.Xaml.Controls.HubSection* section);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Hub)]
                [uuid(520D3572-F141-58BD-B2A7-3352630FC1E2)]
                interface IHubFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Hub** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HubSection)]
                [uuid(9904A65B-89FF-5644-8961-9ADBD0135324)]
                interface IHubSection : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ContentTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ContentTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT IsHeaderInteractive([out] [retval] boolean* value);
                    [propput] HRESULT IsHeaderInteractive([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HubSection)]
                [uuid(63CE16F2-FB52-5818-836F-C097AA9C072D)]
                interface IHubSectionFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.HubSection** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs)]
                [uuid(B5343AAB-37B2-5CDC-9543-118E3ACE48B2)]
                interface IHubSectionHeaderClickEventArgs : IInspectable
                {
                    [propget] HRESULT Section([out] [retval] Microsoft.UI.Xaml.Controls.HubSection** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HubSection)]
                [uuid(D22016D3-FB4A-5BD8-A108-E59F7C475927)]
                interface IHubSectionStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsHeaderInteractiveProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Hub)]
                [uuid(2834E932-ABF1-5E07-AEAE-633B726B78CB)]
                interface IHubStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultSectionIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SemanticZoomOwnerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsActiveViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomedInViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HyperlinkButton)]
                [uuid(6DBEE605-8DF0-50CC-9A42-250EB138F0C6)]
                interface IHyperlinkButton : IInspectable
                {
                    [propget] HRESULT NavigateUri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT NavigateUri([in] Windows.Foundation.Uri* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HyperlinkButton)]
                [uuid(01F775EA-C5ED-514A-A23D-89C494A8F09D)]
                interface IHyperlinkButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.HyperlinkButton** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.HyperlinkButton)]
                [uuid(AB5C7B77-7C4C-5B26-9C7C-763F8D95258E)]
                interface IHyperlinkButtonStatics : IInspectable
                {
                    [propget] HRESULT NavigateUriProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconElement)]
                [uuid(18F69350-279E-50EA-8D23-138E717ED939)]
                interface IIconElement : IInspectable
                {
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconElement)]
                [uuid(7161EEFF-2CC3-59C9-B355-F752EF2030FB)]
                interface IIconElementFactory : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconElement)]
                [uuid(4CCFDC81-9D9D-5A02-B95B-AD1ADD921750)]
                interface IIconElementStatics : IInspectable
                {
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSource)]
                [uuid(CABD5C34-3B9A-5AF0-9F85-315F70700E0C)]
                interface IIconSource : IInspectable
                {
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSourceElement)]
                [uuid(AB6F4473-1F6B-5B24-8259-1D38E90A110A)]
                interface IIconSourceElement : IInspectable
                {
                    [propget] HRESULT IconSource([out] [retval] Microsoft.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Microsoft.UI.Xaml.Controls.IconSource* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSourceElement)]
                [uuid(13E1A240-AD47-51AE-9632-715F4B7EA52E)]
                interface IIconSourceElementFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.IconSourceElement** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSourceElement)]
                [uuid(2CC2539F-69FC-5160-AB84-37E7E04E2691)]
                interface IIconSourceElementStatics : IInspectable
                {
                    [propget] HRESULT IconSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSource)]
                [uuid(E8BC19C6-9A64-5C54-9338-E18E076875BF)]
                interface IIconSourceFactory : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IconSource)]
                [uuid(EED55973-7E15-575F-AF8E-AE2B9B975DD7)]
                interface IIconSourceStatics : IInspectable
                {
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Image)]
                [uuid(220D3D8D-66DE-53A1-A215-BA9C165565AB)]
                interface IImage : IInspectable
                {
                    [propget] HRESULT Source([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT Source([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    [propget] HRESULT NineGrid([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT NineGrid([in] Microsoft.UI.Xaml.Thickness value);
                    [eventadd] HRESULT ImageFailed([in] Microsoft.UI.Xaml.ExceptionRoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ImageFailed([in] EventRegistrationToken token);
                    [eventadd] HRESULT ImageOpened([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ImageOpened([in] EventRegistrationToken token);
                    HRESULT GetAsCastingSource([out] [retval] Windows.Media.Casting.CastingSource** result);
                    HRESULT GetAlphaMask([out] [retval] Microsoft.UI.Composition.CompositionBrush** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Image)]
                [uuid(CB5378A8-996B-547E-9C4C-7BBFD9DBE7DC)]
                interface IImageStatics : IInspectable
                {
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NineGridProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.IndexPath)]
                [uuid(7AC1252A-2A4A-5E17-96FB-F667294D4FFA)]
                [version(0x00000001)]
                interface IIndexPath : IInspectable
                {
                    HRESULT GetSize([out] [retval] INT32* result);
                    HRESULT GetAt([in] INT32 index, [out] [retval] INT32* result);
                    HRESULT CompareTo([in] Microsoft.UI.Xaml.Controls.IndexPath* other, [out] [retval] INT32* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.IndexPath)]
                [uuid(CCFD4ACE-5FA0-502D-82B4-1674D805390D)]
                [version(0x00000001)]
                interface IIndexPathStatics : IInspectable
                {
                    [default_overload] [overload("CreateFrom")] HRESULT CreateFrom([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** result);
                    [overload("CreateFrom")] HRESULT CreateFromGroupAndItemIndex([in] INT32 groupIndex, [in] INT32 itemIndex, [out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** result);
                    HRESULT CreateFromIndices([in] Windows.Foundation.Collections.IVector<INT32>* indices, [out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** result);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationCommand)]
                [uuid(E228DC4B-CD4B-5BA3-98F2-8DA9B1601AB6)]
                interface IInputValidationCommand : IInspectable
                {
                    [propget] HRESULT InputValidationMode([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationMode* value);
                    [propput] HRESULT InputValidationMode([in] Microsoft.UI.Xaml.Controls.InputValidationMode value);
                    [propget] HRESULT InputValidationKind([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationKind* value);
                    [propput] HRESULT InputValidationKind([in] Microsoft.UI.Xaml.Controls.InputValidationKind value);
                    HRESULT CanValidate([in] Microsoft.UI.Xaml.Controls.IInputValidationControl* validationControl, [out] [retval] boolean* result);
                    HRESULT Validate([in] Microsoft.UI.Xaml.Controls.IInputValidationControl* validationControl);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationCommand)]
                [uuid(5AE05856-A468-575C-875A-8E118DA84E97)]
                interface IInputValidationCommandFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.InputValidationCommand** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationCommand)]
                [uuid(9CB5F886-46E7-5954-B806-A4B1D8DCE0B6)]
                interface IInputValidationCommandOverrides : IInspectable
                {
                    HRESULT CanValidateCore([in] Microsoft.UI.Xaml.Controls.IInputValidationControl* validationControl, [out] [retval] boolean* result);
                    HRESULT ValidateCore([in] Microsoft.UI.Xaml.Controls.IInputValidationControl* validationControl);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationContext)]
                [uuid(2E161716-F98A-5490-840B-EA3681806D98)]
                interface IInputValidationContext : IInspectable
                {
                    [propget] HRESULT IsInputRequired([out] [retval] boolean* value);
                    [propget] HRESULT MemberName([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationContext)]
                [uuid(E84EE1E5-D8F5-517E-B8EB-8713F6135AFB)]
                interface IInputValidationContextFactory : IInspectable
                {
                    HRESULT CreateInstance([in] HSTRING memberName, [in] boolean isRequired, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.InputValidationContext** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(673CD2FF-797B-541E-B888-4771805ABEBA)]
                interface IInputValidationControl : IInspectable
                {
                    [propget] HRESULT ValidationErrors([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.InputValidationError*>** value);
                    [propget] HRESULT HasValidationErrors([out] [retval] boolean* value);
                    [propget] HRESULT ValidationContext([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationContext** value);
                    [propput] HRESULT ValidationContext([in] Microsoft.UI.Xaml.Controls.InputValidationContext* value);
                    [propget] HRESULT ErrorTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ErrorTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT InputValidationMode([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationMode* value);
                    [propput] HRESULT InputValidationMode([in] Microsoft.UI.Xaml.Controls.InputValidationMode value);
                    [propget] HRESULT InputValidationKind([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationKind* value);
                    [propput] HRESULT InputValidationKind([in] Microsoft.UI.Xaml.Controls.InputValidationKind value);
                    [eventadd] HRESULT HasValidationErrorsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IInputValidationControl*, Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT HasValidationErrorsChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ValidationError([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.IInputValidationControl*, Microsoft.UI.Xaml.Controls.InputValidationErrorEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ValidationError([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(53FBF251-4BBD-5396-B827-285E4F817BDF)]
                interface IInputValidationControl2 : IInspectable
                {
                    [propget] HRESULT ValidationCommand([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationCommand** value);
                    [propput] HRESULT ValidationCommand([in] Microsoft.UI.Xaml.Controls.InputValidationCommand* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationError)]
                [uuid(4654A349-7911-5C27-B287-36DEBDF1E6C8)]
                interface IInputValidationError : IInspectable
                {
                    [propget] HRESULT ErrorMessage([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationErrorEventArgs)]
                [uuid(68E18523-DAC3-51ED-8969-C190D8EC207F)]
                interface IInputValidationErrorEventArgs : IInspectable
                {
                    [propget] HRESULT Action([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationErrorEventAction* value);
                    [propget] HRESULT Error([out] [retval] Microsoft.UI.Xaml.Controls.InputValidationError** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.InputValidationError)]
                [uuid(7FAB9146-EECE-57B6-AD68-12684B7422F0)]
                interface IInputValidationErrorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] HSTRING errorMessage, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.InputValidationError** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(84E13E27-2D24-59C4-A00E-16C7255901E2)]
                interface IInsertionPanel : IInspectable
                {
                    HRESULT GetInsertionIndexes([in] Windows.Foundation.Point position, [out] INT32* first, [out] INT32* second);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs)]
                [uuid(3C709B2F-16BA-55D2-B6F6-DFC54A1ED021)]
                interface IIsTextTrimmedChangedEventArgs : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemClickEventArgs)]
                [uuid(1CF87A70-6348-57EC-9EAC-FA0565ADC60F)]
                interface IItemClickEventArgs : IInspectable
                {
                    [propget] HRESULT ClickedItem([out] [retval] IInspectable** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemContainerGenerator)]
                [uuid(C4C5D5AE-ED98-510F-AFAE-8A0AC6067A3B)]
                interface IItemContainerGenerator : IInspectable
                {
                    [eventadd] HRESULT ItemsChanged([in] Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ItemsChanged([in] EventRegistrationToken token);
                    [deprecated("ItemFromContainer may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ItemFromContainer.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ItemFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] IInspectable** result);
                    [deprecated("ContainerFromItem may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ContainerFromItem.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ContainerFromItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [deprecated("IndexFromContainer may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.IndexFromContainer.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT IndexFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] INT32* result);
                    [deprecated("ContainerFromIndex may be altered or unavailable for releases after Windows 8.1. Instead, use ItemsControl.ContainerFromIndex.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ContainerFromIndex([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT GetItemContainerGeneratorForPanel([in] Microsoft.UI.Xaml.Controls.Panel* panel, [out] [retval] Microsoft.UI.Xaml.Controls.ItemContainerGenerator** result);
                    HRESULT StartAt([in] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition position, [in] Microsoft.UI.Xaml.Controls.Primitives.GeneratorDirection direction, [in] boolean allowStartAtRealizedItem);
                    HRESULT Stop();
                    HRESULT GenerateNext([out] boolean* isNewlyRealized, [out] [retval] Microsoft.UI.Xaml.DependencyObject** returnValue);
                    HRESULT PrepareItemContainer([in] Microsoft.UI.Xaml.DependencyObject* container);
                    HRESULT RemoveAll();
                    HRESULT Remove([in] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition position, [in] INT32 count);
                    HRESULT GeneratorPositionFromIndex([in] INT32 itemIndex, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition* result);
                    HRESULT IndexFromGeneratorPosition([in] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition position, [out] [retval] INT32* result);
                    HRESULT Recycle([in] Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition position, [in] INT32 count);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(B3E03A32-EA83-5626-BFDA-D327A1C7550C)]
                interface IItemContainerMapping : IInspectable
                {
                    HRESULT ItemFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] IInspectable** result);
                    HRESULT ContainerFromItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT IndexFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] INT32* result);
                    HRESULT ContainerFromIndex([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsControl)]
                [uuid(BF1CCB54-83E2-5B98-ACBC-736F876C3D35)]
                interface IItemsControl : IInspectable
                {
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                    [propget] HRESULT Items([out] [retval] Microsoft.UI.Xaml.Controls.ItemCollection** value);
                    [propget] HRESULT ItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ItemTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT ItemTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT ItemsPanel([out] [retval] Microsoft.UI.Xaml.Controls.ItemsPanelTemplate** value);
                    [propput] HRESULT ItemsPanel([in] Microsoft.UI.Xaml.Controls.ItemsPanelTemplate* value);
                    [propget] HRESULT DisplayMemberPath([out] [retval] HSTRING* value);
                    [propput] HRESULT DisplayMemberPath([in] HSTRING value);
                    [propget] HRESULT ItemsPanelRoot([out] [retval] Microsoft.UI.Xaml.Controls.Panel** value);
                    [propget] HRESULT ItemContainerStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT ItemContainerStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT ItemContainerStyleSelector([out] [retval] Microsoft.UI.Xaml.Controls.StyleSelector** value);
                    [propput] HRESULT ItemContainerStyleSelector([in] Microsoft.UI.Xaml.Controls.StyleSelector* value);
                    [propget] HRESULT ItemContainerGenerator([out] [retval] Microsoft.UI.Xaml.Controls.ItemContainerGenerator** value);
                    [propget] HRESULT ItemContainerTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ItemContainerTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT GroupStyle([out] [retval] Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.GroupStyle*>** value);
                    [propget] HRESULT GroupStyleSelector([out] [retval] Microsoft.UI.Xaml.Controls.GroupStyleSelector** value);
                    [propput] HRESULT GroupStyleSelector([in] Microsoft.UI.Xaml.Controls.GroupStyleSelector* value);
                    [propget] HRESULT IsGrouping([out] [retval] boolean* value);
                    HRESULT GroupHeaderContainerFromItemContainer([in] Microsoft.UI.Xaml.DependencyObject* itemContainer, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsControl)]
                [uuid(B2686273-2DD3-5454-9F25-247E66270336)]
                interface IItemsControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ItemsControl** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsControl)]
                [uuid(285C215F-64B2-5F7D-88D2-56C6658F73EE)]
                interface IItemsControlOverrides : IInspectable
                {
                    HRESULT IsItemItsOwnContainerOverride([in] IInspectable* item, [out] [retval] boolean* result);
                    HRESULT GetContainerForItemOverride([out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT ClearContainerForItemOverride([in] Microsoft.UI.Xaml.DependencyObject* element, [in] IInspectable* item);
                    HRESULT PrepareContainerForItemOverride([in] Microsoft.UI.Xaml.DependencyObject* element, [in] IInspectable* item);
                    HRESULT OnItemsChanged([in] IInspectable* e);
                    HRESULT OnItemContainerStyleChanged([in] Microsoft.UI.Xaml.Style* oldItemContainerStyle, [in] Microsoft.UI.Xaml.Style* newItemContainerStyle);
                    HRESULT OnItemContainerStyleSelectorChanged([in] Microsoft.UI.Xaml.Controls.StyleSelector* oldItemContainerStyleSelector, [in] Microsoft.UI.Xaml.Controls.StyleSelector* newItemContainerStyleSelector);
                    HRESULT OnItemTemplateChanged([in] Microsoft.UI.Xaml.DataTemplate* oldItemTemplate, [in] Microsoft.UI.Xaml.DataTemplate* newItemTemplate);
                    HRESULT OnItemTemplateSelectorChanged([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* oldItemTemplateSelector, [in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* newItemTemplateSelector);
                    HRESULT OnGroupStyleSelectorChanged([in] Microsoft.UI.Xaml.Controls.GroupStyleSelector* oldGroupStyleSelector, [in] Microsoft.UI.Xaml.Controls.GroupStyleSelector* newGroupStyleSelector);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsControl)]
                [uuid(4FB961E1-5F91-5585-A692-6825CDE3ED1E)]
                interface IItemsControlStatics : IInspectable
                {
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayMemberPathProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerStyleSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GroupStyleSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsGroupingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetItemsOwner([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ItemsControl** result);
                    HRESULT ItemsControlFromItemContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.Controls.ItemsControl** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsPanelTemplate)]
                [uuid(6153AF2F-F095-5E8C-89D4-9E03203B9CC2)]
                interface IItemsPanelTemplate : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs)]
                [uuid(C6E93908-E20D-5614-988A-362D7937D276)]
                interface IItemsPickedEventArgs : IInspectable
                {
                    [propget] HRESULT AddedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT RemovedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsPresenter)]
                [uuid(0B0FBB88-6CB3-5F4E-99BD-879916B460DF)]
                interface IItemsPresenter : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT HeaderTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT HeaderTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT Footer([out] [retval] IInspectable** value);
                    [propput] HRESULT Footer([in] IInspectable* value);
                    [propget] HRESULT FooterTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT FooterTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT FooterTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT FooterTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsPresenter)]
                [uuid(6FA047C0-E510-52B0-8DA2-C76EEDC864A0)]
                interface IItemsPresenterStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeater)]
                [uuid(E1EEBCCC-1B52-539E-9E40-7BCE3F983974)]
                [version(0x00000001)]
                interface IItemsRepeater : IInspectable
                {
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                    [propget] HRESULT ItemsSourceView([out] [retval] Microsoft.UI.Xaml.Controls.ItemsSourceView** value);
                    [propget] HRESULT ItemTemplate([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemTemplate([in] IInspectable* value);
                    [propget] HRESULT Layout([out] [retval] Microsoft.UI.Xaml.Controls.Layout** value);
                    [propput] HRESULT Layout([in] Microsoft.UI.Xaml.Controls.Layout* value);
                    [propget] HRESULT Animator([out] [retval] Microsoft.UI.Xaml.Controls.ElementAnimator** value);
                    [propput] HRESULT Animator([in] Microsoft.UI.Xaml.Controls.ElementAnimator* value);
                    [propget] HRESULT HorizontalCacheLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalCacheLength([in] DOUBLE value);
                    [propget] HRESULT VerticalCacheLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalCacheLength([in] DOUBLE value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    HRESULT GetElementIndex([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] INT32* result);
                    HRESULT TryGetElement([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT GetOrCreateElement([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [eventadd] HRESULT ElementPrepared([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementPreparedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ElementPrepared([in] EventRegistrationToken token);
                    [eventadd] HRESULT ElementClearing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementClearingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ElementClearing([in] EventRegistrationToken token);
                    [eventadd] HRESULT ElementIndexChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ItemsRepeater*, Microsoft.UI.Xaml.Controls.ItemsRepeaterElementIndexChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ElementIndexChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeaterElementClearingEventArgs)]
                [uuid(8F394A59-07C6-54CE-80D1-BB0B71DAEFA0)]
                [version(0x00000001)]
                interface IItemsRepeaterElementClearingEventArgs : IInspectable
                {
                    [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeaterElementIndexChangedEventArgs)]
                [uuid(38E3D613-48FB-5906-BF18-F7130301FCC3)]
                [version(0x00000001)]
                interface IItemsRepeaterElementIndexChangedEventArgs : IInspectable
                {
                    [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT OldIndex([out] [retval] INT32* value);
                    [propget] HRESULT NewIndex([out] [retval] INT32* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeaterElementPreparedEventArgs)]
                [uuid(612DB572-C2E7-58FC-948A-B7DC0E1FC13A)]
                [version(0x00000001)]
                interface IItemsRepeaterElementPreparedEventArgs : IInspectable
                {
                    [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT Index([out] [retval] INT32* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeater)]
                [uuid(C3C1F244-67A8-568F-A6F7-5DA8B0EADD49)]
                [version(0x00000001)]
                interface IItemsRepeaterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ItemsRepeater** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeaterScrollHost)]
                [uuid(6F3CEE8E-078A-59B4-931F-FAA891C8C073)]
                [version(0x00000001)]
                interface IItemsRepeaterScrollHost : IInspectable
                {
                    [propget] HRESULT ScrollViewer([out] [retval] Microsoft.UI.Xaml.Controls.ScrollViewer** value);
                    [propput] HRESULT ScrollViewer([in] Microsoft.UI.Xaml.Controls.ScrollViewer* value);
                    [propget] HRESULT CurrentAnchor([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT HorizontalAnchorRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalAnchorRatio([in] DOUBLE value);
                    [propget] HRESULT VerticalAnchorRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalAnchorRatio([in] DOUBLE value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsRepeater)]
                [uuid(BC5B1692-8E75-580D-933F-57A494637804)]
                [version(0x00000001)]
                interface IItemsRepeaterStatics : IInspectable
                {
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LayoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AnimatorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalCacheLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalCacheLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsSourceView)]
                [uuid(F7F802DE-E79C-5C5F-ABF8-CCBD486B89D6)]
                [version(0x00000001)]
                interface IItemsSourceView : IInspectable
                {
                    [propget] HRESULT Count([out] [retval] INT32* value);
                    HRESULT GetAt([in] INT32 index, [out] [retval] IInspectable** result);
                    [propget] HRESULT HasKeyIndexMapping([out] [retval] boolean* value);
                    HRESULT KeyFromIndex([in] INT32 index, [out] [retval] HSTRING* result);
                    HRESULT IndexFromKey([in] HSTRING key, [out] [retval] INT32* result);
                    HRESULT IndexOf([in] IInspectable* item, [out] [retval] INT32* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsSourceView)]
                [uuid(AADC6FDD-EB00-5E58-B95D-120F891D733F)]
                [version(0x00000001)]
                interface IItemsSourceViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* source, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ItemsSourceView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsStackPanel)]
                [uuid(F7E52FDF-4779-5F63-9999-7D677E3FD2C1)]
                interface IItemsStackPanel : IInspectable
                {
                    [propget] HRESULT GroupPadding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT GroupPadding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT FirstCacheIndex([out] [retval] INT32* value);
                    [propget] HRESULT FirstVisibleIndex([out] [retval] INT32* value);
                    [propget] HRESULT LastVisibleIndex([out] [retval] INT32* value);
                    [propget] HRESULT LastCacheIndex([out] [retval] INT32* value);
                    [propget] HRESULT ScrollingDirection([out] [retval] Microsoft.UI.Xaml.Controls.PanelScrollingDirection* value);
                    [propget] HRESULT GroupHeaderPlacement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement* value);
                    [propput] HRESULT GroupHeaderPlacement([in] Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement value);
                    [propget] HRESULT ItemsUpdatingScrollMode([out] [retval] Microsoft.UI.Xaml.Controls.ItemsUpdatingScrollMode* value);
                    [propput] HRESULT ItemsUpdatingScrollMode([in] Microsoft.UI.Xaml.Controls.ItemsUpdatingScrollMode value);
                    [propget] HRESULT CacheLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT CacheLength([in] DOUBLE value);
                    [propget] HRESULT AreStickyGroupHeadersEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreStickyGroupHeadersEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsStackPanel)]
                [uuid(7CA08D59-BE10-5D61-ABE2-089AD44DB1D6)]
                interface IItemsStackPanelStatics : IInspectable
                {
                    [propget] HRESULT GroupPaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GroupHeaderPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CacheLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AreStickyGroupHeadersEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsWrapGrid)]
                [uuid(29910BC5-B305-5529-B88C-776C66E1B3BA)]
                interface IItemsWrapGrid : IInspectable
                {
                    [propget] HRESULT GroupPadding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT GroupPadding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT MaximumRowsOrColumns([out] [retval] INT32* value);
                    [propput] HRESULT MaximumRowsOrColumns([in] INT32 value);
                    [propget] HRESULT ItemWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemWidth([in] DOUBLE value);
                    [propget] HRESULT ItemHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemHeight([in] DOUBLE value);
                    [propget] HRESULT FirstCacheIndex([out] [retval] INT32* value);
                    [propget] HRESULT FirstVisibleIndex([out] [retval] INT32* value);
                    [propget] HRESULT LastVisibleIndex([out] [retval] INT32* value);
                    [propget] HRESULT LastCacheIndex([out] [retval] INT32* value);
                    [propget] HRESULT ScrollingDirection([out] [retval] Microsoft.UI.Xaml.Controls.PanelScrollingDirection* value);
                    [propget] HRESULT GroupHeaderPlacement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement* value);
                    [propput] HRESULT GroupHeaderPlacement([in] Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement value);
                    [propget] HRESULT CacheLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT CacheLength([in] DOUBLE value);
                    [propget] HRESULT AreStickyGroupHeadersEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreStickyGroupHeadersEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ItemsWrapGrid)]
                [uuid(F757D5CB-3BF2-5A23-968F-045BC80D57CE)]
                interface IItemsWrapGridStatics : IInspectable
                {
                    [propget] HRESULT GroupPaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaximumRowsOrColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GroupHeaderPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CacheLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AreStickyGroupHeadersEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [uuid(B1F3BBA0-108E-560D-9681-26391B4BC30D)]
                [version(0x00000001)]
                interface IKeyIndexMapping : IInspectable
                {
                    HRESULT KeyFromIndex([in] INT32 index, [out] [retval] HSTRING* result);
                    HRESULT IndexFromKey([in] HSTRING key, [out] [retval] INT32* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.Layout)]
                [uuid(24E50C1C-9C51-5144-9DDC-3F500191C262)]
                [version(0x00000001)]
                interface ILayout : IInspectable
                {
                    HRESULT InitializeForContext([in] Microsoft.UI.Xaml.Controls.LayoutContext* context);
                    HRESULT UninitializeForContext([in] Microsoft.UI.Xaml.Controls.LayoutContext* context);
                    HRESULT Measure([in] Microsoft.UI.Xaml.Controls.LayoutContext* context, [in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT Arrange([in] Microsoft.UI.Xaml.Controls.LayoutContext* context, [in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Size* result);
                    [eventadd] HRESULT MeasureInvalidated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Layout*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT MeasureInvalidated([in] EventRegistrationToken token);
                    [eventadd] HRESULT ArrangeInvalidated([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Layout*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ArrangeInvalidated([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutContext)]
                [uuid(B45A2E55-2ECC-5462-BB26-D47C455BB48E)]
                [version(0x00000001)]
                interface ILayoutContext : IInspectable
                {
                    [propget] HRESULT LayoutState([out] [retval] IInspectable** value);
                    [propput] HRESULT LayoutState([in] IInspectable* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutContext)]
                [uuid(F7664771-9242-599E-A7DD-0705565DEF98)]
                [version(0x00000001)]
                interface ILayoutContextFactory : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutContext)]
                [uuid(FDA70E44-6526-5535-BE2B-EC2743670AE2)]
                [version(0x00000001)]
                interface ILayoutContextOverrides : IInspectable
                {
                    [propget] HRESULT LayoutStateCore([out] [retval] IInspectable** value);
                    [propput] HRESULT LayoutStateCore([in] IInspectable* value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(B5B185BD-CF87-5124-9843-2E557D59ACC7)]
                interface ILayoutDataInfoProvider : IInspectable
                {
                    HRESULT GetTotalItemCount([out] [retval] INT32* result);
                    HRESULT GetTotalGroupCount([out] [retval] INT32* result);
                    HRESULT GetGroupInformationFromItemIndex([in] INT32 itemIndex, [out] INT32* indexOfGroup, [out] INT32* indexInsideGroup, [out] INT32* itemCountInGroup);
                    HRESULT GetGroupInformationFromGroupIndex([in] INT32 groupIndex, [out] INT32* startItemIndex, [out] INT32* itemCountInGroup);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.Layout)]
                [uuid(EAF956B4-59C9-5E13-A49D-F35B171D8FC9)]
                [version(0x00000001)]
                interface ILayoutFactory : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutPanel)]
                [uuid(46CF8953-F9EB-5C6E-A976-1B8E43B0609E)]
                [version(0x00000001)]
                interface ILayoutPanel : IInspectable
                {
                    [propget] HRESULT Layout([out] [retval] Microsoft.UI.Xaml.Controls.Layout** value);
                    [propput] HRESULT Layout([in] Microsoft.UI.Xaml.Controls.Layout* value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutPanel)]
                [uuid(FF37C4CB-F541-5A35-AB1F-90920092C71C)]
                [version(0x00000001)]
                interface ILayoutPanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.LayoutPanel** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.LayoutPanel)]
                [uuid(2B3DDAE9-1E39-5BD7-9240-16F9204A092A)]
                [version(0x00000001)]
                interface ILayoutPanelStatics : IInspectable
                {
                    [propget] HRESULT LayoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.Layout)]
                [uuid(E46FF416-741E-5176-A1D4-5718D2342243)]
                [version(0x00000001)]
                interface ILayoutProtected : IInspectable
                {
                    HRESULT InvalidateMeasure();
                    HRESULT InvalidateArrange();
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(60B72E6F-8722-5439-9982-EC02DD0F02FF)]
                interface ILayoutStrategy : IInspectable
                {
                    HRESULT SetLayoutDataInfoProvider([in] Microsoft.UI.Xaml.Controls.ILayoutDataInfoProvider* provider);
                    HRESULT BeginMeasure();
                    HRESULT EndMeasure();
                    HRESULT GetElementMeasureSize([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Windows.Foundation.Rect windowConstraint, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT GetElementBounds([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Windows.Foundation.Size containerDesiredSize, [in] Microsoft.UI.Xaml.Controls.LayoutReference referenceInformation, [in] Windows.Foundation.Rect windowConstraint, [out] [retval] Windows.Foundation.Rect* result);
                    HRESULT GetElementArrangeBounds([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Windows.Foundation.Rect containerBounds, [in] Windows.Foundation.Rect windowConstraint, [in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Rect* result);
                    HRESULT ShouldContinueFillingUpSpace([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Microsoft.UI.Xaml.Controls.LayoutReference referenceInformation, [in] Windows.Foundation.Rect windowToFill, [out] [retval] boolean* result);
                    HRESULT GetPositionOfFirstElement([out] [retval] Windows.Foundation.Point* result);
                    HRESULT GetVirtualizationDirection([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* result);
                    HRESULT EstimateElementIndex([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] Microsoft.UI.Xaml.Controls.EstimationReference headerReference, [in] Microsoft.UI.Xaml.Controls.EstimationReference containerReference, [in] Windows.Foundation.Rect window, [out] Windows.Foundation.Rect* targetRect, [out] [retval] INT32* result);
                    HRESULT EstimateElementBounds([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Microsoft.UI.Xaml.Controls.EstimationReference headerReference, [in] Microsoft.UI.Xaml.Controls.EstimationReference containerReference, [in] Windows.Foundation.Rect window, [out] [retval] Windows.Foundation.Rect* result);
                    HRESULT EstimatePanelExtent([in] Microsoft.UI.Xaml.Controls.EstimationReference lastHeaderReference, [in] Microsoft.UI.Xaml.Controls.EstimationReference lastContainerReference, [in] Windows.Foundation.Rect windowConstraint, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT EstimateIndexFromPoint([in] boolean requestingInsertionIndex, [in] Windows.Foundation.Point point, [in] Microsoft.UI.Xaml.Controls.EstimationReference reference, [in] Windows.Foundation.Rect windowConstraint, [out] Microsoft.UI.Xaml.Controls.IndexSearchHint* searchHint, [out] Microsoft.UI.Xaml.Controls.ElementType* elementType, [out] INT32* elementIndex);
                    HRESULT GetTargetIndexFromNavigationAction([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Microsoft.UI.Xaml.Controls.KeyNavigationAction action, [in] Windows.Foundation.Rect windowConstraint, [in] INT32 itemIndexHintForHeaderNavigation, [out] Microsoft.UI.Xaml.Controls.ElementType* targetElementType, [out] INT32* targetElementIndex);
                    HRESULT IsIndexLayoutBoundary([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Windows.Foundation.Rect windowConstraint, [out] boolean* isLeftBoundary, [out] boolean* isTopBoundary, [out] boolean* isRightBoundary, [out] boolean* isBottomBoundary);
                    HRESULT GetRegularSnapPoints([out] FLOAT* nearOffset, [out] FLOAT* farOffset, [out] FLOAT* spacing, [out] [retval] boolean* result);
                    HRESULT HasIrregularSnapPoints([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [out] [retval] boolean* result);
                    HRESULT HasSnapPointOnElement([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [out] [retval] boolean* result);
                    HRESULT GetIsWrappingStrategy([out] [retval] boolean* result);
                    HRESULT GetElementTransitionsBounds([in] Microsoft.UI.Xaml.Controls.ElementType elementType, [in] INT32 elementIndex, [in] Windows.Foundation.Rect windowConstraint, [out] [retval] Windows.Foundation.Rect* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListBox)]
                [uuid(F3E7DEDF-7A3C-59F1-9E05-AE5026B54293)]
                interface IListBox : IInspectable
                {
                    [propget] HRESULT SelectedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT SelectionMode([out] [retval] Microsoft.UI.Xaml.Controls.SelectionMode* value);
                    [propput] HRESULT SelectionMode([in] Microsoft.UI.Xaml.Controls.SelectionMode value);
                    [propget] HRESULT SingleSelectionFollowsFocus([out] [retval] boolean* value);
                    [propput] HRESULT SingleSelectionFollowsFocus([in] boolean value);
                    HRESULT ScrollIntoView([in] IInspectable* item);
                    HRESULT SelectAll();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListBox)]
                [uuid(D048E0BC-4692-5C60-B2E9-07C4433CE050)]
                interface IListBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListBox** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListBoxItem)]
                [uuid(CC67FB35-04F1-5EAD-96C5-B2EA67B225C6)]
                interface IListBoxItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListBoxItem)]
                [uuid(8E9E0E6D-4597-5EFA-94BC-7FFADC264C28)]
                interface IListBoxItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListBoxItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListBox)]
                [uuid(763A4986-DB3A-5A94-8505-AEE2F229AF85)]
                interface IListBoxStatics : IInspectable
                {
                    [propget] HRESULT SelectionModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SingleSelectionFollowsFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListPickerFlyout)]
                [uuid(B0154A37-07C1-50ED-834C-32D3FBDA5C5F)]
                interface IListPickerFlyout : IInspectable
                {
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                    [propget] HRESULT ItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT DisplayMemberPath([out] [retval] HSTRING* value);
                    [propput] HRESULT DisplayMemberPath([in] HSTRING value);
                    [propget] HRESULT SelectionMode([out] [retval] Microsoft.UI.Xaml.Controls.ListPickerFlyoutSelectionMode* value);
                    [propput] HRESULT SelectionMode([in] Microsoft.UI.Xaml.Controls.ListPickerFlyoutSelectionMode value);
                    [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                    [propput] HRESULT SelectedIndex([in] INT32 value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    [propget] HRESULT SelectedValue([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedValue([in] IInspectable* value);
                    [propget] HRESULT SelectedValuePath([out] [retval] HSTRING* value);
                    [propput] HRESULT SelectedValuePath([in] HSTRING value);
                    [propget] HRESULT SelectedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [eventadd] HRESULT ItemsPicked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListPickerFlyout*, Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ItemsPicked([in] EventRegistrationToken token);
                    HRESULT ShowAtAsync([in] Microsoft.UI.Xaml.FrameworkElement* target, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<IInspectable*>*>** operation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListPickerFlyoutPresenter)]
                [uuid(7DCC91AB-8694-517B-A4E6-04767410C60B)]
                interface IListPickerFlyoutPresenter : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListPickerFlyout)]
                [uuid(9E485154-489D-5542-8E62-3C91A11814B5)]
                interface IListPickerFlyoutStatics : IInspectable
                {
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayMemberPathProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedValuePathProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListView)]
                [uuid(F6015DB1-DF63-52FD-A164-0DF44715EE0A)]
                interface IListView : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewBase)]
                [uuid(775C57AC-ABCE-5BEB-8E34-3B8158AEDD80)]
                interface IListViewBase : IInspectable
                {
                    [propget] HRESULT SelectedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT SelectionMode([out] [retval] Microsoft.UI.Xaml.Controls.ListViewSelectionMode* value);
                    [propput] HRESULT SelectionMode([in] Microsoft.UI.Xaml.Controls.ListViewSelectionMode value);
                    [propget] HRESULT IsSwipeEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSwipeEnabled([in] boolean value);
                    [propget] HRESULT CanDragItems([out] [retval] boolean* value);
                    [propput] HRESULT CanDragItems([in] boolean value);
                    [propget] HRESULT CanReorderItems([out] [retval] boolean* value);
                    [propput] HRESULT CanReorderItems([in] boolean value);
                    [propget] HRESULT IsItemClickEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsItemClickEnabled([in] boolean value);
                    [propget] HRESULT DataFetchSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT DataFetchSize([in] DOUBLE value);
                    [propget] HRESULT IncrementalLoadingThreshold([out] [retval] DOUBLE* value);
                    [propput] HRESULT IncrementalLoadingThreshold([in] DOUBLE value);
                    [propget] HRESULT IncrementalLoadingTrigger([out] [retval] Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger* value);
                    [propput] HRESULT IncrementalLoadingTrigger([in] Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger value);
                    [propget] HRESULT ShowsScrollingPlaceholders([out] [retval] boolean* value);
                    [propput] HRESULT ShowsScrollingPlaceholders([in] boolean value);
                    [propget] HRESULT ReorderMode([out] [retval] Microsoft.UI.Xaml.Controls.ListViewReorderMode* value);
                    [propput] HRESULT ReorderMode([in] Microsoft.UI.Xaml.Controls.ListViewReorderMode value);
                    [propget] HRESULT SelectedRanges([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Data.ItemIndexRange*>** value);
                    [propget] HRESULT IsMultiSelectCheckBoxEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsMultiSelectCheckBoxEnabled([in] boolean value);
                    [propget] HRESULT SingleSelectionFollowsFocus([out] [retval] boolean* value);
                    [propput] HRESULT SingleSelectionFollowsFocus([in] boolean value);
                    [eventadd] HRESULT ItemClick([in] Microsoft.UI.Xaml.Controls.ItemClickEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ItemClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT DragItemsStarting([in] Microsoft.UI.Xaml.Controls.DragItemsStartingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DragItemsStarting([in] EventRegistrationToken token);
                    [eventadd] HRESULT DragItemsCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DragItemsCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContainerContentChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContainerContentChanging([in] EventRegistrationToken token);
                    [eventadd] HRESULT ChoosingItemContainer([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ChoosingItemContainer([in] EventRegistrationToken token);
                    [eventadd] HRESULT ChoosingGroupHeaderContainer([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase*, Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ChoosingGroupHeaderContainer([in] EventRegistrationToken token);
                    [overload("ScrollIntoView")] HRESULT ScrollIntoView([in] IInspectable* item);
                    HRESULT SelectAll();
                    HRESULT LoadMoreItemsAsync([out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>** operation);
                    [overload("ScrollIntoView")] HRESULT ScrollIntoViewWithAlignment([in] IInspectable* item, [in] Microsoft.UI.Xaml.Controls.ScrollIntoViewAlignment alignment);
                    HRESULT SetDesiredContainerUpdateDuration([in] Windows.Foundation.TimeSpan duration);
                    HRESULT SelectRange([in] Microsoft.UI.Xaml.Data.ItemIndexRange* itemIndexRange);
                    HRESULT DeselectRange([in] Microsoft.UI.Xaml.Data.ItemIndexRange* itemIndexRange);
                    HRESULT IsDragSource([out] [retval] boolean* result);
                    HRESULT TryStartConnectedAnimationAsync([in] Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation* animation, [in] IInspectable* item, [in] HSTRING elementName, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                    HRESULT PrepareConnectedAnimation([in] HSTRING key, [in] IInspectable* item, [in] HSTRING elementName, [out] [retval] Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation** result);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT HeaderTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT HeaderTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT Footer([out] [retval] IInspectable** value);
                    [propput] HRESULT Footer([in] IInspectable* value);
                    [propget] HRESULT FooterTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT FooterTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT FooterTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT FooterTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewBase)]
                [uuid(44092863-C09E-551E-85BF-951B552950C8)]
                interface IListViewBaseFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListViewBase** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem)]
                [uuid(9220C4FF-1974-53FD-AD74-C29E7B360A06)]
                interface IListViewBaseHeaderItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem)]
                [uuid(228FC10A-B86F-5B57-96F4-34D9F9FB8711)]
                interface IListViewBaseHeaderItemFactory : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(31650B1A-C46B-53F3-8FF3-82CBE8708740)]
                interface IListViewBasePrivate : IInspectable
                {
                    HRESULT ScrollIntoViewWithOptionalAnimation([in] IInspectable* item, [in] Microsoft.UI.Xaml.Controls.ScrollIntoViewAlignment alignment, [in] boolean disableAnimation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewBase)]
                [uuid(B8487E94-010F-56D4-9F76-94BF8C462745)]
                interface IListViewBaseStatics : IInspectable
                {
                    [propget] HRESULT SelectionModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSwipeEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanDragItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanReorderItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsItemClickEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DataFetchSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IncrementalLoadingThresholdProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IncrementalLoadingTriggerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowsScrollingPlaceholdersProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ReorderModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsMultiSelectCheckBoxEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SingleSelectionFollowsFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SemanticZoomOwnerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsActiveViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomedInViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FooterTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListView)]
                [uuid(03EBEFB8-F64A-5BF9-9570-CB09EEEA2335)]
                interface IListViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewHeaderItem)]
                [uuid(E94366C8-64F5-5930-A325-B23AACDBCE89)]
                interface IListViewHeaderItem : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewHeaderItem)]
                [uuid(78F29D6A-C5A4-5D86-9962-91020CE61313)]
                interface IListViewHeaderItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListViewHeaderItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewItem)]
                [uuid(05FE41C2-0451-5D38-9C55-5D10CFD08889)]
                interface IListViewItem : IInspectable
                {
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewItem)]
                [uuid(D9F4D0B8-EE59-5036-BD7A-7C89CF0BC2AC)]
                interface IListViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ListViewItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewPersistenceHelper)]
                [uuid(07DE9AD4-ED8E-5E05-9039-031B4DDF7237)]
                interface IListViewPersistenceHelper : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ListViewPersistenceHelper)]
                [uuid(36B862BB-3882-59D8-9118-904DE3FE00C2)]
                interface IListViewPersistenceHelperStatics : IInspectable
                {
                    HRESULT GetRelativeScrollPosition([in] Microsoft.UI.Xaml.Controls.ListViewBase* listViewBase, [in] Microsoft.UI.Xaml.Controls.ListViewItemToKeyHandler* itemToKeyHandler, [out] [retval] HSTRING* result);
                    HRESULT SetRelativeScrollPositionAsync([in] Microsoft.UI.Xaml.Controls.ListViewBase* listViewBase, [in] HSTRING relativeScrollPosition, [in] Microsoft.UI.Xaml.Controls.ListViewKeyToItemHandler* keyToItemHandler, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaElement)]
                [uuid(0A969F73-4219-555A-9CA7-079D6EC6CE0E)]
                interface IMediaElement : IInspectable
                {
                    [propget] HRESULT TransportControls([out] [retval] Microsoft.UI.Xaml.Controls.MediaTransportControls** value);
                    [propput] HRESULT TransportControls([in] Microsoft.UI.Xaml.Controls.MediaTransportControls* value);
                    [propget] HRESULT AreTransportControlsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreTransportControlsEnabled([in] boolean value);
                    [propget] HRESULT PosterSource([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT PosterSource([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT Source([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT Source([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    [propget] HRESULT IsMuted([out] [retval] boolean* value);
                    [propput] HRESULT IsMuted([in] boolean value);
                    [propget] HRESULT IsAudioOnly([out] [retval] boolean* value);
                    [propget] HRESULT AutoPlay([out] [retval] boolean* value);
                    [propput] HRESULT AutoPlay([in] boolean value);
                    [propget] HRESULT IsFullWindow([out] [retval] boolean* value);
                    [propput] HRESULT IsFullWindow([in] boolean value);
                    [propget] HRESULT Volume([out] [retval] DOUBLE* value);
                    [propput] HRESULT Volume([in] DOUBLE value);
                    [propget] HRESULT Balance([out] [retval] DOUBLE* value);
                    [propput] HRESULT Balance([in] DOUBLE value);
                    [propget] HRESULT NaturalVideoHeight([out] [retval] INT32* value);
                    [propget] HRESULT NaturalVideoWidth([out] [retval] INT32* value);
                    [propget] HRESULT NaturalDuration([out] [retval] Microsoft.UI.Xaml.Duration* value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propput] HRESULT Position([in] Windows.Foundation.TimeSpan value);
                    [propget] HRESULT DownloadProgress([out] [retval] DOUBLE* value);
                    [propget] HRESULT BufferingProgress([out] [retval] DOUBLE* value);
                    [propget] HRESULT DownloadProgressOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT CurrentState([out] [retval] Microsoft.UI.Xaml.Media.MediaElementState* value);
                    [propget] HRESULT Markers([out] [retval] Microsoft.UI.Xaml.Media.TimelineMarkerCollection** value);
                    [propget] HRESULT CanSeek([out] [retval] boolean* value);
                    [propget] HRESULT CanPause([out] [retval] boolean* value);
                    [propget] HRESULT AudioStreamCount([out] [retval] INT32* value);
                    [propget] HRESULT AudioStreamIndex([out] [retval] Windows.Foundation.IReference<INT32>** value);
                    [propput] HRESULT AudioStreamIndex([in] Windows.Foundation.IReference<INT32>* value);
                    [propget] HRESULT PlaybackRate([out] [retval] DOUBLE* value);
                    [propput] HRESULT PlaybackRate([in] DOUBLE value);
                    [propget] HRESULT IsLooping([out] [retval] boolean* value);
                    [propput] HRESULT IsLooping([in] boolean value);
                    [propget] HRESULT DefaultPlaybackRate([out] [retval] DOUBLE* value);
                    [propput] HRESULT DefaultPlaybackRate([in] DOUBLE value);
                    [propget] HRESULT AspectRatioWidth([out] [retval] INT32* value);
                    [propget] HRESULT AspectRatioHeight([out] [retval] INT32* value);
                    [propget] HRESULT RealTimePlayback([out] [retval] boolean* value);
                    [propput] HRESULT RealTimePlayback([in] boolean value);
                    [propget] HRESULT AudioCategory([out] [retval] Microsoft.UI.Xaml.Media.AudioCategory* value);
                    [propput] HRESULT AudioCategory([in] Microsoft.UI.Xaml.Media.AudioCategory value);
                    [propget] HRESULT AudioDeviceType([out] [retval] Microsoft.UI.Xaml.Media.AudioDeviceType* value);
                    [propput] HRESULT AudioDeviceType([in] Microsoft.UI.Xaml.Media.AudioDeviceType value);
                    [propget] HRESULT ProtectionManager([out] [retval] Windows.Media.Protection.MediaProtectionManager** value);
                    [propput] HRESULT ProtectionManager([in] Windows.Media.Protection.MediaProtectionManager* value);
                    [propget] HRESULT Stereo3DVideoPackingMode([out] [retval] Microsoft.UI.Xaml.Media.Stereo3DVideoPackingMode* value);
                    [propput] HRESULT Stereo3DVideoPackingMode([in] Microsoft.UI.Xaml.Media.Stereo3DVideoPackingMode value);
                    [propget] HRESULT Stereo3DVideoRenderMode([out] [retval] Microsoft.UI.Xaml.Media.Stereo3DVideoRenderMode* value);
                    [propput] HRESULT Stereo3DVideoRenderMode([in] Microsoft.UI.Xaml.Media.Stereo3DVideoRenderMode value);
                    [propget] HRESULT IsStereo3DVideo([out] [retval] boolean* value);
                    [eventadd] HRESULT MediaOpened([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT MediaOpened([in] EventRegistrationToken token);
                    [eventadd] HRESULT MediaEnded([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT MediaEnded([in] EventRegistrationToken token);
                    [eventadd] HRESULT MediaFailed([in] Microsoft.UI.Xaml.ExceptionRoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT MediaFailed([in] EventRegistrationToken token);
                    [eventadd] HRESULT DownloadProgressChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DownloadProgressChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT BufferingProgressChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BufferingProgressChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT CurrentStateChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CurrentStateChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT MarkerReached([in] Microsoft.UI.Xaml.Media.TimelineMarkerRoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT MarkerReached([in] EventRegistrationToken token);
                    [eventadd] HRESULT RateChanged([in] Microsoft.UI.Xaml.Media.RateChangedRoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RateChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT VolumeChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT VolumeChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SeekCompleted([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SeekCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT PartialMediaFailureDetected([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.MediaElement*, Microsoft.UI.Xaml.Media.PartialMediaFailureDetectedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PartialMediaFailureDetected([in] EventRegistrationToken token);
                    HRESULT SetPlaybackSource([in] Windows.Media.Playback.IMediaPlaybackSource* source);
                    HRESULT Stop();
                    HRESULT Play();
                    HRESULT Pause();
                    HRESULT CanPlayType([in] HSTRING type, [out] [retval] Microsoft.UI.Xaml.Media.MediaCanPlayResponse* result);
                    HRESULT SetSource([in] Windows.Storage.Streams.IRandomAccessStream* stream, [in] HSTRING mimeType);
                    HRESULT SetMediaStreamSource([in] Windows.Media.Core.IMediaSource* source);
                    HRESULT GetAsCastingSource([out] [retval] Windows.Media.Casting.CastingSource** result);
                    HRESULT GetAudioStreamLanguage([in] Windows.Foundation.IReference<INT32>* index, [out] [retval] HSTRING* result);
                    HRESULT AddAudioEffect([in] HSTRING effectID, [in] boolean effectOptional, [in] Windows.Foundation.Collections.IPropertySet* effectConfiguration);
                    HRESULT AddVideoEffect([in] HSTRING effectID, [in] boolean effectOptional, [in] Windows.Foundation.Collections.IPropertySet* effectConfiguration);
                    HRESULT RemoveAllEffects();
                    [propget] HRESULT ActualStereo3DVideoPackingMode([out] [retval] Microsoft.UI.Xaml.Media.Stereo3DVideoPackingMode* value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaElement)]
                [uuid(1C8DD0E0-624C-5FA3-9BE1-6B50BD990377)]
                interface IMediaElementStatics : IInspectable
                {
                    [propget] HRESULT AreTransportControlsEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PosterSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsMutedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAudioOnlyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AutoPlayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFullWindowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VolumeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BalanceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NaturalVideoHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NaturalVideoWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NaturalDurationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PositionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DownloadProgressProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BufferingProgressProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DownloadProgressOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CurrentStateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanSeekProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanPauseProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AudioStreamCountProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AudioStreamIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaybackRateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsLoopingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DefaultPlaybackRateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AspectRatioWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AspectRatioHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RealTimePlaybackProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AudioCategoryProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AudioDeviceTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ProtectionManagerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT Stereo3DVideoPackingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT Stereo3DVideoRenderModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsStereo3DVideoProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ActualStereo3DVideoPackingModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerElement)]
                [uuid(C314A38C-780C-558A-98CD-0A8DEB467FCF)]
                interface IMediaPlayerElement : IInspectable
                {
                    [propget] HRESULT Source([out] [retval] Windows.Media.Playback.IMediaPlaybackSource** value);
                    [propput] HRESULT Source([in] Windows.Media.Playback.IMediaPlaybackSource* value);
                    [propget] HRESULT TransportControls([out] [retval] Microsoft.UI.Xaml.Controls.MediaTransportControls** value);
                    [propput] HRESULT TransportControls([in] Microsoft.UI.Xaml.Controls.MediaTransportControls* value);
                    [propget] HRESULT AreTransportControlsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreTransportControlsEnabled([in] boolean value);
                    [propget] HRESULT PosterSource([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT PosterSource([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    [propget] HRESULT AutoPlay([out] [retval] boolean* value);
                    [propput] HRESULT AutoPlay([in] boolean value);
                    [propget] HRESULT IsFullWindow([out] [retval] boolean* value);
                    [propput] HRESULT IsFullWindow([in] boolean value);
                    [propget] HRESULT MediaPlayer([out] [retval] Windows.Media.Playback.MediaPlayer** value);
                    HRESULT SetMediaPlayer([in] Windows.Media.Playback.MediaPlayer* mediaPlayer);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerElement)]
                [uuid(51ACA342-65A0-5DB6-8082-BD54A8D14999)]
                interface IMediaPlayerElementFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MediaPlayerElement** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerElement)]
                [uuid(6F77BBA8-FB23-5E27-97C1-16D437D0702F)]
                interface IMediaPlayerElementStatics : IInspectable
                {
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AreTransportControlsEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PosterSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AutoPlayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFullWindowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MediaPlayerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerPresenter)]
                [uuid(B6A01245-A73C-51BA-8E1A-3447BB277E40)]
                interface IMediaPlayerPresenter : IInspectable
                {
                    [propget] HRESULT MediaPlayer([out] [retval] Windows.Media.Playback.MediaPlayer** value);
                    [propput] HRESULT MediaPlayer([in] Windows.Media.Playback.MediaPlayer* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    [propget] HRESULT IsFullWindow([out] [retval] boolean* value);
                    [propput] HRESULT IsFullWindow([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerPresenter)]
                [uuid(3A96E3F8-EC04-5922-901C-11BA3607CF93)]
                interface IMediaPlayerPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MediaPlayerPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaPlayerPresenter)]
                [uuid(5A14B68F-1E03-5604-BCD6-7C7403619513)]
                interface IMediaPlayerPresenterStatics : IInspectable
                {
                    [propget] HRESULT MediaPlayerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFullWindowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaTransportControls)]
                [uuid(48B0B763-64C3-58AD-9B41-A287942E7393)]
                interface IMediaTransportControls : IInspectable
                {
                    [propget] HRESULT IsFullWindowButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsFullWindowButtonVisible([in] boolean value);
                    [propget] HRESULT IsFullWindowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsFullWindowEnabled([in] boolean value);
                    [propget] HRESULT IsZoomButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomButtonVisible([in] boolean value);
                    [propget] HRESULT IsZoomEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomEnabled([in] boolean value);
                    [propget] HRESULT IsFastForwardButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsFastForwardButtonVisible([in] boolean value);
                    [propget] HRESULT IsFastForwardEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsFastForwardEnabled([in] boolean value);
                    [propget] HRESULT IsFastRewindButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsFastRewindButtonVisible([in] boolean value);
                    [propget] HRESULT IsFastRewindEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsFastRewindEnabled([in] boolean value);
                    [propget] HRESULT IsStopButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsStopButtonVisible([in] boolean value);
                    [propget] HRESULT IsStopEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsStopEnabled([in] boolean value);
                    [propget] HRESULT IsVolumeButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsVolumeButtonVisible([in] boolean value);
                    [propget] HRESULT IsVolumeEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsVolumeEnabled([in] boolean value);
                    [propget] HRESULT IsPlaybackRateButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsPlaybackRateButtonVisible([in] boolean value);
                    [propget] HRESULT IsPlaybackRateEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsPlaybackRateEnabled([in] boolean value);
                    [propget] HRESULT IsSeekBarVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsSeekBarVisible([in] boolean value);
                    [propget] HRESULT IsSeekEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSeekEnabled([in] boolean value);
                    [propget] HRESULT IsCompact([out] [retval] boolean* value);
                    [propput] HRESULT IsCompact([in] boolean value);
                    [propget] HRESULT IsSkipForwardButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsSkipForwardButtonVisible([in] boolean value);
                    [propget] HRESULT IsSkipForwardEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSkipForwardEnabled([in] boolean value);
                    [propget] HRESULT IsSkipBackwardButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsSkipBackwardButtonVisible([in] boolean value);
                    [propget] HRESULT IsSkipBackwardEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSkipBackwardEnabled([in] boolean value);
                    [propget] HRESULT IsNextTrackButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsNextTrackButtonVisible([in] boolean value);
                    [propget] HRESULT IsPreviousTrackButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsPreviousTrackButtonVisible([in] boolean value);
                    [propget] HRESULT FastPlayFallbackBehaviour([out] [retval] Microsoft.UI.Xaml.Media.FastPlayFallbackBehaviour* value);
                    [propput] HRESULT FastPlayFallbackBehaviour([in] Microsoft.UI.Xaml.Media.FastPlayFallbackBehaviour value);
                    [propget] HRESULT ShowAndHideAutomatically([out] [retval] boolean* value);
                    [propput] HRESULT ShowAndHideAutomatically([in] boolean value);
                    [propget] HRESULT IsRepeatEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsRepeatEnabled([in] boolean value);
                    [propget] HRESULT IsRepeatButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsRepeatButtonVisible([in] boolean value);
                    [propget] HRESULT IsCompactOverlayButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsCompactOverlayButtonVisible([in] boolean value);
                    [propget] HRESULT IsCompactOverlayEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsCompactOverlayEnabled([in] boolean value);
                    [eventadd] HRESULT ThumbnailRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.MediaTransportControls*, Microsoft.UI.Xaml.Media.MediaTransportControlsThumbnailRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ThumbnailRequested([in] EventRegistrationToken token);
                    HRESULT Show();
                    HRESULT Hide();
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaTransportControls)]
                [uuid(A3F9A254-1BCF-57B5-9481-C19C4583AC0E)]
                interface IMediaTransportControlsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MediaTransportControls** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaTransportControlsHelper)]
                [uuid(89D393BA-0E04-5E24-B456-AB05429591E4)]
                interface IMediaTransportControlsHelper : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaTransportControlsHelper)]
                [uuid(F1BF86F5-BC62-5722-BEBD-A00102D857D3)]
                interface IMediaTransportControlsHelperStatics : IInspectable
                {
                    [propget] HRESULT DropoutOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetDropoutOrder([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] Windows.Foundation.IReference<INT32>** result);
                    HRESULT SetDropoutOrder([in] Microsoft.UI.Xaml.UIElement* element, [in] Windows.Foundation.IReference<INT32>* value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MediaTransportControls)]
                [uuid(E15104C8-1120-5B8E-AF37-56DD9D494DA6)]
                interface IMediaTransportControlsStatics : IInspectable
                {
                    [propget] HRESULT IsFullWindowButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFullWindowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFastForwardButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFastForwardEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFastRewindButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsFastRewindEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsStopButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsStopEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsVolumeButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsVolumeEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPlaybackRateButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPlaybackRateEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSeekBarVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSeekEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCompactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSkipForwardButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSkipForwardEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSkipBackwardButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSkipBackwardEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsNextTrackButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPreviousTrackButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FastPlayFallbackBehaviourProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowAndHideAutomaticallyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsRepeatEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsRepeatButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCompactOverlayButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsCompactOverlayEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(7BF0E43E-D7B2-5128-AABE-0FA49CD55EA9)]
                interface IMenu : IInspectable
                {
                    [propget] HRESULT ParentMenu([out] [retval] Microsoft.UI.Xaml.Controls.IMenu** value);
                    [propput] HRESULT ParentMenu([in] Microsoft.UI.Xaml.Controls.IMenu* value);
                    HRESULT Close();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBar)]
                [uuid(BA97F337-8F1E-5141-B53F-E77A8BA3EBBD)]
                [version(0x00000001)]
                interface IMenuBar : IInspectable
                {
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuBarItem*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBar)]
                [uuid(76AA8759-04EE-5A4C-B98C-D03742D47CDB)]
                [version(0x00000001)]
                interface IMenuBarFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuBar** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBarItem)]
                [uuid(A7900980-51CC-531D-97C5-356B13573398)]
                [version(0x00000001)]
                interface IMenuBarItem : IInspectable
                {
                    [propget] HRESULT Title([out] [retval] HSTRING* value);
                    [propput] HRESULT Title([in] HSTRING value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBarItem)]
                [uuid(87D02172-83CB-5459-940F-173F7501B300)]
                [version(0x00000001)]
                interface IMenuBarItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuBarItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBarItemFlyout)]
                [uuid(A412AE4F-C3BC-5679-8D5F-865EB97E83CD)]
                [version(0x00000001)]
                interface IMenuBarItemFlyout : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBarItemFlyout)]
                [uuid(F895123E-ED54-5A96-8418-F35E48505D43)]
                [version(0x00000001)]
                interface IMenuBarItemFlyoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuBarItemFlyout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBarItem)]
                [uuid(C8A33F46-2E1C-5CE0-BC09-4524E68941C8)]
                [version(0x00000001)]
                interface IMenuBarItemStatics : IInspectable
                {
                    [propget] HRESULT TitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuBar)]
                [uuid(79AA0B84-5554-5F7C-80D9-7970AA030125)]
                [version(0x00000001)]
                interface IMenuBarStatics : IInspectable
                {
                    [propget] HRESULT ItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyout)]
                [uuid(F4C77C6C-1FA5-5D85-8559-5D02B7D4E5E7)]
                interface IMenuFlyout : IInspectable
                {
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>** value);
                    [propget] HRESULT MenuFlyoutPresenterStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT MenuFlyoutPresenterStyle([in] Microsoft.UI.Xaml.Style* value);
                    HRESULT ShowAt([in] Microsoft.UI.Xaml.UIElement* targetElement, [in] Windows.Foundation.Point point);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyout)]
                [uuid(A3D225DE-6B35-5442-B6C9-06FD24139A63)]
                interface IMenuFlyoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuFlyout** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutItem)]
                [uuid(4252DF5A-44F9-5EE8-B1CC-53DE9AAA4095)]
                interface IMenuFlyoutItem : IInspectable
                {
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT Command([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT Command([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT CommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT CommandParameter([in] IInspectable* value);
                    [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    [propget] HRESULT KeyboardAcceleratorTextOverride([out] [retval] HSTRING* value);
                    [propput] HRESULT KeyboardAcceleratorTextOverride([in] HSTRING value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings** value);
                    [eventadd] HRESULT Click([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Click([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase)]
                [uuid(4BEE2715-44A1-5F94-86E8-02DDBE3DC6B9)]
                interface IMenuFlyoutItemBase : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase)]
                [uuid(33F4EAD3-AB54-505D-BC5F-45E7C35F20F8)]
                interface IMenuFlyoutItemBaseFactory : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutItem)]
                [uuid(9C3C9A1F-89AF-521A-81A5-8A01DB7A79AF)]
                interface IMenuFlyoutItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuFlyoutItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutItem)]
                [uuid(9D7953D6-E6A6-5154-91F4-67F4D6042A4F)]
                interface IMenuFlyoutItemStatics : IInspectable
                {
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT KeyboardAcceleratorTextOverrideProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter)]
                [uuid(5C9B4644-E292-5436-86EC-1C0E29F94C2D)]
                interface IMenuFlyoutPresenter : IInspectable
                {
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings** value);
                    [propget] HRESULT IsDefaultShadowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDefaultShadowEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter)]
                [uuid(0DFB684D-C60D-5771-B490-2C8612C48400)]
                interface IMenuFlyoutPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter)]
                [uuid(7DE3D28D-BD8B-5FED-A2E2-B9BEAE56FF24)]
                interface IMenuFlyoutPresenterStatics : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator)]
                [uuid(3EAF5FD5-935E-5ED7-8D05-F6BAFA936D25)]
                interface IMenuFlyoutSeparator : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator)]
                [uuid(26156C9C-95EF-5E55-8342-773FC43BAAC3)]
                interface IMenuFlyoutSeparatorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyout)]
                [uuid(6959E683-16F6-5208-84E0-B0BE92D9F6DD)]
                interface IMenuFlyoutStatics : IInspectable
                {
                    [propget] HRESULT MenuFlyoutPresenterStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem)]
                [uuid(6B0688C1-47B0-53B5-B6F9-5EC5D6623B84)]
                interface IMenuFlyoutSubItem : IInspectable
                {
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase*>** value);
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem)]
                [uuid(F59A8DDF-804B-5F56-BC42-F27F987DB291)]
                interface IMenuFlyoutSubItemStatics : IInspectable
                {
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(90DBE29A-449C-5384-99EC-42ADF8BF1069)]
                interface IMenuPresenter : IInspectable
                {
                    [propget] HRESULT OwningMenu([out] [retval] Microsoft.UI.Xaml.Controls.IMenu** value);
                    [propput] HRESULT OwningMenu([in] Microsoft.UI.Xaml.Controls.IMenu* value);
                    [propget] HRESULT Owner([out] [retval] Microsoft.UI.Xaml.Controls.ISubMenuOwner** value);
                    [propput] HRESULT Owner([in] Microsoft.UI.Xaml.Controls.ISubMenuOwner* value);
                    [propget] HRESULT SubPresenter([out] [retval] Microsoft.UI.Xaml.Controls.IMenuPresenter** value);
                    [propput] HRESULT SubPresenter([in] Microsoft.UI.Xaml.Controls.IMenuPresenter* value);
                    HRESULT CloseSubMenu();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(DD06F030-5D47-533C-95CF-DE256A0F373A)]
                interface INavigate : IInspectable
                {
                    HRESULT Navigate([in] Windows.UI.Xaml.Interop.TypeName sourcePageType, [out] [retval] boolean* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationView)]
                [uuid(BB7B0624-B57D-59D8-95E4-147243C3BDC5)]
                [version(0x00000001)]
                interface INavigationView : IInspectable
                {
                    [propget] HRESULT IsPaneOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsPaneOpen([in] boolean value);
                    [propget] HRESULT CompactModeThresholdWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT CompactModeThresholdWidth([in] DOUBLE value);
                    [propget] HRESULT ExpandedModeThresholdWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT ExpandedModeThresholdWidth([in] DOUBLE value);
                    [propget] HRESULT PaneFooter([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT PaneFooter([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT DisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode* value);
                    [propget] HRESULT IsSettingsVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsSettingsVisible([in] boolean value);
                    [propget] HRESULT IsPaneToggleButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsPaneToggleButtonVisible([in] boolean value);
                    [propget] HRESULT AlwaysShowHeader([out] [retval] boolean* value);
                    [propput] HRESULT AlwaysShowHeader([in] boolean value);
                    [propget] HRESULT CompactPaneLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT CompactPaneLength([in] DOUBLE value);
                    [propget] HRESULT OpenPaneLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT OpenPaneLength([in] DOUBLE value);
                    [propget] HRESULT PaneToggleButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT PaneToggleButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    [propget] HRESULT MenuItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT MenuItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT MenuItemsSource([in] IInspectable* value);
                    [propget] HRESULT SettingsItem([out] [retval] IInspectable** value);
                    [propget] HRESULT AutoSuggestBox([out] [retval] Microsoft.UI.Xaml.Controls.AutoSuggestBox** value);
                    [propput] HRESULT AutoSuggestBox([in] Microsoft.UI.Xaml.Controls.AutoSuggestBox* value);
                    [propget] HRESULT MenuItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT MenuItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT MenuItemTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT MenuItemTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT MenuItemContainerStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT MenuItemContainerStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT MenuItemContainerStyleSelector([out] [retval] Microsoft.UI.Xaml.Controls.StyleSelector** value);
                    [propput] HRESULT MenuItemContainerStyleSelector([in] Microsoft.UI.Xaml.Controls.StyleSelector* value);
                    HRESULT MenuItemFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] IInspectable** result);
                    HRESULT ContainerFromMenuItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [eventadd] HRESULT SelectionChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ItemInvoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ItemInvoked([in] EventRegistrationToken token);
                    [eventadd] HRESULT DisplayModeChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DisplayModeChanged([in] EventRegistrationToken token);
                    [propget] HRESULT IsBackButtonVisible([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible* value);
                    [propput] HRESULT IsBackButtonVisible([in] Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible value);
                    [propget] HRESULT IsBackEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsBackEnabled([in] boolean value);
                    [propget] HRESULT PaneTitle([out] [retval] HSTRING* value);
                    [propput] HRESULT PaneTitle([in] HSTRING value);
                    [eventadd] HRESULT BackRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BackRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneClosed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneClosed([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneClosing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneClosing([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneOpened([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneOpened([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneOpening([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneOpening([in] EventRegistrationToken token);
                    [propget] HRESULT PaneDisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode* value);
                    [propput] HRESULT PaneDisplayMode([in] Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode value);
                    [propget] HRESULT PaneHeader([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT PaneHeader([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT PaneCustomContent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT PaneCustomContent([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT ContentOverlay([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT ContentOverlay([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT IsPaneVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsPaneVisible([in] boolean value);
                    [propget] HRESULT SelectionFollowsFocus([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus* value);
                    [propput] HRESULT SelectionFollowsFocus([in] Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings** value);
                    [propget] HRESULT ShoulderNavigationEnabled([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled* value);
                    [propput] HRESULT ShoulderNavigationEnabled([in] Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled value);
                    [propget] HRESULT OverflowLabelMode([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode* value);
                    [propput] HRESULT OverflowLabelMode([in] Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode value);
                    [propget] HRESULT IsTitleBarAutoPaddingEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTitleBarAutoPaddingEnabled([in] boolean value);
                    [eventadd] HRESULT Expanding([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Expanding([in] EventRegistrationToken token);
                    [eventadd] HRESULT Collapsed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView*, Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Collapsed([in] EventRegistrationToken token);
                    HRESULT Expand([in] Microsoft.UI.Xaml.Controls.NavigationViewItem* item);
                    HRESULT Collapse([in] Microsoft.UI.Xaml.Controls.NavigationViewItem* item);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs)]
                [uuid(AE752207-BD1B-5AFA-A872-E9BBAEEA0EDE)]
                [version(0x00000001)]
                interface INavigationViewBackRequestedEventArgs : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs)]
                [uuid(58DCF1EA-9E56-522C-B3F8-34BD55ECACA4)]
                [version(0x00000001)]
                interface INavigationViewDisplayModeChangedEventArgs : IInspectable
                {
                    [propget] HRESULT DisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationView)]
                [uuid(FFEA1ADA-9232-5507-A320-ED2FADBE6127)]
                [version(0x00000001)]
                interface INavigationViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NavigationView** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItem)]
                [uuid(353F6698-74D1-5ABE-B7A4-C83616BED807)]
                [version(0x00000001)]
                interface INavigationViewItem : IInspectable
                {
                    [propget] HRESULT Icon([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT Icon([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                    [propget] HRESULT CompactPaneLength([out] [retval] DOUBLE* value);
                    [propget] HRESULT SelectsOnInvoked([out] [retval] boolean* value);
                    [propput] HRESULT SelectsOnInvoked([in] boolean value);
                    [propget] HRESULT IsExpanded([out] [retval] boolean* value);
                    [propput] HRESULT IsExpanded([in] boolean value);
                    [propget] HRESULT HasUnrealizedChildren([out] [retval] boolean* value);
                    [propput] HRESULT HasUnrealizedChildren([in] boolean value);
                    [propget] HRESULT IsChildSelected([out] [retval] boolean* value);
                    [propput] HRESULT IsChildSelected([in] boolean value);
                    [propget] HRESULT MenuItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT MenuItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT MenuItemsSource([in] IInspectable* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemBase)]
                [uuid(656833E8-4BDE-537D-998D-CC688E91DA4C)]
                [version(0x00000001)]
                interface INavigationViewItemBase : IInspectable
                {
                    [propget] HRESULT IsSelected([out] [retval] boolean* value);
                    [propput] HRESULT IsSelected([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemBase)]
                [uuid(31B9D7B1-7C38-5916-99C6-C71F6B012B1B)]
                [version(0x00000001)]
                interface INavigationViewItemBaseFactory : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemBase)]
                [uuid(71A0C438-F0C2-5093-8906-C1C3C02DE791)]
                [version(0x00000001)]
                interface INavigationViewItemBaseStatics : IInspectable
                {
                    [propget] HRESULT IsSelectedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs)]
                [uuid(B546F6A1-C66F-5DED-B5D7-BED0A26197E3)]
                [version(0x00000001)]
                interface INavigationViewItemCollapsedEventArgs : IInspectable
                {
                    [propget] HRESULT CollapsedItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemBase** value);
                    [propget] HRESULT CollapsedItem([out] [retval] IInspectable** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs)]
                [uuid(6F0941BE-E991-52F8-8315-F08389497976)]
                [version(0x00000001)]
                interface INavigationViewItemExpandingEventArgs : IInspectable
                {
                    [propget] HRESULT ExpandingItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemBase** value);
                    [propget] HRESULT ExpandingItem([out] [retval] IInspectable** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItem)]
                [uuid(DE60A001-9385-5535-80E1-2B68F4BFDE26)]
                [version(0x00000001)]
                interface INavigationViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemHeader)]
                [uuid(432BC062-45BC-57EF-A2D3-11851A56A882)]
                [version(0x00000001)]
                interface INavigationViewItemHeader : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemHeader)]
                [uuid(6A5447CD-2918-5FE3-899B-93D6961285E6)]
                [version(0x00000001)]
                interface INavigationViewItemHeaderFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemHeader** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs)]
                [uuid(11D7BC17-5BDF-5F96-8635-A3297DAC403C)]
                [version(0x00000001)]
                interface INavigationViewItemInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT InvokedItem([out] [retval] IInspectable** value);
                    [propget] HRESULT IsSettingsInvoked([out] [retval] boolean* value);
                    [propget] HRESULT InvokedItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemBase** value);
                    [propget] HRESULT RecommendedNavigationTransitionInfo([out] [retval] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator)]
                [uuid(E3C35630-1D5F-5689-A0CB-8794485CAACF)]
                [version(0x00000001)]
                interface INavigationViewItemSeparator : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator)]
                [uuid(181266A1-D4F8-5AF7-810B-AEE8A1D452ED)]
                [version(0x00000001)]
                interface INavigationViewItemSeparatorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewItem)]
                [uuid(06F65669-1A55-5DC4-9310-824C9467311D)]
                [version(0x00000001)]
                interface INavigationViewItemStatics : IInspectable
                {
                    [propget] HRESULT IconProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CompactPaneLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectsOnInvokedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsExpandedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HasUnrealizedChildrenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsChildSelectedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs)]
                [uuid(E8643304-6DB4-5AF5-BAC2-62733CA037DA)]
                [version(0x00000001)]
                interface INavigationViewPaneClosingEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs)]
                [uuid(5F6A8B04-C20E-5437-A1E4-010ACF99C69C)]
                [version(0x00000001)]
                interface INavigationViewSelectionChangedEventArgs : IInspectable
                {
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propget] HRESULT IsSettingsSelected([out] [retval] boolean* value);
                    [propget] HRESULT SelectedItemContainer([out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewItemBase** value);
                    [propget] HRESULT RecommendedNavigationTransitionInfo([out] [retval] Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationView)]
                [uuid(14F2810A-D18E-5BED-A307-CEA8C828F6A1)]
                [version(0x00000001)]
                interface INavigationViewStatics : IInspectable
                {
                    [propget] HRESULT IsPaneOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CompactModeThresholdWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ExpandedModeThresholdWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneFooterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSettingsVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPaneToggleButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AlwaysShowHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CompactPaneLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OpenPaneLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneToggleButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SettingsItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AutoSuggestBoxProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemContainerStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MenuItemContainerStyleSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsBackButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsBackEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneTitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneDisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneCustomContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentOverlayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPaneVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFollowsFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShoulderNavigationEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OverflowLabelModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTitleBarAutoPaddingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings)]
                [uuid(8A6A64F7-18FF-5490-97C8-CAD3A3570F5A)]
                [version(0x00000001)]
                interface INavigationViewTemplateSettings : IInspectable
                {
                    [propget] HRESULT TopPadding([out] [retval] DOUBLE* value);
                    [propget] HRESULT OverflowButtonVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT PaneToggleButtonVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT BackButtonVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT TopPaneVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT LeftPaneVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT SingleSelectionFollowsFocus([out] [retval] boolean* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings)]
                [uuid(34FF6C94-6465-5F3E-B0A5-4F1EEA48E743)]
                [version(0x00000001)]
                interface INavigationViewTemplateSettingsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings)]
                [uuid(AC1D805B-DCFE-579F-A9CB-62E400713842)]
                [version(0x00000001)]
                interface INavigationViewTemplateSettingsStatics : IInspectable
                {
                    [propget] HRESULT TopPaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OverflowButtonVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneToggleButtonVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackButtonVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopPaneVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LeftPaneVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SingleSelectionFollowsFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayout)]
                [uuid(0C24DEFD-F68F-51D9-998E-4CBAD48BE012)]
                [version(0x00000001)]
                interface INonVirtualizingLayout : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext)]
                [uuid(1E378538-F33C-5410-82CC-CA6F06D5E259)]
                [version(0x00000001)]
                interface INonVirtualizingLayoutContext : IInspectable
                {
                    [propget] HRESULT Children([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext)]
                [uuid(DABAC020-189C-5BBF-A4DC-97DA1199F577)]
                [version(0x00000001)]
                interface INonVirtualizingLayoutContextFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext)]
                [uuid(995CF544-5D3F-5F44-B537-FD13650C745C)]
                [version(0x00000001)]
                interface INonVirtualizingLayoutContextOverrides : IInspectable
                {
                    [propget] HRESULT ChildrenCore([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayout)]
                [uuid(A16D2D12-DBAC-5CE0-AEF5-09171A4D3571)]
                [version(0x00000001)]
                interface INonVirtualizingLayoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NonVirtualizingLayout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NonVirtualizingLayout)]
                [uuid(3C28B831-35C1-5182-A843-A43F339B6687)]
                [version(0x00000001)]
                interface INonVirtualizingLayoutOverrides : IInspectable
                {
                    HRESULT InitializeForContextCore([in] Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext* context);
                    HRESULT UninitializeForContextCore([in] Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext* context);
                    HRESULT MeasureOverride([in] Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext* context, [in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT ArrangeOverride([in] Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext* context, [in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Size* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NumberBox)]
                [uuid(C18EB0E9-29FB-525D-ABBC-D6B2110F542E)]
                [version(0x00000001)]
                interface INumberBox : IInspectable
                {
                    [propget] HRESULT Minimum([out] [retval] DOUBLE* value);
                    [propput] HRESULT Minimum([in] DOUBLE value);
                    [propget] HRESULT Maximum([out] [retval] DOUBLE* value);
                    [propput] HRESULT Maximum([in] DOUBLE value);
                    [propget] HRESULT Value([out] [retval] DOUBLE* value);
                    [propput] HRESULT Value([in] DOUBLE value);
                    [propget] HRESULT SmallChange([out] [retval] DOUBLE* value);
                    [propput] HRESULT SmallChange([in] DOUBLE value);
                    [propget] HRESULT LargeChange([out] [retval] DOUBLE* value);
                    [propput] HRESULT LargeChange([in] DOUBLE value);
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([out] [retval] boolean* value);
                    [propput] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([in] boolean value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [propget] HRESULT ValidationMode([out] [retval] Microsoft.UI.Xaml.Controls.NumberBoxValidationMode* value);
                    [propput] HRESULT ValidationMode([in] Microsoft.UI.Xaml.Controls.NumberBoxValidationMode value);
                    [propget] HRESULT SpinButtonPlacementMode([out] [retval] Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode* value);
                    [propput] HRESULT SpinButtonPlacementMode([in] Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode value);
                    [propget] HRESULT IsWrapEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsWrapEnabled([in] boolean value);
                    [propget] HRESULT AcceptsExpression([out] [retval] boolean* value);
                    [propput] HRESULT AcceptsExpression([in] boolean value);
                    [propget] HRESULT NumberFormatter([out] [retval] Windows.Globalization.NumberFormatting.INumberFormatter2** value);
                    [propput] HRESULT NumberFormatter([in] Windows.Globalization.NumberFormatting.INumberFormatter2* value);
                    [eventadd] HRESULT ValueChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NumberBox*, Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ValueChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NumberBox)]
                [uuid(6B81F3CB-45A4-5D19-9BBB-A9FE4656AC4D)]
                [version(0x00000001)]
                interface INumberBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.NumberBox** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NumberBox)]
                [uuid(251EC05C-A77C-5540-BE39-6053F797CDE7)]
                [version(0x00000001)]
                interface INumberBoxStatics : IInspectable
                {
                    [propget] HRESULT MinimumProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaximumProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SmallChangeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LargeChangeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ValidationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SpinButtonPlacementModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsWrapEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AcceptsExpressionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT NumberFormatterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs)]
                [uuid(C66CF16E-7C8A-532E-9D23-058C1C98DD50)]
                [version(0x00000001)]
                interface INumberBoxValueChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldValue([out] [retval] DOUBLE* value);
                    [propget] HRESULT NewValue([out] [retval] DOUBLE* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Page)]
                [uuid(EB42988E-6CB5-5DD6-9E59-4C04E5CAEC6D)]
                interface IPage : IInspectable
                {
                    [propget] HRESULT Frame([out] [retval] Microsoft.UI.Xaml.Controls.Frame** value);
                    [propget] HRESULT NavigationCacheMode([out] [retval] Microsoft.UI.Xaml.Navigation.NavigationCacheMode* value);
                    [propput] HRESULT NavigationCacheMode([in] Microsoft.UI.Xaml.Navigation.NavigationCacheMode value);
                    [propget] HRESULT TopAppBar([out] [retval] Microsoft.UI.Xaml.Controls.AppBar** value);
                    [propput] HRESULT TopAppBar([in] Microsoft.UI.Xaml.Controls.AppBar* value);
                    [propget] HRESULT BottomAppBar([out] [retval] Microsoft.UI.Xaml.Controls.AppBar** value);
                    [propput] HRESULT BottomAppBar([in] Microsoft.UI.Xaml.Controls.AppBar* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Page)]
                [uuid(FF4357D5-DDCD-5129-9D0F-D8AED2ADC1A9)]
                interface IPageFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Page** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Page)]
                [uuid(9B8445F7-D938-5626-850A-86E91CA89E98)]
                interface IPageOverrides : IInspectable
                {
                    HRESULT OnNavigatedFrom([in] Microsoft.UI.Xaml.Navigation.NavigationEventArgs* e);
                    HRESULT OnNavigatedTo([in] Microsoft.UI.Xaml.Navigation.NavigationEventArgs* e);
                    HRESULT OnNavigatingFrom([in] Microsoft.UI.Xaml.Navigation.NavigatingCancelEventArgs* e);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Page)]
                [uuid(B6241486-A374-5D09-A01F-9ABE311C0884)]
                interface IPageStatics : IInspectable
                {
                    [propget] HRESULT FrameProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopAppBarProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BottomAppBarProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Panel)]
                [uuid(27A1B418-56F3-525E-B883-CEFED905EED3)]
                interface IPanel : IInspectable
                {
                    [propget] HRESULT Children([out] [retval] Microsoft.UI.Xaml.Controls.UIElementCollection** value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT IsItemsHost([out] [retval] boolean* value);
                    [propget] HRESULT ChildrenTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ChildrenTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT BackgroundTransition([out] [retval] Microsoft.UI.Xaml.BrushTransition** value);
                    [propput] HRESULT BackgroundTransition([in] Microsoft.UI.Xaml.BrushTransition* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Panel)]
                [uuid(F5E7E21C-4C97-5D20-BEE6-3E4FC6AB14E9)]
                interface IPanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Panel** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Panel)]
                [uuid(76A9CAA7-A5D4-5061-A325-17C76F66DE51)]
                interface IPanelStatics : IInspectable
                {
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsItemsHostProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ChildrenTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ParallaxView)]
                [uuid(E6F4A919-1116-53AE-96C6-EFDDC59786F3)]
                [version(0x00000001)]
                interface IParallaxView : IInspectable
                {
                    [propget] HRESULT Child([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Child([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT HorizontalShift([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalShift([in] DOUBLE value);
                    [propget] HRESULT HorizontalSourceEndOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalSourceEndOffset([in] DOUBLE value);
                    [propget] HRESULT HorizontalSourceOffsetKind([out] [retval] Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind* value);
                    [propput] HRESULT HorizontalSourceOffsetKind([in] Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind value);
                    [propget] HRESULT HorizontalSourceStartOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalSourceStartOffset([in] DOUBLE value);
                    [propget] HRESULT IsHorizontalShiftClamped([out] [retval] boolean* value);
                    [propput] HRESULT IsHorizontalShiftClamped([in] boolean value);
                    [propget] HRESULT IsVerticalShiftClamped([out] [retval] boolean* value);
                    [propput] HRESULT IsVerticalShiftClamped([in] boolean value);
                    [propget] HRESULT MaxHorizontalShiftRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxHorizontalShiftRatio([in] DOUBLE value);
                    [propget] HRESULT MaxVerticalShiftRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxVerticalShiftRatio([in] DOUBLE value);
                    [propget] HRESULT Source([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Source([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT VerticalShift([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalShift([in] DOUBLE value);
                    [propget] HRESULT VerticalSourceEndOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalSourceEndOffset([in] DOUBLE value);
                    [propget] HRESULT VerticalSourceOffsetKind([out] [retval] Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind* value);
                    [propput] HRESULT VerticalSourceOffsetKind([in] Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind value);
                    [propget] HRESULT VerticalSourceStartOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalSourceStartOffset([in] DOUBLE value);
                    HRESULT RefreshAutomaticHorizontalOffsets();
                    HRESULT RefreshAutomaticVerticalOffsets();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ParallaxView)]
                [uuid(61DC973D-C595-5261-A9B7-35F41042EB00)]
                [version(0x00000001)]
                interface IParallaxViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ParallaxView** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ParallaxView)]
                [uuid(69211861-40BA-5083-8835-416F40D4C5EB)]
                [version(0x00000001)]
                interface IParallaxViewStatics : IInspectable
                {
                    [propget] HRESULT ChildProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalSourceEndOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalSourceOffsetKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalSourceStartOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxHorizontalShiftRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalShiftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsHorizontalShiftClampedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsVerticalShiftClampedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalSourceEndOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalSourceOffsetKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalSourceStartOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxVerticalShiftRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalShiftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PasswordBox)]
                [uuid(6D3CCFF7-AAEE-5ADC-8298-33300FA119DA)]
                interface IPasswordBox : IInspectable
                {
                    [propget] HRESULT Password([out] [retval] HSTRING* value);
                    [propput] HRESULT Password([in] HSTRING value);
                    [propget] HRESULT PasswordChar([out] [retval] HSTRING* value);
                    [propput] HRESULT PasswordChar([in] HSTRING value);
                    [deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT IsPasswordRevealButtonEnabled([out] [retval] boolean* value);
                    [deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propput] HRESULT IsPasswordRevealButtonEnabled([in] boolean value);
                    [propget] HRESULT MaxLength([out] [retval] INT32* value);
                    [propput] HRESULT MaxLength([in] INT32 value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([out] [retval] boolean* value);
                    [propput] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([in] boolean value);
                    [propget] HRESULT PasswordRevealMode([out] [retval] Microsoft.UI.Xaml.Controls.PasswordRevealMode* value);
                    [propput] HRESULT PasswordRevealMode([in] Microsoft.UI.Xaml.Controls.PasswordRevealMode value);
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT InputScope([out] [retval] Microsoft.UI.Xaml.Input.InputScope** value);
                    [propput] HRESULT InputScope([in] Microsoft.UI.Xaml.Input.InputScope* value);
                    [propget] HRESULT CanPasteClipboardContent([out] [retval] boolean* value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [eventadd] HRESULT PasswordChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PasswordChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuOpening([in] Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT Paste([in] Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Paste([in] EventRegistrationToken token);
                    [eventadd] HRESULT PasswordChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.PasswordBox*, Microsoft.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PasswordChanging([in] EventRegistrationToken token);
                    HRESULT SelectAll();
                    HRESULT PasteFromClipboard();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs)]
                [uuid(9A2F3B79-C00C-5D27-BB67-92CAB3DB0477)]
                interface IPasswordBoxPasswordChangingEventArgs : IInspectable
                {
                    [propget] HRESULT IsContentChanging([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PasswordBox)]
                [uuid(02E75AB5-64A1-5A6C-9151-C13792B2D00D)]
                interface IPasswordBoxStatics : IInspectable
                {
                    [propget] HRESULT PasswordProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PasswordCharProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [deprecated("IsPasswordRevealButtonEnabledProperty may be altered or unavailable for releases after Windows 10.0. Instead, use PasswordRevealModeProperty.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] [propget] HRESULT IsPasswordRevealButtonEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PasswordRevealModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputScopeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanPasteClipboardContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ErrorTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIcon)]
                [uuid(5C8229DB-51CD-5A3B-88EF-1D9A8AC97683)]
                interface IPathIcon : IInspectable
                {
                    [propget] HRESULT Data([out] [retval] Microsoft.UI.Xaml.Media.Geometry** value);
                    [propput] HRESULT Data([in] Microsoft.UI.Xaml.Media.Geometry* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIcon)]
                [uuid(8E88F087-F2CD-581C-91CA-A99335CA9599)]
                interface IPathIconFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.PathIcon** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIconSource)]
                [uuid(7ACDC6A5-F9AA-5D7E-8645-3C48989433A0)]
                interface IPathIconSource : IInspectable
                {
                    [propget] HRESULT Data([out] [retval] Microsoft.UI.Xaml.Media.Geometry** value);
                    [propput] HRESULT Data([in] Microsoft.UI.Xaml.Media.Geometry* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIconSource)]
                [uuid(9FEFE31E-5AB6-5394-A6EF-672F174D333B)]
                interface IPathIconSourceFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.PathIconSource** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIconSource)]
                [uuid(95DF636B-0DC3-5C94-BA43-8980FD030840)]
                interface IPathIconSourceStatics : IInspectable
                {
                    [propget] HRESULT DataProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PathIcon)]
                [uuid(72BBA29A-0595-5F6D-A8DF-2A0580A2CD78)]
                interface IPathIconStatics : IInspectable
                {
                    [propget] HRESULT DataProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.PersonPicture)]
                [uuid(30EC982C-0EFA-5538-A356-E9EBD5AA363C)]
                [version(0x00000001)]
                interface IPersonPicture : IInspectable
                {
                    [propget] HRESULT BadgeNumber([out] [retval] INT32* value);
                    [propput] HRESULT BadgeNumber([in] INT32 value);
                    [propget] HRESULT BadgeGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT BadgeGlyph([in] HSTRING value);
                    [propget] HRESULT BadgeImageSource([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT BadgeImageSource([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT BadgeText([out] [retval] HSTRING* value);
                    [propput] HRESULT BadgeText([in] HSTRING value);
                    [propget] HRESULT IsGroup([out] [retval] boolean* value);
                    [propput] HRESULT IsGroup([in] boolean value);
                    [propget] HRESULT Contact([out] [retval] Windows.ApplicationModel.Contacts.Contact** value);
                    [propput] HRESULT Contact([in] Windows.ApplicationModel.Contacts.Contact* value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propput] HRESULT DisplayName([in] HSTRING value);
                    [propget] HRESULT Initials([out] [retval] HSTRING* value);
                    [propput] HRESULT Initials([in] HSTRING value);
                    [propget] HRESULT PreferSmallImage([out] [retval] boolean* value);
                    [propput] HRESULT PreferSmallImage([in] boolean value);
                    [propget] HRESULT ProfilePicture([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT ProfilePicture([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.PersonPicture)]
                [uuid(7EC0794C-F2CC-5282-A89D-CD3BB765B71A)]
                [version(0x00000001)]
                interface IPersonPictureFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.PersonPicture** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.PersonPicture)]
                [uuid(3C769423-9B05-56C1-A169-098493C21F91)]
                [version(0x00000001)]
                interface IPersonPictureStatics : IInspectable
                {
                    [propget] HRESULT BadgeNumberProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BadgeGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BadgeImageSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BadgeTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsGroupProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContactProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayNameProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InitialsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreferSmallImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ProfilePictureProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings)]
                [uuid(E16DF12F-C3C0-5F26-A381-08F2DF052F29)]
                [version(0x00000001)]
                interface IPersonPictureTemplateSettings : IInspectable
                {
                    [propget] HRESULT ActualInitials([out] [retval] HSTRING* value);
                    [propget] HRESULT ActualImageBrush([out] [retval] Microsoft.UI.Xaml.Media.ImageBrush** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs)]
                [uuid(002AC84D-4CB1-5A84-9460-7B9FB716500B)]
                interface IPickerConfirmedEventArgs : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PickerFlyout)]
                [uuid(F73F69A0-92D3-5144-8459-A7A05A53BCD2)]
                interface IPickerFlyout : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT ConfirmationButtonsVisible([out] [retval] boolean* value);
                    [propput] HRESULT ConfirmationButtonsVisible([in] boolean value);
                    [eventadd] HRESULT Confirmed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.PickerFlyout*, Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Confirmed([in] EventRegistrationToken token);
                    HRESULT ShowAtAsync([in] Microsoft.UI.Xaml.FrameworkElement* target, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PickerFlyoutPresenter)]
                [uuid(2181B3F9-9F94-5EBE-9B56-AA106B7E02CD)]
                interface IPickerFlyoutPresenter : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PickerFlyout)]
                [uuid(A8D33E85-AEAA-5079-983B-CE45E468672A)]
                interface IPickerFlyoutStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ConfirmationButtonsVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Pivot)]
                [uuid(1C6438E5-ECAC-5FB6-8E8E-00DE7E922303)]
                interface IPivot : IInspectable
                {
                    [propget] HRESULT Title([out] [retval] IInspectable** value);
                    [propput] HRESULT Title([in] IInspectable* value);
                    [propget] HRESULT TitleTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT TitleTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT LeftHeader([out] [retval] IInspectable** value);
                    [propput] HRESULT LeftHeader([in] IInspectable* value);
                    [propget] HRESULT LeftHeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT LeftHeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT RightHeader([out] [retval] IInspectable** value);
                    [propput] HRESULT RightHeader([in] IInspectable* value);
                    [propget] HRESULT RightHeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT RightHeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                    [propput] HRESULT SelectedIndex([in] INT32 value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    [propget] HRESULT IsLocked([out] [retval] boolean* value);
                    [propput] HRESULT IsLocked([in] boolean value);
                    [propget] HRESULT HeaderFocusVisualPlacement([out] [retval] Microsoft.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement* value);
                    [propput] HRESULT HeaderFocusVisualPlacement([in] Microsoft.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement value);
                    [propget] HRESULT IsHeaderItemsCarouselEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsHeaderItemsCarouselEnabled([in] boolean value);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT PivotItemLoading([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Pivot*, Microsoft.UI.Xaml.Controls.PivotItemEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PivotItemLoading([in] EventRegistrationToken token);
                    [eventadd] HRESULT PivotItemLoaded([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Pivot*, Microsoft.UI.Xaml.Controls.PivotItemEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PivotItemLoaded([in] EventRegistrationToken token);
                    [eventadd] HRESULT PivotItemUnloading([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Pivot*, Microsoft.UI.Xaml.Controls.PivotItemEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PivotItemUnloading([in] EventRegistrationToken token);
                    [eventadd] HRESULT PivotItemUnloaded([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Pivot*, Microsoft.UI.Xaml.Controls.PivotItemEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PivotItemUnloaded([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Pivot)]
                [uuid(DA9D033C-4782-5A69-90AF-076CCDF071AE)]
                interface IPivotFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Pivot** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PivotItem)]
                [uuid(8108C195-63F5-5DF9-ABCF-418FA2DBFBEC)]
                interface IPivotItem : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PivotItemEventArgs)]
                [uuid(E42C62C2-0CB9-5E5B-8148-8D80A3838DE9)]
                interface IPivotItemEventArgs : IInspectable
                {
                    [propget] HRESULT Item([out] [retval] Microsoft.UI.Xaml.Controls.PivotItem** value);
                    [propput] HRESULT Item([in] Microsoft.UI.Xaml.Controls.PivotItem* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PivotItem)]
                [uuid(9149A2AB-606C-55A9-8786-801D55CA8ED6)]
                interface IPivotItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.PivotItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.PivotItem)]
                [uuid(E2EBE630-6629-5B7B-8666-FDEB9B98DB2C)]
                interface IPivotItemStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Pivot)]
                [uuid(619CC35F-B97B-5E32-885E-70949ED97EEB)]
                interface IPivotStatics : IInspectable
                {
                    [propget] HRESULT TitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TitleTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LeftHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LeftHeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RightHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RightHeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsLockedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderFocusVisualPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsHeaderItemsCarouselEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SlideInAnimationGroupProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetSlideInAnimationGroup([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] Microsoft.UI.Xaml.Controls.PivotSlideInAnimationGroup* result);
                    HRESULT SetSlideInAnimationGroup([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] Microsoft.UI.Xaml.Controls.PivotSlideInAnimationGroup value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ProgressBar)]
                [uuid(85DC3A73-34DD-5C7F-860B-BC13A7B2E7B3)]
                interface IProgressBar : IInspectable
                {
                    [propget] HRESULT IsIndeterminate([out] [retval] boolean* value);
                    [propput] HRESULT IsIndeterminate([in] boolean value);
                    [propget] HRESULT ShowError([out] [retval] boolean* value);
                    [propput] HRESULT ShowError([in] boolean value);
                    [propget] HRESULT ShowPaused([out] [retval] boolean* value);
                    [propput] HRESULT ShowPaused([in] boolean value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ProgressBar)]
                [uuid(189826AD-F6F2-533E-9DDB-B6600E88675B)]
                interface IProgressBarFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ProgressBar** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ProgressBar)]
                [uuid(61BBB127-E4C4-5E22-A8DC-CFCF957236D0)]
                interface IProgressBarStatics : IInspectable
                {
                    [propget] HRESULT IsIndeterminateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowErrorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShowPausedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ProgressRing)]
                [uuid(493FC877-C99C-5B52-98FC-1EAEDCB249EF)]
                interface IProgressRing : IInspectable
                {
                    [propget] HRESULT IsActive([out] [retval] boolean* value);
                    [propput] HRESULT IsActive([in] boolean value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ProgressRing)]
                [uuid(48DF9123-9707-5FDA-9CC3-7F5E91E8DD42)]
                interface IProgressRingStatics : IInspectable
                {
                    [propget] HRESULT IsActiveProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButton)]
                [uuid(38F30CEE-E75A-5BA1-AE64-4474A3ABEAC7)]
                interface IRadioButton : IInspectable
                {
                    [propget] HRESULT GroupName([out] [retval] HSTRING* value);
                    [propput] HRESULT GroupName([in] HSTRING value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButton)]
                [uuid(5772C79A-B3EB-5719-8005-2A513429495A)]
                interface IRadioButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RadioButton** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButton)]
                [uuid(A8BCE4D4-68FE-53D9-A317-74AB409CD4EE)]
                interface IRadioButtonStatics : IInspectable
                {
                    [propget] HRESULT GroupNameProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButtons)]
                [uuid(966DAF80-EE85-5D90-B6B3-80BEC9134673)]
                [version(0x00000001)]
                interface IRadioButtons : IInspectable
                {
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT ItemTemplate([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemTemplate([in] IInspectable* value);
                    HRESULT ContainerFromIndex([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                    [propput] HRESULT SelectedIndex([in] INT32 value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [propget] HRESULT MaxColumns([out] [retval] INT32* value);
                    [propput] HRESULT MaxColumns([in] INT32 value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButtons)]
                [uuid(2CF95EFB-A7A2-5D85-8EAD-EA222BAA3C55)]
                [version(0x00000001)]
                interface IRadioButtonsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RadioButtons** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioButtons)]
                [uuid(DE0BF0CA-9AE8-5B8A-9738-7D98B344C039)]
                [version(0x00000001)]
                interface IRadioButtonsStatics : IInspectable
                {
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem)]
                [uuid(9D6F45F5-5532-5669-8F02-05735953026A)]
                [version(0x00000001)]
                interface IRadioMenuFlyoutItem : IInspectable
                {
                    [propget] HRESULT IsChecked([out] [retval] boolean* value);
                    [propput] HRESULT IsChecked([in] boolean value);
                    [propget] HRESULT GroupName([out] [retval] HSTRING* value);
                    [propput] HRESULT GroupName([in] HSTRING value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem)]
                [uuid(113822D2-35A3-5B0D-9D0D-C3830EC1973B)]
                [version(0x00000001)]
                interface IRadioMenuFlyoutItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem)]
                [uuid(47117E20-E03D-53F0-938E-ECCBFFFB5421)]
                [version(0x00000001)]
                interface IRadioMenuFlyoutItemStatics : IInspectable
                {
                    [propget] HRESULT IsCheckedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GroupNameProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingControl)]
                [uuid(5488193B-EA4B-52C6-8544-C063219BCD90)]
                [version(0x00000001)]
                interface IRatingControl : IInspectable
                {
                    [propget] HRESULT Caption([out] [retval] HSTRING* value);
                    [propput] HRESULT Caption([in] HSTRING value);
                    [propget] HRESULT InitialSetValue([out] [retval] INT32* value);
                    [propput] HRESULT InitialSetValue([in] INT32 value);
                    [propget] HRESULT IsClearEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsClearEnabled([in] boolean value);
                    [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
                    [propput] HRESULT IsReadOnly([in] boolean value);
                    [propget] HRESULT MaxRating([out] [retval] INT32* value);
                    [propput] HRESULT MaxRating([in] INT32 value);
                    [propget] HRESULT PlaceholderValue([out] [retval] DOUBLE* value);
                    [propput] HRESULT PlaceholderValue([in] DOUBLE value);
                    [propget] HRESULT ItemInfo([out] [retval] Microsoft.UI.Xaml.Controls.RatingItemInfo** value);
                    [propput] HRESULT ItemInfo([in] Microsoft.UI.Xaml.Controls.RatingItemInfo* value);
                    [propget] HRESULT Value([out] [retval] DOUBLE* value);
                    [propput] HRESULT Value([in] DOUBLE value);
                    [eventadd] HRESULT ValueChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RatingControl*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ValueChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingControl)]
                [uuid(A53B9B73-BFF9-548D-A294-AC63D819F78A)]
                [version(0x00000001)]
                interface IRatingControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RatingControl** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingControl)]
                [uuid(DAC61D65-E8F9-5E4D-813D-05C980B2F118)]
                [version(0x00000001)]
                interface IRatingControlStatics : IInspectable
                {
                    [propget] HRESULT CaptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InitialSetValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsClearEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsReadOnlyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxRatingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemInfoProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemFontInfo)]
                [uuid(995A16DC-3A0F-5727-9F38-52CFC8143654)]
                [version(0x00000001)]
                interface IRatingItemFontInfo : IInspectable
                {
                    [propget] HRESULT DisabledGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT DisabledGlyph([in] HSTRING value);
                    [propget] HRESULT Glyph([out] [retval] HSTRING* value);
                    [propput] HRESULT Glyph([in] HSTRING value);
                    [propget] HRESULT PointerOverGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT PointerOverGlyph([in] HSTRING value);
                    [propget] HRESULT PointerOverPlaceholderGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT PointerOverPlaceholderGlyph([in] HSTRING value);
                    [propget] HRESULT PlaceholderGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderGlyph([in] HSTRING value);
                    [propget] HRESULT UnsetGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT UnsetGlyph([in] HSTRING value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemFontInfo)]
                [uuid(109C6541-706E-5FD7-BAAE-020B24899F61)]
                [version(0x00000001)]
                interface IRatingItemFontInfoFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RatingItemFontInfo** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemFontInfo)]
                [uuid(F600F780-A5ED-537F-90C2-EAEE8A61F8A5)]
                [version(0x00000001)]
                interface IRatingItemFontInfoStatics : IInspectable
                {
                    [propget] HRESULT DisabledGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PointerOverGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PointerOverPlaceholderGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT UnsetGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemImageInfo)]
                [uuid(FCDAEBD2-6FB5-523F-959E-3516BC0B72B7)]
                [version(0x00000001)]
                interface IRatingItemImageInfo : IInspectable
                {
                    [propget] HRESULT DisabledImage([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT DisabledImage([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT Image([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT Image([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT PlaceholderImage([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT PlaceholderImage([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT PointerOverImage([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT PointerOverImage([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT PointerOverPlaceholderImage([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT PointerOverPlaceholderImage([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                    [propget] HRESULT UnsetImage([out] [retval] Microsoft.UI.Xaml.Media.ImageSource** value);
                    [propput] HRESULT UnsetImage([in] Microsoft.UI.Xaml.Media.ImageSource* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemImageInfo)]
                [uuid(4ACC8CAC-BCA8-5380-95E4-345C1BE256B2)]
                [version(0x00000001)]
                interface IRatingItemImageInfoFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RatingItemImageInfo** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemImageInfo)]
                [uuid(F582921D-0431-5E52-96D9-284D82DC7CBA)]
                [version(0x00000001)]
                interface IRatingItemImageInfoStatics : IInspectable
                {
                    [propget] HRESULT DisabledImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PointerOverImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PointerOverPlaceholderImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT UnsetImageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemInfo)]
                [uuid(801E924E-3613-55DD-8321-9EBABBED0B8A)]
                [version(0x00000001)]
                interface IRatingItemInfo : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RatingItemInfo)]
                [uuid(61F13480-CD0C-556A-B532-A0CF53E3CDA0)]
                [version(0x00000001)]
                interface IRatingItemInfoFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RatingItemInfo** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclePool)]
                [uuid(342C72A5-66EA-5EC2-AF9F-D784C7E02225)]
                [version(0x00000001)]
                interface IRecyclePool : IInspectable
                {
                    [overload("PutElement")] HRESULT PutElement([in] Microsoft.UI.Xaml.UIElement* element, [in] HSTRING key);
                    [overload("PutElement")] HRESULT PutElementWithOwner([in] Microsoft.UI.Xaml.UIElement* element, [in] HSTRING key, [in] Microsoft.UI.Xaml.UIElement* owner);
                    [overload("TryGetElement")] HRESULT TryGetElement([in] HSTRING key, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [overload("TryGetElement")] HRESULT TryGetElementWithOwner([in] HSTRING key, [in] Microsoft.UI.Xaml.UIElement* owner, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclePool)]
                [uuid(9DA654DE-70C7-5415-A227-CFB65DEE3E51)]
                [version(0x00000001)]
                interface IRecyclePoolFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RecyclePool** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclePool)]
                [uuid(6A62E8C5-5AB6-5CBB-8ECA-5ADDFC6217D0)]
                [version(0x00000001)]
                interface IRecyclePoolOverrides : IInspectable
                {
                    HRESULT PutElementCore([in] Microsoft.UI.Xaml.UIElement* element, [in] HSTRING key, [in] Microsoft.UI.Xaml.UIElement* owner);
                    HRESULT TryGetElementCore([in] HSTRING key, [in] Microsoft.UI.Xaml.UIElement* owner, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclePool)]
                [uuid(B8D2AC81-6CD8-5E6F-89DF-BA3BFB00845A)]
                [version(0x00000001)]
                interface IRecyclePoolStatics : IInspectable
                {
                    [propget] HRESULT PoolInstanceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetPoolInstance([in] Microsoft.UI.Xaml.DataTemplate* dataTemplate, [out] [retval] Microsoft.UI.Xaml.Controls.RecyclePool** result);
                    HRESULT SetPoolInstance([in] Microsoft.UI.Xaml.DataTemplate* dataTemplate, [in] Microsoft.UI.Xaml.Controls.RecyclePool* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclingElementFactory)]
                [uuid(467030FD-89F1-5738-A505-FF3EC10BDEEA)]
                [version(0x00000001)]
                interface IRecyclingElementFactory : IInspectable
                {
                    [propget] HRESULT RecyclePool([out] [retval] Microsoft.UI.Xaml.Controls.RecyclePool** value);
                    [propput] HRESULT RecyclePool([in] Microsoft.UI.Xaml.Controls.RecyclePool* value);
                    [propget] HRESULT Templates([out] [retval] Windows.Foundation.Collections.IMap<HSTRING, Microsoft.UI.Xaml.DataTemplate*>** value);
                    [propput] HRESULT Templates([in] Windows.Foundation.Collections.IMap<HSTRING, Microsoft.UI.Xaml.DataTemplate*>* value);
                    [eventadd] HRESULT SelectTemplateKey([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RecyclingElementFactory*, Microsoft.UI.Xaml.Controls.SelectTemplateEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectTemplateKey([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclingElementFactory)]
                [uuid(B2121301-13AB-5965-AD31-62C54A329AD6)]
                [version(0x00000001)]
                interface IRecyclingElementFactoryFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RecyclingElementFactory** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RecyclingElementFactory)]
                [uuid(42CAC2E9-A977-5785-B5FC-D1D1D6017684)]
                [version(0x00000001)]
                interface IRecyclingElementFactoryOverrides : IInspectable
                {
                    HRESULT OnSelectTemplateKeyCore([in] IInspectable* dataContext, [in] Microsoft.UI.Xaml.UIElement* owner, [out] [retval] HSTRING* result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshContainer)]
                [uuid(1C9778E8-A427-5F86-9D5E-02DB9B2C4093)]
                [version(0x00000001)]
                interface IRefreshContainer : IInspectable
                {
                    [propget] HRESULT Visualizer([out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizer** value);
                    [propput] HRESULT Visualizer([in] Microsoft.UI.Xaml.Controls.RefreshVisualizer* value);
                    [propget] HRESULT PullDirection([out] [retval] Microsoft.UI.Xaml.Controls.RefreshPullDirection* value);
                    [propput] HRESULT PullDirection([in] Microsoft.UI.Xaml.Controls.RefreshPullDirection value);
                    [eventadd] HRESULT RefreshRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshContainer*, Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RefreshRequested([in] EventRegistrationToken token);
                    HRESULT RequestRefresh();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshContainer)]
                [uuid(5F228FA1-2EA2-52B5-B78A-0C133F86F020)]
                [version(0x00000001)]
                interface IRefreshContainerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RefreshContainer** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshContainer)]
                [uuid(875EF8A0-74C2-5201-B708-50A48E7E7601)]
                [version(0x00000001)]
                interface IRefreshContainerStatics : IInspectable
                {
                    [propget] HRESULT VisualizerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PullDirectionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs)]
                [uuid(790B70E0-F199-552B-B126-6CB45C2DE8F9)]
                [version(0x00000001)]
                interface IRefreshInteractionRatioChangedEventArgs : IInspectable
                {
                    [propget] HRESULT InteractionRatio([out] [retval] DOUBLE* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs)]
                [uuid(ED97A956-6019-5329-9312-F885B5C774CD)]
                [version(0x00000001)]
                interface IRefreshRequestedEventArgs : IInspectable
                {
                    HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs)]
                [uuid(7BE897CE-17C4-5FDF-B441-C6EF3301E0F6)]
                [version(0x00000001)]
                interface IRefreshStateChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldState([out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizerState* value);
                    [propget] HRESULT NewState([out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizerState* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshVisualizer)]
                [uuid(D6C55DB6-D82D-5B68-BA1D-28593FB0AB12)]
                [version(0x00000001)]
                interface IRefreshVisualizer : IInspectable
                {
                    HRESULT RequestRefresh();
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizerOrientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.RefreshVisualizerOrientation value);
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT State([out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizerState* value);
                    [eventadd] HRESULT RefreshRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshVisualizer*, Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RefreshRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT RefreshStateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RefreshVisualizer*, Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT RefreshStateChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshVisualizer)]
                [uuid(9D6F2BF2-6628-582A-892B-68C2770C173C)]
                [version(0x00000001)]
                interface IRefreshVisualizerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RefreshVisualizer** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RefreshVisualizer)]
                [uuid(3540FE79-590D-546F-BF2A-A30D46E8CDFA)]
                [version(0x00000001)]
                interface IRefreshVisualizerStatics : IInspectable
                {
                    [propget] HRESULT InfoProviderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RelativePanel)]
                [uuid(C432FCC4-88F2-59D8-9D0E-A237BEAEB07F)]
                interface IRelativePanel : IInspectable
                {
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RelativePanel)]
                [uuid(C85F1443-D973-50FD-9497-B867F492468F)]
                interface IRelativePanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RelativePanel** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RelativePanel)]
                [uuid(BDD929A2-76CC-59C4-82C1-F14B5DA4221A)]
                interface IRelativePanelStatics : IInspectable
                {
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LeftOfProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetLeftOf([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetLeftOf([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AboveProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAbove([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAbove([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT RightOfProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetRightOf([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetRightOf([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT BelowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetBelow([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetBelow([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignHorizontalCenterWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignHorizontalCenterWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignHorizontalCenterWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignVerticalCenterWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignVerticalCenterWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignVerticalCenterWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignLeftWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignLeftWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignLeftWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignTopWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignTopWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignTopWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignRightWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignRightWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignRightWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignBottomWithProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignBottomWith([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] IInspectable** result);
                    HRESULT SetAlignBottomWith([in] Microsoft.UI.Xaml.UIElement* element, [in] IInspectable* value);
                    [propget] HRESULT AlignLeftWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignLeftWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignLeftWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT AlignTopWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignTopWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignTopWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT AlignRightWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignRightWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignRightWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT AlignBottomWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignBottomWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignBottomWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT AlignHorizontalCenterWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignHorizontalCenterWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignHorizontalCenterWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT AlignVerticalCenterWithPanelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetAlignVerticalCenterWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                    HRESULT SetAlignVerticalCenterWithPanel([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter)]
                [uuid(365FDBAC-3989-559C-BEA9-764561881C96)]
                [version(0x00000001)]
                interface IRevealListViewItemPresenter : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter)]
                [uuid(E730C53B-8F94-55B3-8BC1-98F77C5766BD)]
                [version(0x00000001)]
                interface IRevealListViewItemPresenterFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichEditBox)]
                [uuid(699163DB-723D-5514-A8C9-2C64D99E1EA6)]
                interface IRichEditBox : IInspectable
                {
                    [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
                    [propput] HRESULT IsReadOnly([in] boolean value);
                    [propget] HRESULT AcceptsReturn([out] [retval] boolean* value);
                    [propput] HRESULT AcceptsReturn([in] boolean value);
                    [propget] HRESULT TextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT TextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT TextWrapping([out] [retval] Microsoft.UI.Xaml.TextWrapping* value);
                    [propput] HRESULT TextWrapping([in] Microsoft.UI.Xaml.TextWrapping value);
                    [propget] HRESULT IsSpellCheckEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSpellCheckEnabled([in] boolean value);
                    [propget] HRESULT IsTextPredictionEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextPredictionEnabled([in] boolean value);
                    [propget] HRESULT Document([out] [retval] Microsoft.UI.Text.RichEditTextDocument** value);
                    [propget] HRESULT InputScope([out] [retval] Microsoft.UI.Xaml.Input.InputScope** value);
                    [propput] HRESULT InputScope([in] Microsoft.UI.Xaml.Input.InputScope* value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([out] [retval] boolean* value);
                    [propput] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([in] boolean value);
                    [propget] HRESULT IsColorFontEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsColorFontEnabled([in] boolean value);
                    [propget] HRESULT SelectionHighlightColorWhenNotFocused([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColorWhenNotFocused([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT MaxLength([out] [retval] INT32* value);
                    [propput] HRESULT MaxLength([in] INT32 value);
                    [propget] HRESULT HorizontalTextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT HorizontalTextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT CharacterCasing([out] [retval] Microsoft.UI.Xaml.Controls.CharacterCasing* value);
                    [propput] HRESULT CharacterCasing([in] Microsoft.UI.Xaml.Controls.CharacterCasing value);
                    [propget] HRESULT DisabledFormattingAccelerators([out] [retval] Microsoft.UI.Xaml.Controls.DisabledFormattingAccelerators* value);
                    [propput] HRESULT DisabledFormattingAccelerators([in] Microsoft.UI.Xaml.Controls.DisabledFormattingAccelerators value);
                    [propget] HRESULT TextDocument([out] [retval] Microsoft.UI.Text.RichEditTextDocument** value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [propget] HRESULT ProofingMenuFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [eventadd] HRESULT TextChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuOpening([in] Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT Paste([in] Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Paste([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionStarted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionEnded([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionEnded([in] EventRegistrationToken token);
                    [eventadd] HRESULT CopyingToClipboard([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CopyingToClipboard([in] EventRegistrationToken token);
                    [eventadd] HRESULT CuttingToClipboard([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CuttingToClipboard([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectionChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanging([in] EventRegistrationToken token);
                    HRESULT GetLinguisticAlternativesAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<HSTRING>*>** operation);
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT ClipboardCopyFormat([out] [retval] Microsoft.UI.Xaml.Controls.RichEditClipboardFormat* value);
                    [propput] HRESULT ClipboardCopyFormat([in] Microsoft.UI.Xaml.Controls.RichEditClipboardFormat value);
                    [propget] HRESULT DesiredCandidateWindowAlignment([out] [retval] Microsoft.UI.Xaml.Controls.CandidateWindowAlignment* value);
                    [propput] HRESULT DesiredCandidateWindowAlignment([in] Microsoft.UI.Xaml.Controls.CandidateWindowAlignment value);
                    [eventadd] HRESULT CandidateWindowBoundsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CandidateWindowBoundsChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichEditBox*, Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextChanging([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichEditBox)]
                [uuid(7C993C60-F5B6-589F-BBA8-B68B9713E4AE)]
                interface IRichEditBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.RichEditBox** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs)]
                [uuid(5DBADBE1-0515-5045-9A6F-6859237301AC)]
                interface IRichEditBoxSelectionChangingEventArgs : IInspectable
                {
                    [propget] HRESULT SelectionStart([out] [retval] INT32* value);
                    [propget] HRESULT SelectionLength([out] [retval] INT32* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichEditBox)]
                [uuid(B3F59239-EFD1-5129-BF80-2841A331B24A)]
                interface IRichEditBoxStatics : IInspectable
                {
                    [propget] HRESULT IsReadOnlyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AcceptsReturnProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextWrappingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSpellCheckEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextPredictionEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputScopeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorFontEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorWhenNotFocusedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalTextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterCasingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisabledFormattingAcceleratorsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ProofingMenuFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DesiredCandidateWindowAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ClipboardCopyFormatProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs)]
                [uuid(E887B29A-1551-5868-A5DC-3FCFE7452E6B)]
                interface IRichEditBoxTextChangingEventArgs : IInspectable
                {
                    [propget] HRESULT IsContentChanging([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichTextBlock)]
                [uuid(D766E4DB-A684-50B7-A202-C8E91FA26FF3)]
                interface IRichTextBlock : IInspectable
                {
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                    [propput] HRESULT FontStretch([in] Windows.UI.Text.FontStretch value);
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT TextWrapping([out] [retval] Microsoft.UI.Xaml.TextWrapping* value);
                    [propput] HRESULT TextWrapping([in] Microsoft.UI.Xaml.TextWrapping value);
                    [propget] HRESULT TextTrimming([out] [retval] Microsoft.UI.Xaml.TextTrimming* value);
                    [propput] HRESULT TextTrimming([in] Microsoft.UI.Xaml.TextTrimming value);
                    [propget] HRESULT TextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT TextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT Blocks([out] [retval] Microsoft.UI.Xaml.Documents.BlockCollection** value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT LineHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT LineHeight([in] DOUBLE value);
                    [propget] HRESULT LineStackingStrategy([out] [retval] Microsoft.UI.Xaml.LineStackingStrategy* value);
                    [propput] HRESULT LineStackingStrategy([in] Microsoft.UI.Xaml.LineStackingStrategy value);
                    [propget] HRESULT CharacterSpacing([out] [retval] INT32* value);
                    [propput] HRESULT CharacterSpacing([in] INT32 value);
                    [propget] HRESULT OverflowContentTarget([out] [retval] Microsoft.UI.Xaml.Controls.RichTextBlockOverflow** value);
                    [propput] HRESULT OverflowContentTarget([in] Microsoft.UI.Xaml.Controls.RichTextBlockOverflow* value);
                    [propget] HRESULT IsTextSelectionEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextSelectionEnabled([in] boolean value);
                    [propget] HRESULT HasOverflowContent([out] [retval] boolean* value);
                    [propget] HRESULT SelectedText([out] [retval] HSTRING* value);
                    [propget] HRESULT ContentStart([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT ContentEnd([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT SelectionStart([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT SelectionEnd([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT BaselineOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT MaxLines([out] [retval] INT32* value);
                    [propput] HRESULT MaxLines([in] INT32 value);
                    [propget] HRESULT TextLineBounds([out] [retval] Microsoft.UI.Xaml.TextLineBounds* value);
                    [propput] HRESULT TextLineBounds([in] Microsoft.UI.Xaml.TextLineBounds value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT OpticalMarginAlignment([out] [retval] Microsoft.UI.Xaml.OpticalMarginAlignment* value);
                    [propput] HRESULT OpticalMarginAlignment([in] Microsoft.UI.Xaml.OpticalMarginAlignment value);
                    [propget] HRESULT IsColorFontEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsColorFontEnabled([in] boolean value);
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT TextDecorations([out] [retval] Windows.UI.Text.TextDecorations* value);
                    [propput] HRESULT TextDecorations([in] Windows.UI.Text.TextDecorations value);
                    [propget] HRESULT IsTextTrimmed([out] [retval] boolean* value);
                    [propget] HRESULT HorizontalTextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT HorizontalTextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT TextHighlighters([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter*>** value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuOpening([in] Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT IsTextTrimmedChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichTextBlock*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsTextTrimmedChanged([in] EventRegistrationToken token);
                    HRESULT SelectAll();
                    HRESULT Select([in] Microsoft.UI.Xaml.Documents.TextPointer* start, [in] Microsoft.UI.Xaml.Documents.TextPointer* end);
                    HRESULT GetPositionFromPoint([in] Windows.Foundation.Point point, [out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** result);
                    HRESULT CopySelectionToClipboard();
                    [propget] HRESULT TextIndent([out] [retval] DOUBLE* value);
                    [propput] HRESULT TextIndent([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichTextBlockOverflow)]
                [uuid(015C2522-0646-5C71-9F54-3C38C7235A62)]
                interface IRichTextBlockOverflow : IInspectable
                {
                    [propget] HRESULT OverflowContentTarget([out] [retval] Microsoft.UI.Xaml.Controls.RichTextBlockOverflow** value);
                    [propput] HRESULT OverflowContentTarget([in] Microsoft.UI.Xaml.Controls.RichTextBlockOverflow* value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT ContentSource([out] [retval] Microsoft.UI.Xaml.Controls.RichTextBlock** value);
                    [propget] HRESULT HasOverflowContent([out] [retval] boolean* value);
                    [propget] HRESULT ContentStart([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT ContentEnd([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT BaselineOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT MaxLines([out] [retval] INT32* value);
                    [propput] HRESULT MaxLines([in] INT32 value);
                    [propget] HRESULT IsTextTrimmed([out] [retval] boolean* value);
                    [eventadd] HRESULT IsTextTrimmedChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.RichTextBlockOverflow*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsTextTrimmedChanged([in] EventRegistrationToken token);
                    HRESULT GetPositionFromPoint([in] Windows.Foundation.Point point, [out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichTextBlockOverflow)]
                [uuid(6DB6EE42-A333-5E5B-9CE8-F5E2F46F4D66)]
                interface IRichTextBlockOverflowStatics : IInspectable
                {
                    [propget] HRESULT OverflowContentTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HasOverflowContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLinesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextTrimmedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RichTextBlock)]
                [uuid(65DCA245-B4FC-5718-B628-A4953F61D6A3)]
                interface IRichTextBlockStatics : IInspectable
                {
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextWrappingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextTrimmingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineStackingStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OverflowContentTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextSelectionEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HasOverflowContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLinesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextLineBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OpticalMarginAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorFontEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextDecorationsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextTrimmedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalTextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextIndentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RowDefinition)]
                [uuid(FE870F2F-89EF-5DAC-9F33-968D0DC577C3)]
                interface IRowDefinition : IInspectable
                {
                    [propget] HRESULT Height([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                    [propput] HRESULT Height([in] Microsoft.UI.Xaml.GridLength value);
                    [propget] HRESULT MaxHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MaxHeight([in] DOUBLE value);
                    [propget] HRESULT MinHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinHeight([in] DOUBLE value);
                    [propget] HRESULT ActualHeight([out] [retval] DOUBLE* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.RowDefinition)]
                [uuid(7317C7C5-FD6F-58D9-9B53-4978DBACDE23)]
                interface IRowDefinitionStatics : IInspectable
                {
                    [propget] HRESULT HeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(885DF41F-F240-5B7B-A703-BFAF39C6A2CD)]
                interface IScrollAnchorProvider : IInspectable
                {
                    [propget] HRESULT CurrentAnchor([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    HRESULT RegisterAnchorCandidate([in] Microsoft.UI.Xaml.UIElement* element);
                    HRESULT UnregisterAnchorCandidate([in] Microsoft.UI.Xaml.UIElement* element);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollAnimationStartingEventArgs)]
                [uuid(5E95FD9F-8E08-5DD9-98FF-7648EB0CD697)]
                [version(0x00000001)]
                interface IScrollAnimationStartingEventArgs : IInspectable
                {
                    [propget] HRESULT Animation([out] [retval] Microsoft.UI.Composition.CompositionAnimation** value);
                    [propput] HRESULT Animation([in] Microsoft.UI.Composition.CompositionAnimation* value);
                    [propget] HRESULT StartPosition([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT EndPosition([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT ScrollInfo([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollCompletedEventArgs)]
                [uuid(E332A748-AEB3-5621-A565-D68ACEE035F8)]
                [version(0x00000001)]
                interface IScrollCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT ScrollInfo([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollContentPresenter)]
                [uuid(9A896EB9-3189-5C53-912F-C470896331B8)]
                interface IScrollContentPresenter : IInspectable
                {
                    [propget] HRESULT CanVerticallyScroll([out] [retval] boolean* value);
                    [propput] HRESULT CanVerticallyScroll([in] boolean value);
                    [propget] HRESULT CanHorizontallyScroll([out] [retval] boolean* value);
                    [propput] HRESULT CanHorizontallyScroll([in] boolean value);
                    [propget] HRESULT ExtentWidth([out] [retval] DOUBLE* value);
                    [propget] HRESULT ExtentHeight([out] [retval] DOUBLE* value);
                    [propget] HRESULT ViewportWidth([out] [retval] DOUBLE* value);
                    [propget] HRESULT ViewportHeight([out] [retval] DOUBLE* value);
                    [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ScrollOwner([out] [retval] IInspectable** value);
                    [propput] HRESULT ScrollOwner([in] IInspectable* value);
                    [propget] HRESULT CanContentRenderOutsideBounds([out] [retval] boolean* value);
                    [propput] HRESULT CanContentRenderOutsideBounds([in] boolean value);
                    [propget] HRESULT SizesContentToTemplatedParent([out] [retval] boolean* value);
                    [propput] HRESULT SizesContentToTemplatedParent([in] boolean value);
                    HRESULT LineUp();
                    HRESULT LineDown();
                    HRESULT LineLeft();
                    HRESULT LineRight();
                    HRESULT PageUp();
                    HRESULT PageDown();
                    HRESULT PageLeft();
                    HRESULT PageRight();
                    HRESULT MouseWheelUp();
                    HRESULT MouseWheelDown();
                    HRESULT MouseWheelLeft();
                    HRESULT MouseWheelRight();
                    HRESULT SetHorizontalOffset([in] DOUBLE offset);
                    HRESULT SetVerticalOffset([in] DOUBLE offset);
                    HRESULT MakeVisible([in] Microsoft.UI.Xaml.UIElement* visual, [in] Windows.Foundation.Rect rectangle, [out] [retval] Windows.Foundation.Rect* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollContentPresenter)]
                [uuid(4E93F295-EF2E-517B-BBF9-DEDB854849C8)]
                interface IScrollContentPresenterStatics : IInspectable
                {
                    [propget] HRESULT CanContentRenderOutsideBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SizesContentToTemplatedParentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollOptions)]
                [uuid(1104C14E-FBE7-5584-9B32-8CF59CB3703D)]
                [version(0x00000001)]
                interface IScrollOptions : IInspectable
                {
                    [propget] HRESULT AnimationMode([out] [retval] Microsoft.UI.Xaml.Controls.AnimationMode* value);
                    [propput] HRESULT AnimationMode([in] Microsoft.UI.Xaml.Controls.AnimationMode value);
                    [propget] HRESULT SnapPointsMode([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsMode* value);
                    [propput] HRESULT SnapPointsMode([in] Microsoft.UI.Xaml.Controls.SnapPointsMode value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollOptions)]
                [uuid(C5214D9C-5F15-5597-86B1-2B0CE052EFB5)]
                [version(0x00000001)]
                interface IScrollOptionsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.Xaml.Controls.AnimationMode animationMode, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollOptions** value);
                    HRESULT CreateInstance2([in] Microsoft.UI.Xaml.Controls.AnimationMode animationMode, [in] Microsoft.UI.Xaml.Controls.SnapPointsMode snapPointsMode, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollOptions** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollViewer)]
                [uuid(1DC28C2E-996C-5394-89C3-4DC656B4AD46)]
                interface IScrollViewer : IInspectable
                {
                    [propget] HRESULT HorizontalScrollBarVisibility([out] [retval] Microsoft.UI.Xaml.Controls.ScrollBarVisibility* value);
                    [propput] HRESULT HorizontalScrollBarVisibility([in] Microsoft.UI.Xaml.Controls.ScrollBarVisibility value);
                    [propget] HRESULT VerticalScrollBarVisibility([out] [retval] Microsoft.UI.Xaml.Controls.ScrollBarVisibility* value);
                    [propput] HRESULT VerticalScrollBarVisibility([in] Microsoft.UI.Xaml.Controls.ScrollBarVisibility value);
                    [propget] HRESULT IsHorizontalRailEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsHorizontalRailEnabled([in] boolean value);
                    [propget] HRESULT IsVerticalRailEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsVerticalRailEnabled([in] boolean value);
                    [propget] HRESULT IsHorizontalScrollChainingEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsHorizontalScrollChainingEnabled([in] boolean value);
                    [propget] HRESULT IsVerticalScrollChainingEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsVerticalScrollChainingEnabled([in] boolean value);
                    [propget] HRESULT IsZoomChainingEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomChainingEnabled([in] boolean value);
                    [propget] HRESULT IsScrollInertiaEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsScrollInertiaEnabled([in] boolean value);
                    [propget] HRESULT IsZoomInertiaEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomInertiaEnabled([in] boolean value);
                    [propget] HRESULT HorizontalScrollMode([out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* value);
                    [propput] HRESULT HorizontalScrollMode([in] Microsoft.UI.Xaml.Controls.ScrollMode value);
                    [propget] HRESULT VerticalScrollMode([out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* value);
                    [propput] HRESULT VerticalScrollMode([in] Microsoft.UI.Xaml.Controls.ScrollMode value);
                    [propget] HRESULT ZoomMode([out] [retval] Microsoft.UI.Xaml.Controls.ZoomMode* value);
                    [propput] HRESULT ZoomMode([in] Microsoft.UI.Xaml.Controls.ZoomMode value);
                    [propget] HRESULT HorizontalSnapPointsAlignment([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment* value);
                    [propput] HRESULT HorizontalSnapPointsAlignment([in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment value);
                    [propget] HRESULT VerticalSnapPointsAlignment([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment* value);
                    [propput] HRESULT VerticalSnapPointsAlignment([in] Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment value);
                    [propget] HRESULT HorizontalSnapPointsType([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsType* value);
                    [propput] HRESULT HorizontalSnapPointsType([in] Microsoft.UI.Xaml.Controls.SnapPointsType value);
                    [propget] HRESULT VerticalSnapPointsType([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsType* value);
                    [propput] HRESULT VerticalSnapPointsType([in] Microsoft.UI.Xaml.Controls.SnapPointsType value);
                    [propget] HRESULT ZoomSnapPointsType([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsType* value);
                    [propput] HRESULT ZoomSnapPointsType([in] Microsoft.UI.Xaml.Controls.SnapPointsType value);
                    [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ViewportWidth([out] [retval] DOUBLE* value);
                    [propget] HRESULT ScrollableWidth([out] [retval] DOUBLE* value);
                    [propget] HRESULT ComputedHorizontalScrollBarVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT ExtentWidth([out] [retval] DOUBLE* value);
                    [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ViewportHeight([out] [retval] DOUBLE* value);
                    [propget] HRESULT ScrollableHeight([out] [retval] DOUBLE* value);
                    [propget] HRESULT ComputedVerticalScrollBarVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT ExtentHeight([out] [retval] DOUBLE* value);
                    [propget] HRESULT MinZoomFactor([out] [retval] FLOAT* value);
                    [propput] HRESULT MinZoomFactor([in] FLOAT value);
                    [propget] HRESULT MaxZoomFactor([out] [retval] FLOAT* value);
                    [propput] HRESULT MaxZoomFactor([in] FLOAT value);
                    [propget] HRESULT ZoomFactor([out] [retval] FLOAT* value);
                    [propget] HRESULT ZoomSnapPoints([out] [retval] Windows.Foundation.Collections.IVector<FLOAT>** value);
                    [propget] HRESULT TopLeftHeader([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT TopLeftHeader([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT LeftHeader([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT LeftHeader([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT TopHeader([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT TopHeader([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT ReduceViewportForCoreInputViewOcclusions([out] [retval] boolean* value);
                    [propput] HRESULT ReduceViewportForCoreInputViewOcclusions([in] boolean value);
                    [propget] HRESULT HorizontalAnchorRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalAnchorRatio([in] DOUBLE value);
                    [propget] HRESULT VerticalAnchorRatio([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalAnchorRatio([in] DOUBLE value);
                    [propget] HRESULT CanContentRenderOutsideBounds([out] [retval] boolean* value);
                    [propput] HRESULT CanContentRenderOutsideBounds([in] boolean value);
                    [eventadd] HRESULT AnchorRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ScrollViewer*, Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AnchorRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT ViewChanging([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ViewChanging([in] EventRegistrationToken token);
                    [eventadd] HRESULT ViewChanged([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ViewChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT DirectManipulationStarted([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DirectManipulationStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT DirectManipulationCompleted([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DirectManipulationCompleted([in] EventRegistrationToken token);
                    [deprecated("ScrollToHorizontalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ScrollToHorizontalOffset([in] DOUBLE offset);
                    [deprecated("ScrollToVerticalOffset may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ScrollToVerticalOffset([in] DOUBLE offset);
                    [deprecated("ZoomToFactor may be altered or unavailable for releases after Windows 8.1. Instead, use ChangeView.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)] HRESULT ZoomToFactor([in] FLOAT factor);
                    [overload("ChangeView")] HRESULT ChangeView([in] Windows.Foundation.IReference<DOUBLE>* horizontalOffset, [in] Windows.Foundation.IReference<DOUBLE>* verticalOffset, [in] Windows.Foundation.IReference<FLOAT>* zoomFactor, [out] [retval] boolean* result);
                    [overload("ChangeView")] HRESULT ChangeViewWithOptionalAnimation([in] Windows.Foundation.IReference<DOUBLE>* horizontalOffset, [in] Windows.Foundation.IReference<DOUBLE>* verticalOffset, [in] Windows.Foundation.IReference<FLOAT>* zoomFactor, [in] boolean disableAnimation, [out] [retval] boolean* result);
                    HRESULT InvalidateScrollInfo();
                    [propget] HRESULT IsDeferredScrollingEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDeferredScrollingEnabled([in] boolean value);
                    [propget] HRESULT BringIntoViewOnFocusChange([out] [retval] boolean* value);
                    [propput] HRESULT BringIntoViewOnFocusChange([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(7CC9BCB8-947E-582A-AE91-6A76597477C9)]
                interface IScrollViewerPrivate : IInspectable
                {
                    [propget] HRESULT IsInDirectManipulation([out] [retval] boolean* value);
                    [propget] HRESULT ArePointerWheelEventsIgnored([out] [retval] boolean* value);
                    [propput] HRESULT ArePointerWheelEventsIgnored([in] boolean value);
                    [propget] HRESULT IsRequestBringIntoViewIgnored([out] [retval] boolean* value);
                    [propput] HRESULT IsRequestBringIntoViewIgnored([in] boolean value);
                    [propget] HRESULT IsInActiveDirectManipulation([out] [retval] boolean* value);
                    HRESULT DisableOverpan();
                    HRESULT EnableOverpan();
                    HRESULT SetIsNearVerticalAlignmentForced([in] boolean enabled);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollViewer)]
                [uuid(D971FD86-0A96-50C4-A6E1-9975FAA2A142)]
                interface IScrollViewerStatics : IInspectable
                {
                    [propget] HRESULT HorizontalSnapPointsAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalSnapPointsAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalSnapPointsTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalSnapPointsTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ZoomSnapPointsTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ViewportWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ScrollableWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ComputedHorizontalScrollBarVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ExtentWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ViewportHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ScrollableHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ComputedVerticalScrollBarVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ExtentHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinZoomFactorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxZoomFactorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ZoomFactorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ZoomSnapPointsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopLeftHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LeftHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ReduceViewportForCoreInputViewOcclusionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalAnchorRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalAnchorRatioProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalScrollBarVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetHorizontalScrollBarVisibility([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollBarVisibility* result);
                    HRESULT SetHorizontalScrollBarVisibility([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.ScrollBarVisibility horizontalScrollBarVisibility);
                    [propget] HRESULT VerticalScrollBarVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetVerticalScrollBarVisibility([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollBarVisibility* result);
                    HRESULT SetVerticalScrollBarVisibility([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.ScrollBarVisibility verticalScrollBarVisibility);
                    [propget] HRESULT IsHorizontalRailEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsHorizontalRailEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsHorizontalRailEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isHorizontalRailEnabled);
                    [propget] HRESULT IsVerticalRailEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsVerticalRailEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsVerticalRailEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isVerticalRailEnabled);
                    [propget] HRESULT IsHorizontalScrollChainingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsHorizontalScrollChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsHorizontalScrollChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isHorizontalScrollChainingEnabled);
                    [propget] HRESULT IsVerticalScrollChainingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsVerticalScrollChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsVerticalScrollChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isVerticalScrollChainingEnabled);
                    [propget] HRESULT IsZoomChainingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsZoomChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsZoomChainingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isZoomChainingEnabled);
                    [propget] HRESULT IsScrollInertiaEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsScrollInertiaEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsScrollInertiaEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isScrollInertiaEnabled);
                    [propget] HRESULT IsZoomInertiaEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsZoomInertiaEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsZoomInertiaEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isZoomInertiaEnabled);
                    [propget] HRESULT HorizontalScrollModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetHorizontalScrollMode([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* result);
                    HRESULT SetHorizontalScrollMode([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.ScrollMode horizontalScrollMode);
                    [propget] HRESULT VerticalScrollModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetVerticalScrollMode([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ScrollMode* result);
                    HRESULT SetVerticalScrollMode([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.ScrollMode verticalScrollMode);
                    [propget] HRESULT ZoomModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetZoomMode([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomMode* result);
                    HRESULT SetZoomMode([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.ZoomMode zoomMode);
                    [propget] HRESULT CanContentRenderOutsideBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetCanContentRenderOutsideBounds([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetCanContentRenderOutsideBounds([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean canContentRenderOutsideBounds);
                    [propget] HRESULT IsDeferredScrollingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsDeferredScrollingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetIsDeferredScrollingEnabled([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean isDeferredScrollingEnabled);
                    [propget] HRESULT BringIntoViewOnFocusChangeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetBringIntoViewOnFocusChange([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                    HRESULT SetBringIntoViewOnFocusChange([in] Microsoft.UI.Xaml.DependencyObject* element, [in] boolean bringIntoViewOnFocusChange);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollViewerView)]
                [uuid(1E9F68EE-6CE5-5CBF-BBFE-B8CD284B9C23)]
                interface IScrollViewerView : IInspectable
                {
                    [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ZoomFactor([out] [retval] FLOAT* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs)]
                [uuid(BF7BB85B-1D46-5004-A370-ECB626630588)]
                interface IScrollViewerViewChangedEventArgs : IInspectable
                {
                    [propget] HRESULT IsIntermediate([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs)]
                [uuid(AEE37D7C-4696-55F1-96CA-656832FC0FD2)]
                interface IScrollViewerViewChangingEventArgs : IInspectable
                {
                    [propget] HRESULT NextView([out] [retval] Microsoft.UI.Xaml.Controls.ScrollViewerView** value);
                    [propget] HRESULT FinalView([out] [retval] Microsoft.UI.Xaml.Controls.ScrollViewerView** value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollerAnchorRequestedEventArgs)]
                [uuid(F2A28313-E1DA-5FEF-97D9-EEBE565F7D2C)]
                [version(0x00000001)]
                interface IScrollerAnchorRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT AnchorCandidates([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement*>** value);
                    [propget] HRESULT AnchorElement([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT AnchorElement([in] Microsoft.UI.Xaml.UIElement* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ScrollerBringingIntoViewEventArgs)]
                [uuid(8D03023F-F5DA-5B9B-A786-070BD9593938)]
                [version(0x00000001)]
                interface IScrollerBringingIntoViewEventArgs : IInspectable
                {
                    [propget] HRESULT SnapPointsMode([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsMode* value);
                    [propput] HRESULT SnapPointsMode([in] Microsoft.UI.Xaml.Controls.SnapPointsMode value);
                    [propget] HRESULT RequestEventArgs([out] [retval] Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs** value);
                    [propget] HRESULT TargetHorizontalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT TargetVerticalOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT ScrollInfo([out] [retval] Microsoft.UI.Xaml.Controls.ScrollInfo* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs)]
                [uuid(5E727DA0-B909-536C-8656-28017B48F5A5)]
                interface ISectionsInViewChangedEventArgs : IInspectable
                {
                    [propget] HRESULT AddedSections([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>** value);
                    [propget] HRESULT RemovedSections([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs)]
                [uuid(DF5AB91F-E316-53CF-9636-A85BDC24E85E)]
                interface ISectionsInViewChangedEventArgsFactory : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectTemplateEventArgs)]
                [uuid(B4B24AD2-93C7-5382-9CBC-5BDFB8699273)]
                [version(0x00000001)]
                interface ISelectTemplateEventArgs : IInspectable
                {
                    [propget] HRESULT TemplateKey([out] [retval] HSTRING* value);
                    [propput] HRESULT TemplateKey([in] HSTRING value);
                    [propget] HRESULT DataContext([out] [retval] IInspectable** value);
                    [propget] HRESULT Owner([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)]
                [uuid(B6C18076-4B76-5416-AD29-E2DC20C46246)]
                interface ISelectionChangedEventArgs : IInspectable
                {
                    [propget] HRESULT AddedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT RemovedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs)]
                [uuid(0FCD041D-465F-5745-9882-0C8348E4135D)]
                interface ISelectionChangedEventArgsFactory : IInspectable
                {
                    HRESULT CreateInstanceWithRemovedItemsAndAddedItems([in] Windows.Foundation.Collections.IVector<IInspectable*>* removedItems, [in] Windows.Foundation.Collections.IVector<IInspectable*>* addedItems, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionModel)]
                [uuid(8DEAAA5B-2921-5BFD-A88F-5D6F45A39325)]
                [version(0x00000001)]
                interface ISelectionModel : IInspectable
                {
                    [eventadd] HRESULT SelectionChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SelectionModel*, Microsoft.UI.Xaml.Controls.SelectionModelSelectionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ChildrenRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SelectionModel*, Microsoft.UI.Xaml.Controls.SelectionModelChildrenRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ChildrenRequested([in] EventRegistrationToken token);
                    [propget] HRESULT Source([out] [retval] IInspectable** value);
                    [propput] HRESULT Source([in] IInspectable* value);
                    [propget] HRESULT SingleSelect([out] [retval] boolean* value);
                    [propput] HRESULT SingleSelect([in] boolean value);
                    [propget] HRESULT AnchorIndex([out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** value);
                    [propput] HRESULT AnchorIndex([in] Microsoft.UI.Xaml.Controls.IndexPath* value);
                    [propget] HRESULT SelectedIndex([out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** value);
                    [propput] HRESULT SelectedIndex([in] Microsoft.UI.Xaml.Controls.IndexPath* value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propget] HRESULT SelectedItems([out] [retval] Windows.Foundation.Collections.IVectorView<IInspectable*>** value);
                    [propget] HRESULT SelectedIndices([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.IndexPath*>** value);
                    [overload("SetAnchorIndex")] HRESULT SetAnchorIndex([in] INT32 index);
                    [overload("SetAnchorIndex")] HRESULT SetAnchorIndexWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex);
                    [default_overload] [overload("Select")] HRESULT Select([in] INT32 index);
                    [overload("Select")] HRESULT SelectWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex);
                    HRESULT SelectAt([in] Microsoft.UI.Xaml.Controls.IndexPath* index);
                    [default_overload] [overload("Deselect")] HRESULT Deselect([in] INT32 index);
                    [overload("Deselect")] HRESULT DeselectWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex);
                    HRESULT DeselectAt([in] Microsoft.UI.Xaml.Controls.IndexPath* index);
                    [default_overload] [overload("IsSelected")] HRESULT IsSelected([in] INT32 index, [out] [retval] Windows.Foundation.IReference<boolean>** result);
                    [overload("IsSelected")] HRESULT IsSelectedWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex, [out] [retval] Windows.Foundation.IReference<boolean>** result);
                    HRESULT IsSelectedAt([in] Microsoft.UI.Xaml.Controls.IndexPath* index, [out] [retval] Windows.Foundation.IReference<boolean>** result);
                    [default_overload] [overload("SelectRangeFromAnchor")] HRESULT SelectRangeFromAnchor([in] INT32 index);
                    [overload("SelectRangeFromAnchor")] HRESULT SelectRangeFromAnchorWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex);
                    HRESULT SelectRangeFromAnchorTo([in] Microsoft.UI.Xaml.Controls.IndexPath* index);
                    [default_overload] [overload("DeselectRangeFromAnchor")] HRESULT DeselectRangeFromAnchor([in] INT32 index);
                    [overload("DeselectRangeFromAnchor")] HRESULT DeselectRangeFromAnchorWithGroup([in] INT32 groupIndex, [in] INT32 itemIndex);
                    HRESULT DeselectRangeFromAnchorTo([in] Microsoft.UI.Xaml.Controls.IndexPath* index);
                    HRESULT SelectRange([in] Microsoft.UI.Xaml.Controls.IndexPath* start, [in] Microsoft.UI.Xaml.Controls.IndexPath* end);
                    HRESULT DeselectRange([in] Microsoft.UI.Xaml.Controls.IndexPath* start, [in] Microsoft.UI.Xaml.Controls.IndexPath* end);
                    HRESULT SelectAll();
                    HRESULT ClearSelection();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionModelChildrenRequestedEventArgs)]
                [uuid(52ACCC62-C9A8-5DDC-80E4-BC560D92A07A)]
                [version(0x00000001)]
                interface ISelectionModelChildrenRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Source([out] [retval] IInspectable** value);
                    [propget] HRESULT SourceIndex([out] [retval] Microsoft.UI.Xaml.Controls.IndexPath** value);
                    [propget] HRESULT Children([out] [retval] IInspectable** value);
                    [propput] HRESULT Children([in] IInspectable* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionModel)]
                [uuid(37FDDB2F-C709-552B-8423-9671EC9460E9)]
                [version(0x00000001)]
                interface ISelectionModelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SelectionModel** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionModel)]
                [uuid(976ABDE8-541C-54A8-8ED4-89E3B47D32FA)]
                [version(0x00000001)]
                interface ISelectionModelProtected : IInspectable
                {
                    HRESULT OnPropertyChanged([in] HSTRING propertyName);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SelectionModelSelectionChangedEventArgs)]
                [uuid(DEA1EF6A-E76F-5853-BA43-342693DB7EE4)]
                [version(0x00000001)]
                interface ISelectionModelSelectionChangedEventArgs : IInspectable
                {
                }

                [uuid(179672CF-9A07-565E-8E92-B4B086416881)]
                [version(0x00000001)]
                interface ISelfPlayingAnimatedVisual : IInspectable
                    requires
                        Microsoft.UI.Xaml.Controls.IAnimatedVisual,
                        Windows.Foundation.IClosable
                {
                    HRESULT Pause();
                    HRESULT PlayAsync([in] DOUBLE fromProgress, [in] DOUBLE toProgress, [in] boolean looped, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                    HRESULT Resume();
                    HRESULT Stop();
                    HRESULT SetPlaybackRate([in] DOUBLE playbackRate);
                    HRESULT SetProgress([in] DOUBLE progress);
                    HRESULT SetProgressObject([in] Microsoft.UI.Composition.CompositionPropertySet* compositionPropertySet);
                    HRESULT SetSize([in] Windows.Foundation.Size size);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SemanticZoom)]
                [uuid(7E14616D-55EF-548C-A997-C923E302718F)]
                interface ISemanticZoom : IInspectable
                {
                    [propget] HRESULT ZoomedInView([out] [retval] Microsoft.UI.Xaml.Controls.ISemanticZoomInformation** value);
                    [propput] HRESULT ZoomedInView([in] Microsoft.UI.Xaml.Controls.ISemanticZoomInformation* value);
                    [propget] HRESULT ZoomedOutView([out] [retval] Microsoft.UI.Xaml.Controls.ISemanticZoomInformation** value);
                    [propput] HRESULT ZoomedOutView([in] Microsoft.UI.Xaml.Controls.ISemanticZoomInformation* value);
                    [propget] HRESULT IsZoomedInViewActive([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomedInViewActive([in] boolean value);
                    [propget] HRESULT CanChangeViews([out] [retval] boolean* value);
                    [propput] HRESULT CanChangeViews([in] boolean value);
                    [eventadd] HRESULT ViewChangeStarted([in] Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ViewChangeStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT ViewChangeCompleted([in] Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ViewChangeCompleted([in] EventRegistrationToken token);
                    HRESULT ToggleActiveView();
                    [propget] HRESULT IsZoomOutButtonEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomOutButtonEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(12D62B04-BB13-50F2-9D8B-E57C02B4BDE4)]
                interface ISemanticZoomInformation : IInspectable
                {
                    [propget] HRESULT SemanticZoomOwner([out] [retval] Microsoft.UI.Xaml.Controls.SemanticZoom** value);
                    [propput] HRESULT SemanticZoomOwner([in] Microsoft.UI.Xaml.Controls.SemanticZoom* value);
                    [propget] HRESULT IsActiveView([out] [retval] boolean* value);
                    [propput] HRESULT IsActiveView([in] boolean value);
                    [propget] HRESULT IsZoomedInView([out] [retval] boolean* value);
                    [propput] HRESULT IsZoomedInView([in] boolean value);
                    HRESULT InitializeViewChange();
                    HRESULT CompleteViewChange();
                    HRESULT MakeVisible([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* item);
                    HRESULT StartViewChangeFrom([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* source, [in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* destination);
                    HRESULT StartViewChangeTo([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* source, [in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* destination);
                    HRESULT CompleteViewChangeFrom([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* source, [in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* destination);
                    HRESULT CompleteViewChangeTo([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* source, [in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* destination);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SemanticZoomLocation)]
                [uuid(41C1DEC7-F34F-51DB-9525-5C149B05A527)]
                interface ISemanticZoomLocation : IInspectable
                {
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propput] HRESULT Item([in] IInspectable* value);
                    [propget] HRESULT Bounds([out] [retval] Windows.Foundation.Rect* value);
                    [propput] HRESULT Bounds([in] Windows.Foundation.Rect value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SemanticZoom)]
                [uuid(E4FBD358-9342-56D3-B5C2-BF80DE6F47ED)]
                interface ISemanticZoomStatics : IInspectable
                {
                    [propget] HRESULT ZoomedInViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ZoomedOutViewProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomedInViewActiveProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanChangeViewsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsZoomOutButtonEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs)]
                [uuid(CF62D53D-97D3-5CEF-96F3-1C413F524ECA)]
                interface ISemanticZoomViewChangedEventArgs : IInspectable
                {
                    [propget] HRESULT IsSourceZoomedInView([out] [retval] boolean* value);
                    [propput] HRESULT IsSourceZoomedInView([in] boolean value);
                    [propget] HRESULT SourceItem([out] [retval] Microsoft.UI.Xaml.Controls.SemanticZoomLocation** value);
                    [propput] HRESULT SourceItem([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* value);
                    [propget] HRESULT DestinationItem([out] [retval] Microsoft.UI.Xaml.Controls.SemanticZoomLocation** value);
                    [propput] HRESULT DestinationItem([in] Microsoft.UI.Xaml.Controls.SemanticZoomLocation* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Slider)]
                [uuid(F7418ECF-7C35-5216-8BF1-D82D47CCE5DF)]
                interface ISlider : IInspectable
                {
                    [propget] HRESULT IntermediateValue([out] [retval] DOUBLE* value);
                    [propput] HRESULT IntermediateValue([in] DOUBLE value);
                    [propget] HRESULT StepFrequency([out] [retval] DOUBLE* value);
                    [propput] HRESULT StepFrequency([in] DOUBLE value);
                    [propget] HRESULT SnapsTo([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo* value);
                    [propput] HRESULT SnapsTo([in] Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo value);
                    [propget] HRESULT TickFrequency([out] [retval] DOUBLE* value);
                    [propput] HRESULT TickFrequency([in] DOUBLE value);
                    [propget] HRESULT TickPlacement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.TickPlacement* value);
                    [propput] HRESULT TickPlacement([in] Microsoft.UI.Xaml.Controls.Primitives.TickPlacement value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT IsDirectionReversed([out] [retval] boolean* value);
                    [propput] HRESULT IsDirectionReversed([in] boolean value);
                    [propget] HRESULT IsThumbToolTipEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsThumbToolTipEnabled([in] boolean value);
                    [propget] HRESULT ThumbToolTipValueConverter([out] [retval] Microsoft.UI.Xaml.Data.IValueConverter** value);
                    [propput] HRESULT ThumbToolTipValueConverter([in] Microsoft.UI.Xaml.Data.IValueConverter* value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Slider)]
                [uuid(06604D71-34CA-5F39-9656-29D81D3C110C)]
                interface ISliderFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.Slider** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Slider)]
                [uuid(F0541F7B-6D81-59E2-997A-2E65FBCCCD21)]
                interface ISliderStatics : IInspectable
                {
                    [propget] HRESULT IntermediateValueProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StepFrequencyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SnapsToProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TickFrequencyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TickPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsDirectionReversedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsThumbToolTipEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ThumbToolTipValueConverterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitButton)]
                [uuid(F627202D-D2D7-5FF6-BB05-8C48EB6B1FC6)]
                [version(0x00000001)]
                interface ISplitButton : IInspectable
                {
                    [propget] HRESULT Flyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT Flyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [propget] HRESULT Command([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT Command([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT CommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT CommandParameter([in] IInspectable* value);
                    [eventadd] HRESULT Click([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitButton*, Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Click([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs)]
                [uuid(6AF896C2-E65A-5998-9C82-2AF8F3E0741F)]
                [version(0x00000001)]
                interface ISplitButtonClickEventArgs : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitButton)]
                [uuid(07510092-2612-55E7-981C-A536DDD4570E)]
                [version(0x00000001)]
                interface ISplitButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SplitButton** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitButton)]
                [uuid(D54DDD05-73E7-55A1-A119-AA342E5F9FEB)]
                [version(0x00000001)]
                interface ISplitButtonStatics : IInspectable
                {
                    [propget] HRESULT FlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitView)]
                [uuid(10AE18F7-1666-5897-BBCE-1E687E7784A8)]
                interface ISplitView : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pane([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Pane([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT IsPaneOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsPaneOpen([in] boolean value);
                    [propget] HRESULT OpenPaneLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT OpenPaneLength([in] DOUBLE value);
                    [propget] HRESULT CompactPaneLength([out] [retval] DOUBLE* value);
                    [propput] HRESULT CompactPaneLength([in] DOUBLE value);
                    [propget] HRESULT PanePlacement([out] [retval] Microsoft.UI.Xaml.Controls.SplitViewPanePlacement* value);
                    [propput] HRESULT PanePlacement([in] Microsoft.UI.Xaml.Controls.SplitViewPanePlacement value);
                    [propget] HRESULT DisplayMode([out] [retval] Microsoft.UI.Xaml.Controls.SplitViewDisplayMode* value);
                    [propput] HRESULT DisplayMode([in] Microsoft.UI.Xaml.Controls.SplitViewDisplayMode value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings** value);
                    [propget] HRESULT PaneBackground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT PaneBackground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [eventadd] HRESULT PaneClosing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, Microsoft.UI.Xaml.Controls.SplitViewPaneClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneClosing([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneClosed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneClosed([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneOpening([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT PaneOpened([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SplitView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT PaneOpened([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitView)]
                [uuid(389ECE72-75CE-561B-AAD3-C52125CA6A50)]
                interface ISplitViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SplitView** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitViewPaneClosingEventArgs)]
                [uuid(9138965B-8499-5F9C-93E0-34BEDA441E6D)]
                interface ISplitViewPaneClosingEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SplitView)]
                [uuid(1C69A263-552C-5505-AC81-49E247FEE9DB)]
                interface ISplitViewStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsPaneOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OpenPaneLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CompactPaneLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PanePlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisplayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaneBackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.StackLayout)]
                [uuid(7BFA0D8F-95A9-54FC-8AE0-D7BA909AA52D)]
                [version(0x00000001)]
                interface IStackLayout : IInspectable
                {
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT Spacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT Spacing([in] DOUBLE value);
                    [propget] HRESULT DisableVirtualization([out] [retval] boolean* value);
                    [propput] HRESULT DisableVirtualization([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.StackLayout)]
                [uuid(EA606F86-21A1-5C35-911E-4A1DE8BC69D9)]
                [version(0x00000001)]
                interface IStackLayoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.StackLayout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.StackLayoutState)]
                [uuid(2476B96E-1DB7-5440-89C0-6FD19A9BCE92)]
                [version(0x00000001)]
                interface IStackLayoutState : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.StackLayoutState)]
                [uuid(808A5A28-F6E2-598C-9F49-5B93129F852C)]
                [version(0x00000001)]
                interface IStackLayoutStateFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.StackLayoutState** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.StackLayout)]
                [uuid(AF81A16F-80E0-5B05-9799-6904342D2716)]
                [version(0x00000001)]
                interface IStackLayoutStatics : IInspectable
                {
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DisableVirtualizationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StackPanel)]
                [uuid(493AB00B-3A6A-5E4A-9452-407CD5197406)]
                interface IStackPanel : IInspectable
                {
                    [propget] HRESULT AreScrollSnapPointsRegular([out] [retval] boolean* value);
                    [propput] HRESULT AreScrollSnapPointsRegular([in] boolean value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT BackgroundSizing([out] [retval] Microsoft.UI.Xaml.Controls.BackgroundSizing* value);
                    [propput] HRESULT BackgroundSizing([in] Microsoft.UI.Xaml.Controls.BackgroundSizing value);
                    [propget] HRESULT BorderBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT BorderBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT BorderThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT BorderThickness([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT CornerRadius([out] [retval] Microsoft.UI.Xaml.CornerRadius* value);
                    [propput] HRESULT CornerRadius([in] Microsoft.UI.Xaml.CornerRadius value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT Spacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT Spacing([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StackPanel)]
                [uuid(64C1D388-47A2-5A74-A75B-559D151EE5AC)]
                interface IStackPanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.StackPanel** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StackPanel)]
                [uuid(10BB04E3-EB01-5EA8-9F96-69508479DEF9)]
                interface IStackPanelStatics : IInspectable
                {
                    [propget] HRESULT AreScrollSnapPointsRegularProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundSizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BorderThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CornerRadiusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StyleSelector)]
                [uuid(7F9CF759-785B-5EF9-9EA7-1555673A475A)]
                interface IStyleSelector : IInspectable
                {
                    HRESULT SelectStyle([in] IInspectable* item, [in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.Style** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StyleSelector)]
                [uuid(2A033206-A4FB-5F11-8C2D-61E1DF78FBC3)]
                interface IStyleSelectorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.StyleSelector** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.StyleSelector)]
                [uuid(26015D75-EF00-5C78-8E58-163DA10F694F)]
                interface IStyleSelectorOverrides : IInspectable
                {
                    HRESULT SelectStyleCore([in] IInspectable* item, [in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.Style** result);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(BF7FAF84-F96F-5E29-B47B-7C1EBC635754)]
                interface ISubMenuOwner : IInspectable
                {
                    [propget] HRESULT IsSubMenuOpen([out] [retval] boolean* value);
                    [propget] HRESULT IsSubMenuPositionedAbsolutely([out] [retval] boolean* value);
                    [propget] HRESULT ParentOwner([out] [retval] Microsoft.UI.Xaml.Controls.ISubMenuOwner** value);
                    [propput] HRESULT ParentOwner([in] Microsoft.UI.Xaml.Controls.ISubMenuOwner* value);
                    HRESULT PrepareSubMenu();
                    HRESULT OpenSubMenu([in] Windows.Foundation.Point position);
                    HRESULT PositionSubMenu([in] Windows.Foundation.Point position);
                    HRESULT ClosePeerSubMenus();
                    HRESULT CloseSubMenu();
                    HRESULT CloseSubMenuTree();
                    HRESULT DelayCloseSubMenu();
                    HRESULT CancelCloseSubMenu();
                    HRESULT RaiseAutomationPeerExpandCollapse([in] boolean isOpen);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SwapChainBackgroundPanel)]
                [uuid(095A213F-FFEA-55FF-B875-E698254BA6DF)]
                interface ISwapChainBackgroundPanel : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SwapChainBackgroundPanel)]
                [uuid(83ABAA33-6D13-5B13-8E92-EA95579B6FF3)]
                interface ISwapChainBackgroundPanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SwapChainBackgroundPanel** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SwapChainPanel)]
                [uuid(A8178157-5116-5491-AF96-070C0BCF0C48)]
                interface ISwapChainPanel : IInspectable
                {
                    [propget] HRESULT CompositionScaleX([out] [retval] FLOAT* value);
                    [propget] HRESULT CompositionScaleY([out] [retval] FLOAT* value);
                    [eventadd] HRESULT CompositionScaleChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwapChainPanel*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CompositionScaleChanged([in] EventRegistrationToken token);
                    HRESULT CreateCoreIndependentInputSource([in] Windows.UI.Core.CoreInputDeviceTypes deviceTypes, [out] [retval] Microsoft.UI.Input.Experimental.ExpIndependentPointerInputObserver** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SwapChainPanel)]
                [uuid(38D00B69-5759-5F37-9E1C-3AE0D4288B26)]
                interface ISwapChainPanelFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SwapChainPanel** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SwapChainPanel)]
                [uuid(D83B0621-AACA-534B-AFDE-5370167176B5)]
                interface ISwapChainPanelStatics : IInspectable
                {
                    [propget] HRESULT CompositionScaleXProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CompositionScaleYProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeControl)]
                [uuid(337800FE-F51D-5F6B-9D35-E7F5DE10A97C)]
                [version(0x00000001)]
                interface ISwipeControl : IInspectable
                {
                    [propget] HRESULT LeftItems([out] [retval] Microsoft.UI.Xaml.Controls.SwipeItems** value);
                    [propput] HRESULT LeftItems([in] Microsoft.UI.Xaml.Controls.SwipeItems* value);
                    [propget] HRESULT RightItems([out] [retval] Microsoft.UI.Xaml.Controls.SwipeItems** value);
                    [propput] HRESULT RightItems([in] Microsoft.UI.Xaml.Controls.SwipeItems* value);
                    [propget] HRESULT TopItems([out] [retval] Microsoft.UI.Xaml.Controls.SwipeItems** value);
                    [propput] HRESULT TopItems([in] Microsoft.UI.Xaml.Controls.SwipeItems* value);
                    [propget] HRESULT BottomItems([out] [retval] Microsoft.UI.Xaml.Controls.SwipeItems** value);
                    [propput] HRESULT BottomItems([in] Microsoft.UI.Xaml.Controls.SwipeItems* value);
                    HRESULT Close();
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeControl)]
                [uuid(6E9213F4-30C1-56CA-9905-46AA1A83DFC1)]
                [version(0x00000001)]
                interface ISwipeControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SwipeControl** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeControl)]
                [uuid(FB216C88-C1B1-56AC-A5DD-67064D1E47BC)]
                [version(0x00000001)]
                interface ISwipeControlStatics : IInspectable
                {
                    [propget] HRESULT LeftItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RightItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BottomItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItem)]
                [uuid(5E8D4950-B826-510A-B309-77AFCDC65B1F)]
                [version(0x00000001)]
                interface ISwipeItem : IInspectable
                {
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT IconSource([out] [retval] Microsoft.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Microsoft.UI.Xaml.Controls.IconSource* value);
                    [propget] HRESULT Background([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Background([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT Command([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT Command([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT CommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT CommandParameter([in] IInspectable* value);
                    [propget] HRESULT BehaviorOnInvoked([out] [retval] Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked* value);
                    [propput] HRESULT BehaviorOnInvoked([in] Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked value);
                    [eventadd] HRESULT Invoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwipeItem*, Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Invoked([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItem)]
                [uuid(011513E1-1ADC-5A69-A74F-623FCC18A51C)]
                [version(0x00000001)]
                interface ISwipeItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SwipeItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs)]
                [uuid(7BF51C95-53A2-5A0D-BB32-2B4B1F7D2F20)]
                [version(0x00000001)]
                interface ISwipeItemInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT SwipeControl([out] [retval] Microsoft.UI.Xaml.Controls.SwipeControl** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItem)]
                [uuid(7898CF24-7A54-586A-82D5-BBD54E596510)]
                [version(0x00000001)]
                interface ISwipeItemStatics : IInspectable
                {
                    [propget] HRESULT IconSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BackgroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT BehaviorOnInvokedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItems)]
                [uuid(40D3022B-C82B-5565-A4E4-AD9D7A66B1A9)]
                [version(0x00000001)]
                interface ISwipeItems : IInspectable
                {
                    [propget] HRESULT Mode([out] [retval] Microsoft.UI.Xaml.Controls.SwipeMode* value);
                    [propput] HRESULT Mode([in] Microsoft.UI.Xaml.Controls.SwipeMode value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItems)]
                [uuid(9A5D7D77-39BD-5B81-AB4E-F44ACA6EDE3F)]
                [version(0x00000001)]
                interface ISwipeItemsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SwipeItems** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.SwipeItems)]
                [uuid(DB32C3B0-A93F-5797-A18D-D946B0615906)]
                [version(0x00000001)]
                interface ISwipeItemsStatics : IInspectable
                {
                    [propget] HRESULT ModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIcon)]
                [uuid(A4322906-0DBE-5EB7-8B64-3E832246EB7F)]
                interface ISymbolIcon : IInspectable
                {
                    [propget] HRESULT Symbol([out] [retval] Microsoft.UI.Xaml.Controls.Symbol* value);
                    [propput] HRESULT Symbol([in] Microsoft.UI.Xaml.Controls.Symbol value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIcon)]
                [uuid(D4430447-567C-5AAD-996A-A547774E2C3C)]
                interface ISymbolIconFactory : IInspectable
                {
                    HRESULT CreateInstanceWithSymbol([in] Microsoft.UI.Xaml.Controls.Symbol symbol, [out] [retval] Microsoft.UI.Xaml.Controls.SymbolIcon** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIconSource)]
                [uuid(45120D6B-E868-59F2-A30A-B1915CE374BD)]
                interface ISymbolIconSource : IInspectable
                {
                    [propget] HRESULT Symbol([out] [retval] Microsoft.UI.Xaml.Controls.Symbol* value);
                    [propput] HRESULT Symbol([in] Microsoft.UI.Xaml.Controls.Symbol value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIconSource)]
                [uuid(AFBF55FA-FF79-552A-A3A1-48E2EF17152A)]
                interface ISymbolIconSourceFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.SymbolIconSource** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIconSource)]
                [uuid(FDB6B1C7-33D9-56D0-98E5-8776AA1BB79A)]
                interface ISymbolIconSourceStatics : IInspectable
                {
                    [propget] HRESULT SymbolProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.SymbolIcon)]
                [uuid(CCAA0C34-31F2-50F1-B328-BE6EDC291AAA)]
                interface ISymbolIconStatics : IInspectable
                {
                    [propget] HRESULT SymbolProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabView)]
                [uuid(07B509E1-1D38-551B-95F4-4732B049F6A6)]
                [version(0x00000001)]
                interface ITabView : IInspectable
                {
                    [propget] HRESULT TabWidthMode([out] [retval] Microsoft.UI.Xaml.Controls.TabViewWidthMode* value);
                    [propput] HRESULT TabWidthMode([in] Microsoft.UI.Xaml.Controls.TabViewWidthMode value);
                    [propget] HRESULT CloseButtonOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode* value);
                    [propput] HRESULT CloseButtonOverlayMode([in] Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode value);
                    [propget] HRESULT TabStripHeader([out] [retval] IInspectable** value);
                    [propput] HRESULT TabStripHeader([in] IInspectable* value);
                    [propget] HRESULT TabStripHeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT TabStripHeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT TabStripFooter([out] [retval] IInspectable** value);
                    [propput] HRESULT TabStripFooter([in] IInspectable* value);
                    [propget] HRESULT TabStripFooterTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT TabStripFooterTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT IsAddTabButtonVisible([out] [retval] boolean* value);
                    [propput] HRESULT IsAddTabButtonVisible([in] boolean value);
                    [propget] HRESULT AddTabButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT AddTabButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT AddTabButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT AddTabButtonCommandParameter([in] IInspectable* value);
                    [eventadd] HRESULT TabCloseRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabCloseRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabDroppedOutside([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabDroppedOutside([in] EventRegistrationToken token);
                    [eventadd] HRESULT AddTabButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT AddTabButtonClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabItemsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Windows.Foundation.Collections.IVectorChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabItemsChanged([in] EventRegistrationToken token);
                    [propget] HRESULT TabItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT TabItemsSource([in] IInspectable* value);
                    [propget] HRESULT TabItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT TabItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT TabItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT TabItemTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT TabItemTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT CanDragTabs([out] [retval] boolean* value);
                    [propput] HRESULT CanDragTabs([in] boolean value);
                    [propget] HRESULT CanReorderTabs([out] [retval] boolean* value);
                    [propput] HRESULT CanReorderTabs([in] boolean value);
                    [propget] HRESULT AllowDropTabs([out] [retval] boolean* value);
                    [propput] HRESULT AllowDropTabs([in] boolean value);
                    [propget] HRESULT SelectedIndex([out] [retval] INT32* value);
                    [propput] HRESULT SelectedIndex([in] INT32 value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    HRESULT ContainerFromItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT ContainerFromIndex([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabDragStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabDragStarting([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabDragCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabView*, Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabDragCompleted([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabStripDragOver([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabStripDragOver([in] EventRegistrationToken token);
                    [eventadd] HRESULT TabStripDrop([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TabStripDrop([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabView)]
                [uuid(E7E83685-EEDF-5106-9429-884435AB166B)]
                [version(0x00000001)]
                interface ITabViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TabView** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItem)]
                [uuid(64980AFA-97AF-5190-90B3-4BA277B1113D)]
                [version(0x00000001)]
                interface ITabViewItem : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT IconSource([out] [retval] Microsoft.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Microsoft.UI.Xaml.Controls.IconSource* value);
                    [propget] HRESULT IsClosable([out] [retval] boolean* value);
                    [propput] HRESULT IsClosable([in] boolean value);
                    [propget] HRESULT TabViewTemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings** value);
                    [eventadd] HRESULT CloseRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TabViewItem*, Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CloseRequested([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItem)]
                [uuid(B64C2423-7E56-5D41-8A84-1EE28F9826A4)]
                [version(0x00000001)]
                interface ITabViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TabViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItem)]
                [uuid(4CFC7EAB-2EFF-5457-8251-C19D374AB34D)]
                [version(0x00000001)]
                interface ITabViewItemStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsClosableProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabViewTemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings)]
                [uuid(CC5C99EC-C9D1-55F5-BC81-7612FF4E2B77)]
                [version(0x00000001)]
                interface ITabViewItemTemplateSettings : IInspectable
                {
                    [propget] HRESULT IconElement([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT IconElement([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings)]
                [uuid(CBA3E467-4C98-5885-BA24-6FA699CC8EDD)]
                [version(0x00000001)]
                interface ITabViewItemTemplateSettingsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings)]
                [uuid(EB62DD88-FC12-5338-8E88-788BE72D07D6)]
                [version(0x00000001)]
                interface ITabViewItemTemplateSettingsStatics : IInspectable
                {
                    [propget] HRESULT IconElementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabView)]
                [uuid(F4326C08-1B94-53D7-934F-E6AE0D3D18AB)]
                [version(0x00000001)]
                interface ITabViewStatics : IInspectable
                {
                    [propget] HRESULT TabWidthModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabStripHeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabStripHeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabStripFooterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabStripFooterTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsAddTabButtonVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AddTabButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AddTabButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TabItemTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanDragTabsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanReorderTabsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AllowDropTabsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedItemProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs)]
                [uuid(D56AB9B2-E264-5C7E-A1CB-E41A16A6C6C6)]
                [version(0x00000001)]
                interface ITabViewTabCloseRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT Tab([out] [retval] Microsoft.UI.Xaml.Controls.TabViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs)]
                [uuid(791FC623-C8F6-5102-81BD-1869CDE82284)]
                [version(0x00000001)]
                interface ITabViewTabDragCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT DropResult([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT Tab([out] [retval] Microsoft.UI.Xaml.Controls.TabViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs)]
                [uuid(97682812-1A7B-53FD-8B4E-C2F70D2AD250)]
                [version(0x00000001)]
                interface ITabViewTabDragStartingEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT Tab([out] [retval] Microsoft.UI.Xaml.Controls.TabViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs)]
                [uuid(1F1F4D5D-0FB1-51AB-B66F-F7A322BF2D13)]
                [version(0x00000001)]
                interface ITabViewTabDroppedOutsideEventArgs : IInspectable
                {
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                    [propget] HRESULT Tab([out] [retval] Microsoft.UI.Xaml.Controls.TabViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTip)]
                [uuid(DAEBD5F7-3B47-5B12-B804-F4E1442B2113)]
                [version(0x00000001)]
                interface ITeachingTip : IInspectable
                {
                    [propget] HRESULT Title([out] [retval] HSTRING* value);
                    [propput] HRESULT Title([in] HSTRING value);
                    [propget] HRESULT Subtitle([out] [retval] HSTRING* value);
                    [propput] HRESULT Subtitle([in] HSTRING value);
                    [propget] HRESULT IsOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsOpen([in] boolean value);
                    [propget] HRESULT Target([out] [retval] Microsoft.UI.Xaml.FrameworkElement** value);
                    [propput] HRESULT Target([in] Microsoft.UI.Xaml.FrameworkElement* value);
                    [propget] HRESULT TailVisibility([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility* value);
                    [propput] HRESULT TailVisibility([in] Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility value);
                    [propget] HRESULT ActionButtonContent([out] [retval] IInspectable** value);
                    [propput] HRESULT ActionButtonContent([in] IInspectable* value);
                    [propget] HRESULT ActionButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT ActionButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT ActionButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT ActionButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT ActionButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT ActionButtonCommandParameter([in] IInspectable* value);
                    [propget] HRESULT CloseButtonContent([out] [retval] IInspectable** value);
                    [propput] HRESULT CloseButtonContent([in] IInspectable* value);
                    [propget] HRESULT CloseButtonStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT CloseButtonStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT CloseButtonCommand([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT CloseButtonCommand([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [propget] HRESULT CloseButtonCommandParameter([out] [retval] IInspectable** value);
                    [propput] HRESULT CloseButtonCommandParameter([in] IInspectable* value);
                    [propget] HRESULT PlacementMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT PlacementMargin([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT ShouldConstrainToRootBounds([out] [retval] boolean* value);
                    [propput] HRESULT ShouldConstrainToRootBounds([in] boolean value);
                    [propget] HRESULT IsLightDismissEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsLightDismissEnabled([in] boolean value);
                    [propget] HRESULT PreferredPlacement([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode* value);
                    [propput] HRESULT PreferredPlacement([in] Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode value);
                    [propget] HRESULT HeroContentPlacement([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode* value);
                    [propput] HRESULT HeroContentPlacement([in] Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode value);
                    [propget] HRESULT HeroContent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT HeroContent([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT IconSource([out] [retval] Microsoft.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Microsoft.UI.Xaml.Controls.IconSource* value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings** value);
                    [eventadd] HRESULT ActionButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ActionButtonClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT CloseButtonClick([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CloseButtonClick([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closing([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, Microsoft.UI.Xaml.Controls.TeachingTipClosingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closing([in] EventRegistrationToken token);
                    [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TeachingTip*, Microsoft.UI.Xaml.Controls.TeachingTipClosedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTipClosedEventArgs)]
                [uuid(2536F506-4038-59DB-9E35-A9252FB5ADB2)]
                [version(0x00000001)]
                interface ITeachingTipClosedEventArgs : IInspectable
                {
                    [propget] HRESULT Reason([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipCloseReason* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTipClosingEventArgs)]
                [uuid(16F53512-3C55-5636-A856-229D9768D64E)]
                [version(0x00000001)]
                interface ITeachingTipClosingEventArgs : IInspectable
                {
                    [propget] HRESULT Reason([out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipCloseReason* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** result);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTip)]
                [uuid(A3ECD47D-2972-5D19-A62E-DDFBC5E1AD57)]
                [version(0x00000001)]
                interface ITeachingTipFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TeachingTip** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTip)]
                [uuid(7C3ECDDB-0B4D-51C2-A27F-89180AFD45A8)]
                [version(0x00000001)]
                interface ITeachingTipStatics : IInspectable
                {
                    [propget] HRESULT IsOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TailVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SubtitleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ActionButtonContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ActionButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ActionButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ActionButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonCommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CloseButtonCommandParameterProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlacementMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ShouldConstrainToRootBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsLightDismissEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreferredPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeroContentPlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeroContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings)]
                [uuid(B081E1E9-C1A5-590A-8049-69EA003B6CF7)]
                [version(0x00000001)]
                interface ITeachingTipTemplateSettings : IInspectable
                {
                    [propget] HRESULT TopRightHighlightMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT TopRightHighlightMargin([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT TopLeftHighlightMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT TopLeftHighlightMargin([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT IconElement([out] [retval] Microsoft.UI.Xaml.Controls.IconElement** value);
                    [propput] HRESULT IconElement([in] Microsoft.UI.Xaml.Controls.IconElement* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings)]
                [uuid(63210545-E195-56CD-BCCD-169255E134E3)]
                [version(0x00000001)]
                interface ITeachingTipTemplateSettingsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings)]
                [uuid(FA9ACF9A-9743-51EE-8DB9-8ABD063EDFEA)]
                [version(0x00000001)]
                interface ITeachingTipTemplateSettingsStatics : IInspectable
                {
                    [propget] HRESULT TopRightHighlightMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TopLeftHighlightMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconElementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(96B0E51F-D7AD-599B-8D4B-5F106C33D87A)]
                interface ITelemetryCollectionPriv : IInspectable
                {
                    [propget] HRESULT IsTelemetryCollectionEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTelemetryCollectionEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBlock)]
                [uuid(1AC8D84F-392C-5C7E-83F5-A53E3BF0ABB0)]
                interface ITextBlock : IInspectable
                {
                    [propget] HRESULT FontSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT FontSize([in] DOUBLE value);
                    [propget] HRESULT FontFamily([out] [retval] Microsoft.UI.Xaml.Media.FontFamily** value);
                    [propput] HRESULT FontFamily([in] Microsoft.UI.Xaml.Media.FontFamily* value);
                    [propget] HRESULT FontWeight([out] [retval] Windows.UI.Text.FontWeight* value);
                    [propput] HRESULT FontWeight([in] Windows.UI.Text.FontWeight value);
                    [propget] HRESULT FontStyle([out] [retval] Windows.UI.Text.FontStyle* value);
                    [propput] HRESULT FontStyle([in] Windows.UI.Text.FontStyle value);
                    [propget] HRESULT FontStretch([out] [retval] Windows.UI.Text.FontStretch* value);
                    [propput] HRESULT FontStretch([in] Windows.UI.Text.FontStretch value);
                    [propget] HRESULT CharacterSpacing([out] [retval] INT32* value);
                    [propput] HRESULT CharacterSpacing([in] INT32 value);
                    [propget] HRESULT Foreground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT Foreground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT TextWrapping([out] [retval] Microsoft.UI.Xaml.TextWrapping* value);
                    [propput] HRESULT TextWrapping([in] Microsoft.UI.Xaml.TextWrapping value);
                    [propget] HRESULT TextTrimming([out] [retval] Microsoft.UI.Xaml.TextTrimming* value);
                    [propput] HRESULT TextTrimming([in] Microsoft.UI.Xaml.TextTrimming value);
                    [propget] HRESULT TextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT TextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT Inlines([out] [retval] Microsoft.UI.Xaml.Documents.InlineCollection** value);
                    [propget] HRESULT Padding([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propput] HRESULT Padding([in] Microsoft.UI.Xaml.Thickness value);
                    [propget] HRESULT LineHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT LineHeight([in] DOUBLE value);
                    [propget] HRESULT LineStackingStrategy([out] [retval] Microsoft.UI.Xaml.LineStackingStrategy* value);
                    [propput] HRESULT LineStackingStrategy([in] Microsoft.UI.Xaml.LineStackingStrategy value);
                    [propget] HRESULT IsTextSelectionEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextSelectionEnabled([in] boolean value);
                    [propget] HRESULT SelectedText([out] [retval] HSTRING* value);
                    [propget] HRESULT ContentStart([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT ContentEnd([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT SelectionStart([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT SelectionEnd([out] [retval] Microsoft.UI.Xaml.Documents.TextPointer** value);
                    [propget] HRESULT BaselineOffset([out] [retval] DOUBLE* value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT MaxLines([out] [retval] INT32* value);
                    [propput] HRESULT MaxLines([in] INT32 value);
                    [propget] HRESULT TextLineBounds([out] [retval] Microsoft.UI.Xaml.TextLineBounds* value);
                    [propput] HRESULT TextLineBounds([in] Microsoft.UI.Xaml.TextLineBounds value);
                    [propget] HRESULT OpticalMarginAlignment([out] [retval] Microsoft.UI.Xaml.OpticalMarginAlignment* value);
                    [propput] HRESULT OpticalMarginAlignment([in] Microsoft.UI.Xaml.OpticalMarginAlignment value);
                    [propget] HRESULT IsColorFontEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsColorFontEnabled([in] boolean value);
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT IsTextScaleFactorEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextScaleFactorEnabled([in] boolean value);
                    [propget] HRESULT TextDecorations([out] [retval] Windows.UI.Text.TextDecorations* value);
                    [propput] HRESULT TextDecorations([in] Windows.UI.Text.TextDecorations value);
                    [propget] HRESULT IsTextTrimmed([out] [retval] boolean* value);
                    [propget] HRESULT HorizontalTextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT HorizontalTextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT TextHighlighters([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter*>** value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuOpening([in] Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT IsTextTrimmedChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock*, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsTextTrimmedChanged([in] EventRegistrationToken token);
                    HRESULT SelectAll();
                    HRESULT Select([in] Microsoft.UI.Xaml.Documents.TextPointer* start, [in] Microsoft.UI.Xaml.Documents.TextPointer* end);
                    HRESULT GetAlphaMask([out] [retval] Microsoft.UI.Composition.CompositionBrush** result);
                    HRESULT CopySelectionToClipboard();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBlock)]
                [uuid(3187104B-65C2-5E53-B889-C8272B1314CD)]
                interface ITextBlockStatics : IInspectable
                {
                    [propget] HRESULT FontSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontFamilyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontWeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT FontStretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextWrappingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextTrimmingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PaddingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LineStackingStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextSelectionEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLinesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextLineBoundsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OpticalMarginAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorFontEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextScaleFactorEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextDecorationsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextTrimmedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalTextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBox)]
                [uuid(873AF7C2-AB89-5D76-8DBE-3D6325669DF5)]
                interface ITextBox : IInspectable
                {
                    [propget] HRESULT Text([out] [retval] HSTRING* value);
                    [propput] HRESULT Text([in] HSTRING value);
                    [propget] HRESULT SelectedText([out] [retval] HSTRING* value);
                    [propput] HRESULT SelectedText([in] HSTRING value);
                    [propget] HRESULT SelectionLength([out] [retval] INT32* value);
                    [propput] HRESULT SelectionLength([in] INT32 value);
                    [propget] HRESULT SelectionStart([out] [retval] INT32* value);
                    [propput] HRESULT SelectionStart([in] INT32 value);
                    [propget] HRESULT MaxLength([out] [retval] INT32* value);
                    [propput] HRESULT MaxLength([in] INT32 value);
                    [propget] HRESULT IsReadOnly([out] [retval] boolean* value);
                    [propput] HRESULT IsReadOnly([in] boolean value);
                    [propget] HRESULT AcceptsReturn([out] [retval] boolean* value);
                    [propput] HRESULT AcceptsReturn([in] boolean value);
                    [propget] HRESULT TextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT TextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT TextWrapping([out] [retval] Microsoft.UI.Xaml.TextWrapping* value);
                    [propput] HRESULT TextWrapping([in] Microsoft.UI.Xaml.TextWrapping value);
                    [propget] HRESULT IsSpellCheckEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsSpellCheckEnabled([in] boolean value);
                    [propget] HRESULT IsTextPredictionEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsTextPredictionEnabled([in] boolean value);
                    [propget] HRESULT InputScope([out] [retval] Microsoft.UI.Xaml.Input.InputScope** value);
                    [propput] HRESULT InputScope([in] Microsoft.UI.Xaml.Input.InputScope* value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT PlaceholderText([out] [retval] HSTRING* value);
                    [propput] HRESULT PlaceholderText([in] HSTRING value);
                    [propget] HRESULT SelectionHighlightColor([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColor([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([out] [retval] boolean* value);
                    [propput] HRESULT PreventKeyboardDisplayOnProgrammaticFocus([in] boolean value);
                    [propget] HRESULT IsColorFontEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsColorFontEnabled([in] boolean value);
                    [propget] HRESULT SelectionHighlightColorWhenNotFocused([out] [retval] Microsoft.UI.Xaml.Media.SolidColorBrush** value);
                    [propput] HRESULT SelectionHighlightColorWhenNotFocused([in] Microsoft.UI.Xaml.Media.SolidColorBrush* value);
                    [propget] HRESULT HorizontalTextAlignment([out] [retval] Microsoft.UI.Xaml.TextAlignment* value);
                    [propput] HRESULT HorizontalTextAlignment([in] Microsoft.UI.Xaml.TextAlignment value);
                    [propget] HRESULT CharacterCasing([out] [retval] Microsoft.UI.Xaml.Controls.CharacterCasing* value);
                    [propput] HRESULT CharacterCasing([in] Microsoft.UI.Xaml.Controls.CharacterCasing value);
                    [propget] HRESULT PlaceholderForeground([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT PlaceholderForeground([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT CanPasteClipboardContent([out] [retval] boolean* value);
                    [propget] HRESULT CanUndo([out] [retval] boolean* value);
                    [propget] HRESULT CanRedo([out] [retval] boolean* value);
                    [propget] HRESULT SelectionFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propput] HRESULT SelectionFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                    [propget] HRESULT ProofingMenuFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                    [propget] HRESULT Description([out] [retval] IInspectable** value);
                    [propput] HRESULT Description([in] IInspectable* value);
                    [eventadd] HRESULT TextChanged([in] Microsoft.UI.Xaml.Controls.TextChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectionChanged([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT ContextMenuOpening([in] Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ContextMenuOpening([in] EventRegistrationToken token);
                    [eventadd] HRESULT Paste([in] Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Paste([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionStarted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionStarted([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextCompositionEnded([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextCompositionEnded([in] EventRegistrationToken token);
                    [eventadd] HRESULT CopyingToClipboard([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CopyingToClipboard([in] EventRegistrationToken token);
                    [eventadd] HRESULT CuttingToClipboard([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CuttingToClipboard([in] EventRegistrationToken token);
                    [eventadd] HRESULT BeforeTextChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT BeforeTextChanging([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectionChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanging([in] EventRegistrationToken token);
                    HRESULT Select([in] INT32 start, [in] INT32 length);
                    HRESULT SelectAll();
                    HRESULT GetRectFromCharacterIndex([in] INT32 charIndex, [in] boolean trailingEdge, [out] [retval] Windows.Foundation.Rect* result);
                    HRESULT GetLinguisticAlternativesAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<HSTRING>*>** operation);
                    HRESULT Undo();
                    HRESULT Redo();
                    HRESULT PasteFromClipboard();
                    HRESULT CopySelectionToClipboard();
                    HRESULT CutSelectionToClipboard();
                    HRESULT ClearUndoRedoHistory();
                    [propget] HRESULT TextReadingOrder([out] [retval] Microsoft.UI.Xaml.TextReadingOrder* value);
                    [propput] HRESULT TextReadingOrder([in] Microsoft.UI.Xaml.TextReadingOrder value);
                    [propget] HRESULT DesiredCandidateWindowAlignment([out] [retval] Microsoft.UI.Xaml.Controls.CandidateWindowAlignment* value);
                    [propput] HRESULT DesiredCandidateWindowAlignment([in] Microsoft.UI.Xaml.Controls.CandidateWindowAlignment value);
                    [eventadd] HRESULT CandidateWindowBoundsChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CandidateWindowBoundsChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT TextChanging([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox*, Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TextChanging([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs)]
                [uuid(BA46105B-9A16-5237-A20F-5DF750992A05)]
                interface ITextBoxBeforeTextChangingEventArgs : IInspectable
                {
                    [propget] HRESULT NewText([out] [retval] HSTRING* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBox)]
                [uuid(E1D8B82E-BC60-5D27-B646-5CA4C4A69432)]
                interface ITextBoxFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TextBox** value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(65680C59-C0A4-5E31-BE63-44A53FFA981D)]
                interface ITextBoxPriv2 : IInspectable
                {
                    [propget] HRESULT IsDesktopPopupMenuEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDesktopPopupMenuEnabled([in] boolean value);
                    [propget] HRESULT PreventEditFocusLoss([out] [retval] boolean* value);
                    [propput] HRESULT PreventEditFocusLoss([in] boolean value);
                    HRESULT ForceEditFocusLoss();
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(2D1715A2-5B32-5B55-9B71-9BD9A44D6F25)]
                interface ITextBoxPrivate : IInspectable
                {
                    [propget] HRESULT EnsureRectVisibleEnabled([out] [retval] boolean* value);
                    [propput] HRESULT EnsureRectVisibleEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs)]
                [uuid(6DCE20DB-894E-5FF6-825B-F9891AF79516)]
                interface ITextBoxSelectionChangingEventArgs : IInspectable
                {
                    [propget] HRESULT SelectionStart([out] [retval] INT32* value);
                    [propget] HRESULT SelectionLength([out] [retval] INT32* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBox)]
                [uuid(46C3E7AA-85F5-5FB6-8CFC-15D4D3986680)]
                interface ITextBoxStatics : IInspectable
                {
                    [propget] HRESULT TextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaxLengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsReadOnlyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AcceptsReturnProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextWrappingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsSpellCheckEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsTextPredictionEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputScopeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderTextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PreventKeyboardDisplayOnProgrammaticFocusProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsColorFontEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionHighlightColorWhenNotFocusedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalTextAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CharacterCasingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlaceholderForegroundProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanPasteClipboardContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanUndoProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanRedoProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectionFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ProofingMenuFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ErrorTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT InputValidationKindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DesiredCandidateWindowAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TextReadingOrderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs)]
                [uuid(A1A08D48-E8C0-5379-B138-7EB3F8D5F5E6)]
                interface ITextBoxTextChangingEventArgs : IInspectable
                {
                    [propget] HRESULT IsContentChanging([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextChangedEventArgs)]
                [uuid(71C37E43-7BE7-52FC-BF8C-9867F44BE5F4)]
                interface ITextChangedEventArgs : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TextCommandBarFlyout)]
                [uuid(6D0F38A5-0EB3-5D73-8195-D2D89B76B0F7)]
                [version(0x00000001)]
                interface ITextCommandBarFlyout : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TextCommandBarFlyout)]
                [uuid(5C56A34F-621F-55F2-8D71-3E3A6E6906BD)]
                [version(0x00000001)]
                interface ITextCommandBarFlyoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TextCommandBarFlyout** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs)]
                [uuid(04F420D2-BA9C-5F59-B8AC-0D8AA50A9240)]
                interface ITextCompositionChangedEventArgs : IInspectable
                {
                    [propget] HRESULT StartIndex([out] [retval] INT32* value);
                    [propget] HRESULT Length([out] [retval] INT32* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs)]
                [uuid(19D0A5C5-8D0F-5118-8C30-E709326F1283)]
                interface ITextCompositionEndedEventArgs : IInspectable
                {
                    [propget] HRESULT StartIndex([out] [retval] INT32* value);
                    [propget] HRESULT Length([out] [retval] INT32* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs)]
                [uuid(A604FF71-5D44-5859-8D71-72030ED78BC8)]
                interface ITextCompositionStartedEventArgs : IInspectable
                {
                    [propget] HRESULT StartIndex([out] [retval] INT32* value);
                    [propget] HRESULT Length([out] [retval] INT32* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs)]
                [uuid(1DAAC6D5-8DB5-5D9F-9382-1E644F9AA437)]
                interface ITextControlCopyingToClipboardEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs)]
                [uuid(9D73671F-EA30-555D-8129-5A96AEC73A14)]
                interface ITextControlCuttingToClipboardEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TextControlPasteEventArgs)]
                [uuid(FC5E567E-3AA9-5C57-88D4-834AD3B62E9E)]
                interface ITextControlPasteEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickedEventArgs)]
                [uuid(9F85D661-A9E0-5E08-A904-113B74CA3C59)]
                interface ITimePickedEventArgs : IInspectable
                {
                    [propget] HRESULT OldTime([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propget] HRESULT NewTime([out] [retval] Windows.Foundation.TimeSpan* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePicker)]
                [uuid(ED4BAA33-C240-5934-9229-82D37B26F846)]
                interface ITimePicker : IInspectable
                {
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ClockIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT ClockIdentifier([in] HSTRING value);
                    [propget] HRESULT MinuteIncrement([out] [retval] INT32* value);
                    [propput] HRESULT MinuteIncrement([in] INT32 value);
                    [propget] HRESULT Time([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propput] HRESULT Time([in] Windows.Foundation.TimeSpan value);
                    [propget] HRESULT LightDismissOverlayMode([out] [retval] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode* value);
                    [propput] HRESULT LightDismissOverlayMode([in] Microsoft.UI.Xaml.Controls.LightDismissOverlayMode value);
                    [propget] HRESULT SelectedTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT SelectedTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    [eventadd] HRESULT TimeChanged([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TimeChanged([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectedTimeChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePicker*, Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectedTimeChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePicker)]
                [uuid(1584429E-AAFE-5C65-89E9-8C066E5690E7)]
                interface ITimePickerFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TimePicker** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerFlyout)]
                [uuid(479799DC-700A-5A9C-BA0B-9AB2587ED2E8)]
                interface ITimePickerFlyout : IInspectable
                {
                    [propget] HRESULT ClockIdentifier([out] [retval] HSTRING* value);
                    [propput] HRESULT ClockIdentifier([in] HSTRING value);
                    [propget] HRESULT Time([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propput] HRESULT Time([in] Windows.Foundation.TimeSpan value);
                    [propget] HRESULT MinuteIncrement([out] [retval] INT32* value);
                    [propput] HRESULT MinuteIncrement([in] INT32 value);
                    [eventadd] HRESULT TimePicked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TimePickerFlyout*, Microsoft.UI.Xaml.Controls.TimePickedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TimePicked([in] EventRegistrationToken token);
                    HRESULT ShowAtAsync([in] Microsoft.UI.Xaml.FrameworkElement* target, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.IReference<Windows.Foundation.TimeSpan>*>** operation);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerFlyoutPresenter)]
                [uuid(A7439B37-7A77-5AEB-806B-BC726005DE20)]
                interface ITimePickerFlyoutPresenter : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsDefaultShadowEnabled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerFlyoutPresenter)]
                [uuid(0CD9D57D-970F-5DF3-B2AF-49CFF489675E)]
                interface ITimePickerFlyoutPresenterStatics : IInspectable
                {
                    [propget] HRESULT IsDefaultShadowEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerFlyout)]
                [uuid(085A6A2D-68F4-5D4E-B89C-47CC0DD520A8)]
                interface ITimePickerFlyoutStatics : IInspectable
                {
                    [propget] HRESULT ClockIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TimeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinuteIncrementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs)]
                [uuid(6ED7EDF1-9B0B-5E7B-9E10-F35660A29FD2)]
                interface ITimePickerSelectedValueChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propget] HRESULT NewTime([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePicker)]
                [uuid(12BEF59E-4222-507B-901E-EFFD04620C4F)]
                interface ITimePickerStatics : IInspectable
                {
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ClockIdentifierProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinuteIncrementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TimeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT LightDismissOverlayModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT SelectedTimeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs)]
                [uuid(7B98953F-C24A-53C6-8A3A-520558508B08)]
                interface ITimePickerValueChangedEventArgs : IInspectable
                {
                    [propget] HRESULT OldTime([out] [retval] Windows.Foundation.TimeSpan* value);
                    [propget] HRESULT NewTime([out] [retval] Windows.Foundation.TimeSpan* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)]
                [uuid(1803F260-67E4-5BC1-A63A-123510167BB8)]
                interface IToggleMenuFlyoutItem : IInspectable
                {
                    [propget] HRESULT IsChecked([out] [retval] boolean* value);
                    [propput] HRESULT IsChecked([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)]
                [uuid(426DFD57-6CC9-570F-950D-37437235DC89)]
                interface IToggleMenuFlyoutItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)]
                [uuid(7411E854-C59A-5463-BEAB-64DDB052C6DC)]
                interface IToggleMenuFlyoutItemStatics : IInspectable
                {
                    [propget] HRESULT IsCheckedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSplitButton)]
                [uuid(5C0F247B-BD00-5509-88A8-B09007AE22B0)]
                [version(0x00000001)]
                interface IToggleSplitButton : IInspectable
                {
                    [propget] HRESULT IsChecked([out] [retval] boolean* value);
                    [propput] HRESULT IsChecked([in] boolean value);
                    [eventadd] HRESULT IsCheckedChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ToggleSplitButton*, Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsCheckedChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSplitButton)]
                [uuid(25459D02-0FFC-5C7C-AF56-F55AAD6DB5E7)]
                [version(0x00000001)]
                interface IToggleSplitButtonFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ToggleSplitButton** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs)]
                [uuid(6CAB1E15-C017-5760-828B-DAFC21D54EB2)]
                [version(0x00000001)]
                interface IToggleSplitButtonIsCheckedChangedEventArgs : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSplitButton)]
                [uuid(801C9CA9-5B24-5B9E-A8D1-CFF4B6E6857F)]
                [version(0x00000001)]
                interface IToggleSplitButtonStatics : IInspectable
                {
                    [propget] HRESULT IsCheckedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSwitch)]
                [uuid(1B17EEB1-74BF-5A83-8161-A86F0FDCDF24)]
                interface IToggleSwitch : IInspectable
                {
                    [propget] HRESULT IsOn([out] [retval] boolean* value);
                    [propput] HRESULT IsOn([in] boolean value);
                    [propget] HRESULT Header([out] [retval] IInspectable** value);
                    [propput] HRESULT Header([in] IInspectable* value);
                    [propget] HRESULT HeaderTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT HeaderTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT OnContent([out] [retval] IInspectable** value);
                    [propput] HRESULT OnContent([in] IInspectable* value);
                    [propget] HRESULT OnContentTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT OnContentTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT OffContent([out] [retval] IInspectable** value);
                    [propput] HRESULT OffContent([in] IInspectable* value);
                    [propget] HRESULT OffContentTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT OffContentTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings** value);
                    [eventadd] HRESULT Toggled([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Toggled([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSwitch)]
                [uuid(772682DB-E3D4-5242-B6DE-36705725EEB8)]
                interface IToggleSwitchOverrides : IInspectable
                {
                    HRESULT OnToggled();
                    HRESULT OnOnContentChanged([in] IInspectable* oldContent, [in] IInspectable* newContent);
                    HRESULT OnOffContentChanged([in] IInspectable* oldContent, [in] IInspectable* newContent);
                    HRESULT OnHeaderChanged([in] IInspectable* oldContent, [in] IInspectable* newContent);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToggleSwitch)]
                [uuid(C9C203D6-0619-504D-9ED8-5054FE3CA51E)]
                interface IToggleSwitchStatics : IInspectable
                {
                    [propget] HRESULT IsOnProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HeaderTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OnContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OnContentTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OffContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OffContentTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToolTip)]
                [uuid(67E93D74-5E93-59A1-91BF-413EFBEB904C)]
                interface IToolTip : IInspectable
                {
                    [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT HorizontalOffset([in] DOUBLE value);
                    [propget] HRESULT IsOpen([out] [retval] boolean* value);
                    [propput] HRESULT IsOpen([in] boolean value);
                    [propget] HRESULT Placement([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.PlacementMode* value);
                    [propput] HRESULT Placement([in] Microsoft.UI.Xaml.Controls.Primitives.PlacementMode value);
                    [propget] HRESULT PlacementTarget([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT PlacementTarget([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT PlacementRect([out] [retval] Windows.Foundation.IReference<Windows.Foundation.Rect>** value);
                    [propput] HRESULT PlacementRect([in] Windows.Foundation.IReference<Windows.Foundation.Rect>* value);
                    [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                    [propput] HRESULT VerticalOffset([in] DOUBLE value);
                    [propget] HRESULT TemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings** value);
                    [eventadd] HRESULT Closed([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                    [eventadd] HRESULT Opened([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToolTip)]
                [uuid(BCBB3720-2DB8-54E1-8806-FCBED38949A9)]
                interface IToolTipFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ToolTip** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToolTipService)]
                [uuid(01140768-2727-5F89-80E0-5210326A3431)]
                interface IToolTipService : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToolTipService)]
                [uuid(5AA38ADC-9874-5E0A-8D8E-1574EFC0B88F)]
                interface IToolTipServiceStatics : IInspectable
                {
                    [propget] HRESULT PlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetPlacement([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.Primitives.PlacementMode* result);
                    HRESULT SetPlacement([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.Primitives.PlacementMode value);
                    [propget] HRESULT PlacementTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetPlacementTarget([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT SetPlacementTarget([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT ToolTipProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetToolTip([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] IInspectable** result);
                    HRESULT SetToolTip([in] Microsoft.UI.Xaml.DependencyObject* element, [in] IInspectable* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.ToolTip)]
                [uuid(88EB60D4-CD54-5E23-BD1A-223702442BA4)]
                interface IToolTipStatics : IInspectable
                {
                    [propget] HRESULT HorizontalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsOpenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlacementProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlacementTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PlacementRectProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeView)]
                [uuid(1E616DD2-1CB6-5318-BA91-4002D5F36E83)]
                [version(0x00000001)]
                interface ITreeView : IInspectable
                {
                    [propget] HRESULT RootNodes([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.TreeViewNode*>** value);
                    [propget] HRESULT SelectionMode([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewSelectionMode* value);
                    [propput] HRESULT SelectionMode([in] Microsoft.UI.Xaml.Controls.TreeViewSelectionMode value);
                    [propget] HRESULT SelectedNodes([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.TreeViewNode*>** value);
                    HRESULT Expand([in] Microsoft.UI.Xaml.Controls.TreeViewNode* value);
                    HRESULT Collapse([in] Microsoft.UI.Xaml.Controls.TreeViewNode* value);
                    HRESULT SelectAll();
                    [eventadd] HRESULT ItemInvoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ItemInvoked([in] EventRegistrationToken token);
                    [eventadd] HRESULT Expanding([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Expanding([in] EventRegistrationToken token);
                    [eventadd] HRESULT Collapsed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Collapsed([in] EventRegistrationToken token);
                    [eventadd] HRESULT SelectionChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewSelectionChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT SelectionChanged([in] EventRegistrationToken token);
                    HRESULT NodeFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** result);
                    HRESULT ContainerFromNode([in] Microsoft.UI.Xaml.Controls.TreeViewNode* node, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT ItemFromContainer([in] Microsoft.UI.Xaml.DependencyObject* container, [out] [retval] IInspectable** result);
                    HRESULT ContainerFromItem([in] IInspectable* item, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [propget] HRESULT CanDragItems([out] [retval] boolean* value);
                    [propput] HRESULT CanDragItems([in] boolean value);
                    [propget] HRESULT CanReorderItems([out] [retval] boolean* value);
                    [propput] HRESULT CanReorderItems([in] boolean value);
                    [propget] HRESULT ItemTemplate([out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
                    [propput] HRESULT ItemTemplate([in] Microsoft.UI.Xaml.DataTemplate* value);
                    [propget] HRESULT ItemTemplateSelector([out] [retval] Microsoft.UI.Xaml.Controls.DataTemplateSelector** value);
                    [propput] HRESULT ItemTemplateSelector([in] Microsoft.UI.Xaml.Controls.DataTemplateSelector* value);
                    [propget] HRESULT ItemContainerStyle([out] [retval] Microsoft.UI.Xaml.Style** value);
                    [propput] HRESULT ItemContainerStyle([in] Microsoft.UI.Xaml.Style* value);
                    [propget] HRESULT ItemContainerStyleSelector([out] [retval] Microsoft.UI.Xaml.Controls.StyleSelector** value);
                    [propput] HRESULT ItemContainerStyleSelector([in] Microsoft.UI.Xaml.Controls.StyleSelector* value);
                    [propget] HRESULT ItemContainerTransitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                    [propput] HRESULT ItemContainerTransitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                    [eventadd] HRESULT DragItemsStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DragItemsStarting([in] EventRegistrationToken token);
                    [eventadd] HRESULT DragItemsCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TreeView*, Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT DragItemsCompleted([in] EventRegistrationToken token);
                    [propget] HRESULT SelectedNode([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** value);
                    [propput] HRESULT SelectedNode([in] Microsoft.UI.Xaml.Controls.TreeViewNode* value);
                    [propget] HRESULT SelectedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT SelectedItem([in] IInspectable* value);
                    [propget] HRESULT SelectedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs)]
                [uuid(8CF22168-D31E-5EE9-A909-B7E52085D35B)]
                [version(0x00000001)]
                interface ITreeViewCollapsedEventArgs : IInspectable
                {
                    [propget] HRESULT Node([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs)]
                [uuid(7B3B7853-440F-5497-AE43-CC0687879D95)]
                [version(0x00000001)]
                interface ITreeViewDragItemsCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT DropResult([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVectorView<IInspectable*>** value);
                    [propget] HRESULT NewParentItem([out] [retval] IInspectable** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs)]
                [uuid(1B6C4FFC-CD32-5E06-B782-DF9F077546C7)]
                [version(0x00000001)]
                interface ITreeViewDragItemsStartingEventArgs : IInspectable
                {
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                    [propget] HRESULT Items([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs)]
                [uuid(165AF9D6-A4EB-577F-8D92-1A374926691A)]
                [version(0x00000001)]
                interface ITreeViewExpandingEventArgs : IInspectable
                {
                    [propget] HRESULT Node([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** value);
                    [propget] HRESULT Item([out] [retval] IInspectable** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeView)]
                [uuid(9C6220BE-F9EB-518A-B30E-7E41DE5EFDA9)]
                [version(0x00000001)]
                interface ITreeViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TreeView** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItem)]
                [uuid(1CB68842-AD50-52EB-B714-0211A182767E)]
                [version(0x00000001)]
                interface ITreeViewItem : IInspectable
                {
                    [propget] HRESULT GlyphOpacity([out] [retval] DOUBLE* value);
                    [propput] HRESULT GlyphOpacity([in] DOUBLE value);
                    [propget] HRESULT GlyphBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                    [propput] HRESULT GlyphBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                    [propget] HRESULT ExpandedGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT ExpandedGlyph([in] HSTRING value);
                    [propget] HRESULT CollapsedGlyph([out] [retval] HSTRING* value);
                    [propput] HRESULT CollapsedGlyph([in] HSTRING value);
                    [propget] HRESULT GlyphSize([out] [retval] DOUBLE* value);
                    [propput] HRESULT GlyphSize([in] DOUBLE value);
                    [propget] HRESULT IsExpanded([out] [retval] boolean* value);
                    [propput] HRESULT IsExpanded([in] boolean value);
                    [propget] HRESULT TreeViewItemTemplateSettings([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings** value);
                    [propget] HRESULT HasUnrealizedChildren([out] [retval] boolean* value);
                    [propput] HRESULT HasUnrealizedChildren([in] boolean value);
                    [propget] HRESULT ItemsSource([out] [retval] IInspectable** value);
                    [propput] HRESULT ItemsSource([in] IInspectable* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItem)]
                [uuid(878FD918-E77E-5BE8-8C8A-B79B27B08D9B)]
                [version(0x00000001)]
                interface ITreeViewItemFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TreeViewItem** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs)]
                [uuid(1A05853C-B101-542C-9A1E-775A044C4652)]
                [version(0x00000001)]
                interface ITreeViewItemInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT InvokedItem([out] [retval] IInspectable** value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItem)]
                [uuid(FA6C8EB4-ABC6-5697-820B-44892AED2958)]
                [version(0x00000001)]
                interface ITreeViewItemStatics : IInspectable
                {
                    [propget] HRESULT GlyphOpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GlyphBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ExpandedGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CollapsedGlyphProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT GlyphSizeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsExpandedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TreeViewItemTemplateSettingsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HasUnrealizedChildrenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings)]
                [uuid(29B5DD9C-2BFB-5E1C-97CB-CDC3C34A365D)]
                [version(0x00000001)]
                interface ITreeViewItemTemplateSettings : IInspectable
                {
                    [propget] HRESULT ExpandedGlyphVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT CollapsedGlyphVisibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                    [propget] HRESULT Indentation([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                    [propget] HRESULT DragItemsCount([out] [retval] INT32* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings)]
                [uuid(1D1A66E3-F56D-5D7F-942C-F3A87F5C552E)]
                [version(0x00000001)]
                interface ITreeViewItemTemplateSettingsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings)]
                [uuid(67817566-6528-5F4A-B1E1-710AB094C74F)]
                [version(0x00000001)]
                interface ITreeViewItemTemplateSettingsStatics : IInspectable
                {
                    [propget] HRESULT ExpandedGlyphVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CollapsedGlyphVisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IndentationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DragItemsCountProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewList)]
                [uuid(94CEE57B-7085-5A6A-AAC3-184509B8ECE0)]
                [version(0x00000001)]
                interface ITreeViewList : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewList)]
                [uuid(461499A0-68CF-5B81-B0E4-B1AF929B0B12)]
                [version(0x00000001)]
                interface ITreeViewListFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TreeViewList** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewNode)]
                [uuid(00378A74-790B-5328-8AFA-7D65E22DA426)]
                [version(0x00000001)]
                interface ITreeViewNode : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] IInspectable** value);
                    [propput] HRESULT Content([in] IInspectable* value);
                    [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** value);
                    [propget] HRESULT IsExpanded([out] [retval] boolean* value);
                    [propput] HRESULT IsExpanded([in] boolean value);
                    [propget] HRESULT HasChildren([out] [retval] boolean* value);
                    [propget] HRESULT Depth([out] [retval] INT32* value);
                    [propget] HRESULT HasUnrealizedChildren([out] [retval] boolean* value);
                    [propput] HRESULT HasUnrealizedChildren([in] boolean value);
                    [propget] HRESULT Children([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.TreeViewNode*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewNode)]
                [uuid(C105A5E5-CEA8-5EFD-8BE8-3D89B54CBD5F)]
                [version(0x00000001)]
                interface ITreeViewNodeFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TreeViewNode** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewNode)]
                [uuid(F5BB217C-66B9-5B62-B2D6-FB47843C8F6F)]
                [version(0x00000001)]
                interface ITreeViewNodeStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DepthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsExpandedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HasChildrenProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeViewSelectionChangedEventArgs)]
                [uuid(664190F3-7133-5599-B41C-1D54CD2CB930)]
                [version(0x00000001)]
                interface ITreeViewSelectionChangedEventArgs : IInspectable
                {
                    [propget] HRESULT AddedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                    [propget] HRESULT RemovedItems([out] [retval] Windows.Foundation.Collections.IVector<IInspectable*>** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TreeView)]
                [uuid(F6003A3B-17B1-5E4D-BB0C-795B6BCE2CBB)]
                [version(0x00000001)]
                interface ITreeViewStatics : IInspectable
                {
                    [propget] HRESULT SelectionModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanDragItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CanReorderItemsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemTemplateSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerStyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerStyleSelectorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemContainerTransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TwoPaneView)]
                [uuid(8D2E56D9-C333-5F15-81D1-B8B27E076522)]
                [version(0x00000001)]
                interface ITwoPaneView : IInspectable
                {
                    [propget] HRESULT Pane1([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Pane1([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pane2([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Pane2([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pane1Length([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                    [propput] HRESULT Pane1Length([in] Microsoft.UI.Xaml.GridLength value);
                    [propget] HRESULT Pane2Length([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                    [propput] HRESULT Pane2Length([in] Microsoft.UI.Xaml.GridLength value);
                    [propget] HRESULT PanePriority([out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneViewPriority* value);
                    [propput] HRESULT PanePriority([in] Microsoft.UI.Xaml.Controls.TwoPaneViewPriority value);
                    [propget] HRESULT Mode([out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneViewMode* value);
                    [propget] HRESULT WideModeConfiguration([out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration* value);
                    [propput] HRESULT WideModeConfiguration([in] Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration value);
                    [propget] HRESULT TallModeConfiguration([out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration* value);
                    [propput] HRESULT TallModeConfiguration([in] Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration value);
                    [propget] HRESULT MinWideModeWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinWideModeWidth([in] DOUBLE value);
                    [propget] HRESULT MinTallModeHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinTallModeHeight([in] DOUBLE value);
                    [eventadd] HRESULT ModeChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TwoPaneView*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ModeChanged([in] EventRegistrationToken token);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TwoPaneView)]
                [uuid(0F1AF0CD-F3DC-52F6-B632-396742533231)]
                [version(0x00000001)]
                interface ITwoPaneViewFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.TwoPaneView** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.TwoPaneView)]
                [uuid(4FBD51C3-CEE6-58DE-A5E4-99ABAD873016)]
                [version(0x00000001)]
                interface ITwoPaneViewStatics : IInspectable
                {
                    [propget] HRESULT Pane1Property([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT Pane2Property([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT Pane1LengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT Pane2LengthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT PanePriorityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT WideModeConfigurationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT TallModeConfigurationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinWideModeWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinTallModeHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.UIElementCollection)]
                [uuid(23050CB1-DB88-54ED-9083-5ECFB12512FD)]
                interface IUIElementCollection : IInspectable
                {
                    HRESULT Move([in] UINT32 oldIndex, [in] UINT32 newIndex);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.UniformGridLayout)]
                [uuid(8A164CBC-2A5E-56E5-A011-FB76334AABDF)]
                [version(0x00000001)]
                interface IUniformGridLayout : IInspectable
                {
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT MinItemWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinItemWidth([in] DOUBLE value);
                    [propget] HRESULT MinItemHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinItemHeight([in] DOUBLE value);
                    [propget] HRESULT MinRowSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinRowSpacing([in] DOUBLE value);
                    [propget] HRESULT MinColumnSpacing([out] [retval] DOUBLE* value);
                    [propput] HRESULT MinColumnSpacing([in] DOUBLE value);
                    [propget] HRESULT ItemsJustification([out] [retval] Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification* value);
                    [propput] HRESULT ItemsJustification([in] Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification value);
                    [propget] HRESULT ItemsStretch([out] [retval] Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch* value);
                    [propput] HRESULT ItemsStretch([in] Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch value);
                    [propget] HRESULT MaximumRowsOrColumns([out] [retval] INT32* value);
                    [propput] HRESULT MaximumRowsOrColumns([in] INT32 value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.UniformGridLayout)]
                [uuid(0D9ED808-F3F9-5034-9627-152B91E91B4B)]
                [version(0x00000001)]
                interface IUniformGridLayoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.UniformGridLayout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.UniformGridLayoutState)]
                [uuid(96F81418-6369-5AB1-B682-AE3C20CA5DCA)]
                [version(0x00000001)]
                interface IUniformGridLayoutState : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.UniformGridLayoutState)]
                [uuid(8C774AAF-2593-5EDE-AC20-5B9260A3DB26)]
                [version(0x00000001)]
                interface IUniformGridLayoutStateFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.UniformGridLayoutState** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.UniformGridLayout)]
                [uuid(19BE9A3E-37E1-5A6D-8B62-419325EA705A)]
                [version(0x00000001)]
                interface IUniformGridLayoutStatics : IInspectable
                {
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinItemWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinItemHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinRowSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MinColumnSpacingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsJustificationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemsStretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaximumRowsOrColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.UserControl)]
                [uuid(AB8A0A51-44CF-5337-AD77-8EDA1795E9F6)]
                interface IUserControl : IInspectable
                {
                    [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.UserControl)]
                [uuid(61AC9074-AAB3-50B8-8B18-D4D2573A5235)]
                interface IUserControlFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.UserControl** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.UserControl)]
                [uuid(575E8FA1-2E2D-5857-9A93-6B11E54316BA)]
                interface IUserControlStatics : IInspectable
                {
                    [propget] HRESULT ContentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid)]
                [uuid(BFECD12B-E16A-58A0-AF5F-4672627462D5)]
                interface IVariableSizedWrapGrid : IInspectable
                {
                    [propget] HRESULT ItemHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemHeight([in] DOUBLE value);
                    [propget] HRESULT ItemWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemWidth([in] DOUBLE value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT HorizontalChildrenAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalChildrenAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalChildrenAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalChildrenAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                    [propget] HRESULT MaximumRowsOrColumns([out] [retval] INT32* value);
                    [propput] HRESULT MaximumRowsOrColumns([in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid)]
                [uuid(0D979FE6-64AF-5AF5-914A-DD38F2CCF2D7)]
                interface IVariableSizedWrapGridStatics : IInspectable
                {
                    [propget] HRESULT ItemHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalChildrenAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalChildrenAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaximumRowsOrColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT RowSpanProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetRowSpan([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] INT32* result);
                    HRESULT SetRowSpan([in] Microsoft.UI.Xaml.UIElement* element, [in] INT32 value);
                    [propget] HRESULT ColumnSpanProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetColumnSpan([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] INT32* result);
                    HRESULT SetColumnSpan([in] Microsoft.UI.Xaml.UIElement* element, [in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Viewbox)]
                [uuid(510683E8-D0FE-5EF4-85BD-E1131076AC22)]
                interface IViewbox : IInspectable
                {
                    [propget] HRESULT Child([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Child([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Stretch([out] [retval] Microsoft.UI.Xaml.Media.Stretch* value);
                    [propput] HRESULT Stretch([in] Microsoft.UI.Xaml.Media.Stretch value);
                    [propget] HRESULT StretchDirection([out] [retval] Microsoft.UI.Xaml.Controls.StretchDirection* value);
                    [propput] HRESULT StretchDirection([in] Microsoft.UI.Xaml.Controls.StretchDirection value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.Viewbox)]
                [uuid(0466C103-1E17-5E83-A262-8855F216B59F)]
                interface IViewboxStatics : IInspectable
                {
                    [propget] HRESULT StretchProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT StretchDirectionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayout)]
                [uuid(54857CE0-B9E6-51A3-BFA8-DCD8EE306D5C)]
                [version(0x00000001)]
                interface IVirtualizingLayout : IInspectable
                {
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext)]
                [uuid(5B5B186A-A7F9-5A2E-B1F0-8950CCD97350)]
                [version(0x00000001)]
                interface IVirtualizingLayoutContext : IInspectable
                {
                    [propget] HRESULT ItemCount([out] [retval] INT32* value);
                    HRESULT GetItemAt([in] INT32 index, [out] [retval] IInspectable** result);
                    [propget] HRESULT RealizationRect([out] [retval] Windows.Foundation.Rect* value);
                    [overload("GetOrCreateElementAt")] HRESULT GetOrCreateElementAt([in] INT32 index, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [overload("GetOrCreateElementAt")] HRESULT GetOrCreateElementAt2([in] INT32 index, [in] Microsoft.UI.Xaml.Controls.ElementRealizationOptions options, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT RecycleElement([in] Microsoft.UI.Xaml.UIElement* element);
                    [propget] HRESULT RecommendedAnchorIndex([out] [retval] INT32* value);
                    [propget] HRESULT LayoutOrigin([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT LayoutOrigin([in] Windows.Foundation.Point value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext)]
                [uuid(3F790B67-FDFB-505A-8B85-6210506DF311)]
                [version(0x00000001)]
                interface IVirtualizingLayoutContextFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext)]
                [uuid(78633B2A-9633-5086-89A7-0E960A95A3B2)]
                [version(0x00000001)]
                interface IVirtualizingLayoutContextOverrides : IInspectable
                {
                    HRESULT ItemCountCore([out] [retval] INT32* result);
                    HRESULT GetItemAtCore([in] INT32 index, [out] [retval] IInspectable** result);
                    HRESULT RealizationRectCore([out] [retval] Windows.Foundation.Rect* result);
                    HRESULT GetOrCreateElementAtCore([in] INT32 index, [in] Microsoft.UI.Xaml.Controls.ElementRealizationOptions options, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    HRESULT RecycleElementCore([in] Microsoft.UI.Xaml.UIElement* element);
                    [propget] HRESULT RecommendedAnchorIndexCore([out] [retval] INT32* value);
                    [propget] HRESULT LayoutOriginCore([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT LayoutOriginCore([in] Windows.Foundation.Point value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayout)]
                [uuid(C7C128E1-5DF7-5345-B5CD-43AFDFA948B4)]
                [version(0x00000001)]
                interface IVirtualizingLayoutFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.VirtualizingLayout** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingLayout)]
                [uuid(4357A35B-3703-5819-A776-D139848E9ED9)]
                [version(0x00000001)]
                interface IVirtualizingLayoutOverrides : IInspectable
                {
                    HRESULT InitializeForContextCore([in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context);
                    HRESULT UninitializeForContextCore([in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context);
                    HRESULT MeasureOverride([in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT ArrangeOverride([in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Size* result);
                    HRESULT OnItemsChangedCore([in] Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext* context, [in] IInspectable* source, [in] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs* args);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingPanel)]
                [uuid(2B216A2D-5079-51BA-838A-9086903636B4)]
                interface IVirtualizingPanel : IInspectable
                {
                    [propget] HRESULT ItemContainerGenerator([out] [retval] Microsoft.UI.Xaml.Controls.ItemContainerGenerator** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingPanel)]
                [uuid(32E8C71B-B58C-5F19-9BD5-EECA5860F387)]
                interface IVirtualizingPanelFactory : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingPanel)]
                [uuid(3FFE2108-0382-50C8-B295-21BD8BEE04D7)]
                interface IVirtualizingPanelOverrides : IInspectable
                {
                    HRESULT OnItemsChanged([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs* args);
                    HRESULT OnClearChildren();
                    HRESULT BringIndexIntoView([in] INT32 index);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingPanel)]
                [uuid(BC4579F5-FDC8-5DA2-A98A-F44C13C073D3)]
                interface IVirtualizingPanelProtected : IInspectable
                {
                    HRESULT AddInternalChild([in] Microsoft.UI.Xaml.UIElement* child);
                    HRESULT InsertInternalChild([in] INT32 index, [in] Microsoft.UI.Xaml.UIElement* child);
                    HRESULT RemoveInternalChildRange([in] INT32 index, [in] INT32 range);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingStackPanel)]
                [uuid(7D6103DC-2427-5576-9A69-BF53E2D7180B)]
                interface IVirtualizingStackPanel : IInspectable
                {
                    [propget] HRESULT AreScrollSnapPointsRegular([out] [retval] boolean* value);
                    [propput] HRESULT AreScrollSnapPointsRegular([in] boolean value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [eventadd] HRESULT CleanUpVirtualizedItemEvent([in] Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CleanUpVirtualizedItemEvent([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingStackPanel)]
                [uuid(8FEE3E46-6E2F-5C0A-9A3B-C0B659818801)]
                interface IVirtualizingStackPanelOverrides : IInspectable
                {
                    HRESULT OnCleanUpVirtualizedItem([in] Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs* e);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.VirtualizingStackPanel)]
                [uuid(731CC881-A71A-5AF9-985E-1EDE3D88C274)]
                interface IVirtualizingStackPanelStatics : IInspectable
                {
                    [propget] HRESULT AreScrollSnapPointsRegularProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VirtualizationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetVirtualizationMode([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.Controls.VirtualizationMode* result);
                    HRESULT SetVirtualizationMode([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.Controls.VirtualizationMode value);
                    [propget] HRESULT IsVirtualizingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    HRESULT GetIsVirtualizing([in] Microsoft.UI.Xaml.DependencyObject* o, [out] [retval] boolean* result);
                }

                      [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.WrapGrid)]
                [uuid(2E570B6A-FF97-53B8-A887-348F59EE0544)]
                interface IWrapGrid : IInspectable
                {
                    [propget] HRESULT ItemWidth([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemWidth([in] DOUBLE value);
                    [propget] HRESULT ItemHeight([out] [retval] DOUBLE* value);
                    [propput] HRESULT ItemHeight([in] DOUBLE value);
                    [propget] HRESULT Orientation([out] [retval] Microsoft.UI.Xaml.Controls.Orientation* value);
                    [propput] HRESULT Orientation([in] Microsoft.UI.Xaml.Controls.Orientation value);
                    [propget] HRESULT HorizontalChildrenAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                    [propput] HRESULT HorizontalChildrenAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                    [propget] HRESULT VerticalChildrenAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                    [propput] HRESULT VerticalChildrenAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                    [propget] HRESULT MaximumRowsOrColumns([out] [retval] INT32* value);
                    [propput] HRESULT MaximumRowsOrColumns([in] INT32 value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Controls.WrapGrid)]
                [uuid(2FE223A8-018A-5D2F-933B-A7569F824F19)]
                interface IWrapGridStatics : IInspectable
                {
                    [propget] HRESULT ItemWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ItemHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT OrientationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT HorizontalChildrenAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT VerticalChildrenAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT MaximumRowsOrColumnsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.XamlControlsResources)]
                [uuid(918CA043-F42C-5805-861B-62D6D1D0C162)]
                [version(0x00000001)]
                interface IXamlControlsResources : IInspectable
                {
                    [propget] HRESULT UseCompactResources([out] [retval] boolean* value);
                    [propput] HRESULT UseCompactResources([in] boolean value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.XamlControlsResources)]
                [uuid(CB49196C-1458-5E92-B701-D08D3E816BC5)]
                [version(0x00000001)]
                interface IXamlControlsResourcesStatics : IInspectable
                {
                    HRESULT EnsureRevealLights([in] Microsoft.UI.Xaml.UIElement* element);
                    [propget] HRESULT UseCompactResourcesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ZoomAnimationStartingEventArgs)]
                [uuid(D7D24860-6650-586B-8703-F9FBAB971EEA)]
                [version(0x00000001)]
                interface IZoomAnimationStartingEventArgs : IInspectable
                {
                    [propget] HRESULT CenterPoint([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                    [propget] HRESULT StartZoomFactor([out] [retval] FLOAT* value);
                    [propget] HRESULT EndZoomFactor([out] [retval] FLOAT* value);
                    [propget] HRESULT Animation([out] [retval] Microsoft.UI.Composition.CompositionAnimation** value);
                    [propput] HRESULT Animation([in] Microsoft.UI.Composition.CompositionAnimation* value);
                    [propget] HRESULT ZoomInfo([out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ZoomCompletedEventArgs)]
                [uuid(2583678C-8BF4-5283-8E96-D44A377286EE)]
                [version(0x00000001)]
                interface IZoomCompletedEventArgs : IInspectable
                {
                    [propget] HRESULT ZoomInfo([out] [retval] Microsoft.UI.Xaml.Controls.ZoomInfo* value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ZoomOptions)]
                [uuid(3CA21E8D-78A1-59C6-BEF9-1FE353AFC293)]
                [version(0x00000001)]
                interface IZoomOptions : IInspectable
                {
                    [propget] HRESULT AnimationMode([out] [retval] Microsoft.UI.Xaml.Controls.AnimationMode* value);
                    [propput] HRESULT AnimationMode([in] Microsoft.UI.Xaml.Controls.AnimationMode value);
                    [propget] HRESULT SnapPointsMode([out] [retval] Microsoft.UI.Xaml.Controls.SnapPointsMode* value);
                    [propput] HRESULT SnapPointsMode([in] Microsoft.UI.Xaml.Controls.SnapPointsMode value);
                }

                [exclusiveto(Microsoft.UI.Xaml.Controls.ZoomOptions)]
                [uuid(DBF01924-42FC-53AA-BB06-885C044E8A07)]
                [version(0x00000001)]
                interface IZoomOptionsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.Xaml.Controls.AnimationMode animationMode, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomOptions** value);
                    HRESULT CreateInstance2([in] Microsoft.UI.Xaml.Controls.AnimationMode animationMode, [in] Microsoft.UI.Xaml.Controls.SnapPointsMode snapPointsMode, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Controls.ZoomOptions** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass AnchorRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAnchorRequestedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass AnimatedVisualPlayer : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayer;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAppBarFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAppBarStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AppBar : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAppBar;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IAppBarOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAppBarButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAppBarButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AppBarButton : Microsoft.UI.Xaml.Controls.Button
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAppBarButton;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ICommandBarElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAppBarElementContainerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAppBarElementContainerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AppBarElementContainer : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAppBarElementContainer;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ICommandBarElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAppBarSeparatorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAppBarSeparatorStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AppBarSeparator : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAppBarSeparator;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ICommandBarElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IAppBarToggleButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAppBarToggleButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AppBarToggleButton : Microsoft.UI.Xaml.Controls.Primitives.ToggleButton
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAppBarToggleButton;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ICommandBarElement;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAutoSuggestBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AutoSuggestBox : Microsoft.UI.Xaml.Controls.ItemsControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAutoSuggestBox;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInputValidationControl;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AutoSuggestBoxQuerySubmittedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAutoSuggestBoxQuerySubmittedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AutoSuggestBoxSuggestionChosenEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAutoSuggestBoxSuggestionChosenEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgsStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AutoSuggestBoxTextChangedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IBitmapIconFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IBitmapIconStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass BitmapIcon : Microsoft.UI.Xaml.Controls.IconElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IBitmapIcon;
                }

                [composable(Microsoft.UI.Xaml.Controls.IBitmapIconSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IBitmapIconSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass BitmapIconSource : Microsoft.UI.Xaml.Controls.IconSource
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IBitmapIconSource;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IBorderStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Border : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IBorder;
                }

                [composable(Microsoft.UI.Xaml.Controls.IButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Button : Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IButton;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICalendarDatePickerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICalendarDatePickerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass CalendarDatePicker : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarDatePicker;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass CalendarDatePickerDateChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarDatePickerDateChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICalendarViewFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICalendarViewStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass CalendarView : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarView;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICalendarViewDayItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICalendarViewDayItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass CalendarViewDayItem : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarViewDayItem;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass CalendarViewDayItemChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarViewDayItemChangingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass CalendarViewSelectedDatesChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICalendarViewSelectedDatesChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass CandidateWindowBoundsChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICanvasFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICanvasStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Canvas : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICanvas;
                }

                [activatable(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICaptureElementStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass CaptureElement : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICaptureElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICheckBoxFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CheckBox : Microsoft.UI.Xaml.Controls.Primitives.ToggleButton
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICheckBox;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ChoosingGroupHeaderContainerEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ChoosingItemContainerEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IChoosingItemContainerEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CleanUpVirtualizedItemEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICleanUpVirtualizedItemEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ColorChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IColorChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IColorPickerFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IColorPickerStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ColorPicker : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IColorPicker;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IColumnDefinitionStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ColumnDefinition : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IColumnDefinition;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ColumnDefinitionCollection
                {
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition*>;
                }

                [composable(Microsoft.UI.Xaml.Controls.IComboBoxFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IComboBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ComboBox : Microsoft.UI.Xaml.Controls.Primitives.Selector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IComboBox;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IComboBoxOverrides;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInputValidationControl;
                }

                [composable(Microsoft.UI.Xaml.Controls.IComboBoxItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ComboBoxItem : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IComboBoxItem;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ComboBoxTextSubmittedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IComboBoxTextSubmittedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICommandBarFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ICommandBarStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass CommandBar : Microsoft.UI.Xaml.Controls.AppBar
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICommandBar;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICommandBarFlyoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass CommandBarFlyout : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICommandBarFlyout;
                }

                [composable(Microsoft.UI.Xaml.Controls.ICommandBarOverflowPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CommandBarOverflowPresenter : Microsoft.UI.Xaml.Controls.ItemsControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ICommandBarOverflowPresenter;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ContainerContentChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContainerContentChangingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IContentControlFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IContentControlStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ContentControl : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentControl;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IContentControlOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IContentDialogFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IContentDialogStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ContentDialog : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialog;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogButtonClickDeferral
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogButtonClickDeferral;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogButtonClickEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogButtonClickEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogClosedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogClosedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogClosingDeferral
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogClosingDeferral;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogClosingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogClosingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ContentDialogOpenedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentDialogOpenedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IContentPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IContentPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ContentPresenter : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContentPresenter;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IContentPresenterOverrides;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ContextMenuEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IContextMenuEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IControlFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IControlStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Control : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IControl;
                    [protected] interface Microsoft.UI.Xaml.Controls.IControlProtected;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IControlOverrides;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ControlTemplate : Microsoft.UI.Xaml.FrameworkTemplate
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IControlTemplate;
                }

                [composable(Microsoft.UI.Xaml.Controls.IDataTemplateSelectorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DataTemplateSelector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDataTemplateSelector;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IDataTemplateSelectorOverrides;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.IElementFactory;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DatePickedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IDatePickerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IDatePickerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass DatePicker : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePicker;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IDatePickerFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass DatePickerFlyout : Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickerFlyout;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IDatePickerFlyoutItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass DatePickerFlyoutItem : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickerFlyoutItem;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Data.ICustomPropertyProvider;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IDatePickerFlyoutPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass DatePickerFlyoutPresenter : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickerFlyoutPresenter;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass DatePickerSelectedValueChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickerSelectedValueChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass DatePickerValueChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDatePickerValueChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass DragItemsCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDragItemsCompletedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DragItemsStartingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDragItemsStartingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IDropDownButtonFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass DropDownButton : Microsoft.UI.Xaml.Controls.Button
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDropDownButton;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DynamicOverflowItemsChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IDynamicOverflowItemsChangingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IElementAnimatorFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ElementAnimator
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IElementAnimator;
                    [protected] interface Microsoft.UI.Xaml.Controls.IElementAnimatorProtected;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IElementAnimatorOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IElementFactoryFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ElementFactory : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IElementFactory;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IElementFactoryOverrides;
                    interface Microsoft.UI.Xaml.Controls.IElementFactoryShim;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ElementFactoryGetArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IElementFactoryGetArgs;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ElementFactoryRecycleArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IElementFactoryRecycleArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlipViewFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFlipViewStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass FlipView : Microsoft.UI.Xaml.Controls.Primitives.Selector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlipView;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlipViewItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FlipViewItem : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlipViewItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlowLayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFlowLayoutStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass FlowLayout : Microsoft.UI.Xaml.Controls.VirtualizingLayout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlowLayout;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IFlowLayoutOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlowLayoutStateFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass FlowLayoutState
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlowLayoutState;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlyoutFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Flyout : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlyout;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFlyoutPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFlyoutPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass FlyoutPresenter : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFlyoutPresenter;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FocusDisengagedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FocusEngagedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFontIconFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFontIconStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass FontIcon : Microsoft.UI.Xaml.Controls.IconElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFontIcon;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFontIconSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFontIconSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass FontIconSource : Microsoft.UI.Xaml.Controls.IconSource
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFontIconSource;
                }

                [composable(Microsoft.UI.Xaml.Controls.IFrameFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IFrameStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Frame : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IFrame;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.INavigate;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGridFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IGridStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Grid : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGrid;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGridViewFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GridView : Microsoft.UI.Xaml.Controls.ListViewBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGridView;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGridViewHeaderItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GridViewHeaderItem : Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGridViewHeaderItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGridViewItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GridViewItem : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGridViewItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGroupItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GroupItem : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGroupItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGroupStyleFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GroupStyle
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGroupStyle;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Data.INotifyPropertyChanged;
                }

                [composable(Microsoft.UI.Xaml.Controls.IGroupStyleSelectorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GroupStyleSelector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IGroupStyleSelector;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IGroupStyleSelectorOverrides;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HasValidationErrorsChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IHasValidationErrorsChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IHubFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IHubStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Hub : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IHub;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ISemanticZoomInformation;
                }

                [composable(Microsoft.UI.Xaml.Controls.IHubSectionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IHubSectionStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass HubSection : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IHubSection;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HubSectionCollection
                {
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.HubSection*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.HubSection*>;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass HubSectionHeaderClickEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IHubSectionHeaderClickEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IHyperlinkButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IHyperlinkButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass HyperlinkButton : Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IHyperlinkButton;
                }

                [composable(Microsoft.UI.Xaml.Controls.IIconElementFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IIconElementStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass IconElement : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IIconElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IIconSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IIconSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass IconSource : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IIconSource;
                }

                [composable(Microsoft.UI.Xaml.Controls.IIconSourceElementFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IIconSourceElementStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass IconSourceElement : Microsoft.UI.Xaml.Controls.IconElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IIconSourceElement;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IImageStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Image : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IImage;
                }

                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IIndexPathStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass IndexPath
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IIndexPath;
                    interface Windows.Foundation.IStringable;
                }

                [composable(Microsoft.UI.Xaml.Controls.IInputValidationCommandFactory, public, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputValidationCommand
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IInputValidationCommand;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IInputValidationCommandOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IInputValidationContextFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputValidationContext
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IInputValidationContext;
                }

                [composable(Microsoft.UI.Xaml.Controls.IInputValidationErrorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputValidationError
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IInputValidationError;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InputValidationErrorEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IInputValidationErrorEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass IsTextTrimmedChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ItemClickEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemClickEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ItemCollection
                {
                    [default] interface Windows.Foundation.Collections.IObservableVector<IInspectable*>;
                    interface Windows.Foundation.Collections.IVector<IInspectable*>;
                    interface Windows.Foundation.Collections.IIterable<IInspectable*>;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ItemContainerGenerator
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemContainerGenerator;
                }

                [composable(Microsoft.UI.Xaml.Controls.IItemsControlFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IItemsControlStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ItemsControl : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsControl;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IItemsControlOverrides;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IItemContainerMapping;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ItemsPanelTemplate : Microsoft.UI.Xaml.FrameworkTemplate
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsPanelTemplate;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ItemsPickedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsPickedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IItemsPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ItemsPresenter : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsPresenter;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                }

                [composable(Microsoft.UI.Xaml.Controls.IItemsRepeaterFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IItemsRepeaterStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ItemsRepeater : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsRepeater;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ItemsRepeaterElementClearingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsRepeaterElementClearingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ItemsRepeaterElementIndexChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsRepeaterElementIndexChangedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ItemsRepeaterElementPreparedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsRepeaterElementPreparedEventArgs;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ItemsRepeaterScrollHost : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsRepeaterScrollHost;
                }

                [composable(Microsoft.UI.Xaml.Controls.IItemsSourceViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ItemsSourceView
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsSourceView;
                    interface Microsoft.UI.Xaml.Interop.INotifyCollectionChanged;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IItemsStackPanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ItemsStackPanel : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsStackPanel;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IItemsWrapGridStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ItemsWrapGrid : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IItemsWrapGrid;
                }

                [composable(Microsoft.UI.Xaml.Controls.ILayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass Layout : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ILayout;
                    [protected] interface Microsoft.UI.Xaml.Controls.ILayoutProtected;
                }

                [composable(Microsoft.UI.Xaml.Controls.ILayoutContextFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass LayoutContext : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ILayoutContext;
                    [overridable] interface Microsoft.UI.Xaml.Controls.ILayoutContextOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.ILayoutPanelFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ILayoutPanelStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass LayoutPanel : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ILayoutPanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListBoxFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IListBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ListBox : Microsoft.UI.Xaml.Controls.Primitives.Selector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListBox;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListBoxItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListBoxItem : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListBoxItem;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IListPickerFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ListPickerFlyout : Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListPickerFlyout;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListPickerFlyoutPresenter : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListPickerFlyoutPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListViewFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListView : Microsoft.UI.Xaml.Controls.ListViewBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListView;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListViewBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IListViewBaseStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ListViewBase : Microsoft.UI.Xaml.Controls.Primitives.Selector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListViewBase;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.ISemanticZoomInformation;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListViewBaseHeaderItem : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListViewHeaderItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListViewHeaderItem : Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListViewHeaderItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IListViewItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ListViewItem : Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListViewItem;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IListViewPersistenceHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ListViewPersistenceHelper
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IListViewPersistenceHelper;
                }

                [activatable(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMediaElementStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass MediaElement : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMediaElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMediaPlayerElementFactory, public, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMediaPlayerElementStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass MediaPlayerElement : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMediaPlayerElement;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMediaPlayerPresenterFactory, public, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMediaPlayerPresenterStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass MediaPlayerPresenter : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMediaPlayerPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMediaTransportControlsFactory, public, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMediaTransportControlsStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass MediaTransportControls : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMediaTransportControls;
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMediaTransportControlsHelperStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass MediaTransportControlsHelper
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMediaTransportControlsHelper;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuBarFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuBarStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass MenuBar : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuBar;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuBarItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuBarItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass MenuBarItem : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuBarItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuBarItemFlyoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass MenuBarItemFlyout : Microsoft.UI.Xaml.Controls.MenuFlyout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuBarItemFlyout;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuFlyoutFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass MenuFlyout : Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyout;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuFlyoutItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuFlyoutItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass MenuFlyoutItem : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyoutItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuFlyoutItemBaseFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass MenuFlyoutItemBase : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyoutItemBase;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenterFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass MenuFlyoutPresenter : Microsoft.UI.Xaml.Controls.ItemsControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IMenuFlyoutSeparatorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass MenuFlyoutSeparator : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyoutSeparator;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IMenuFlyoutSubItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass MenuFlyoutSubItem : Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IMenuFlyoutSubItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.INavigationViewStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationView : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationView;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewBackRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewDisplayModeChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.INavigationViewItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewItem : Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewItemBaseFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.INavigationViewItemBaseStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemBase : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemBase;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemCollapsedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemCollapsedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemExpandingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemExpandingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewItemHeaderFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemHeader : Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemHeader;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewItemSeparatorFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewItemSeparator : Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewItemSeparator;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewPaneClosingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NavigationViewSelectionChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NavigationViewTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettings;
                }

                [composable(Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NonVirtualizingLayout : Microsoft.UI.Xaml.Controls.Layout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INonVirtualizingLayout;
                    [overridable] interface Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NonVirtualizingLayoutContext : Microsoft.UI.Xaml.Controls.LayoutContext
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContext;
                    [overridable] interface Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.INumberBoxFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.INumberBoxStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass NumberBox : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INumberBox;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass NumberBoxValueChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.INumberBoxValueChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPageFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPageStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Page : Microsoft.UI.Xaml.Controls.UserControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPage;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IPageOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPanelFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Panel : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.IParallaxViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IParallaxViewStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ParallaxView : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IParallaxView;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPasswordBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass PasswordBox : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPasswordBox;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInputValidationControl;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass PasswordBoxPasswordChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPasswordBoxPasswordChangingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPathIconFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPathIconStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass PathIcon : Microsoft.UI.Xaml.Controls.IconElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPathIcon;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPathIconSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPathIconSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass PathIconSource : Microsoft.UI.Xaml.Controls.IconSource
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPathIconSource;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPersonPictureFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPersonPictureStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass PersonPicture : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPersonPicture;
                }

                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass PersonPictureTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPersonPictureTemplateSettings;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PickerConfirmedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPickerConfirmedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPickerFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass PickerFlyout : Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPickerFlyout;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PickerFlyoutPresenter : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPickerFlyoutPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPivotFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPivotStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Pivot : Microsoft.UI.Xaml.Controls.ItemsControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPivot;
                }

                [composable(Microsoft.UI.Xaml.Controls.IPivotItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IPivotItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass PivotItem : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPivotItem;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PivotItemEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IPivotItemEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IProgressBarFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IProgressBarStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ProgressBar : Microsoft.UI.Xaml.Controls.Primitives.RangeBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IProgressBar;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IProgressRingStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ProgressRing : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IProgressRing;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRadioButtonFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRadioButtonStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RadioButton : Microsoft.UI.Xaml.Controls.Primitives.ToggleButton
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRadioButton;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRadioButtonsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRadioButtonsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RadioButtons : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRadioButtons;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RadioMenuFlyoutItem : Microsoft.UI.Xaml.Controls.MenuFlyoutItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRatingControlFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRatingControlStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RatingControl : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRatingControl;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRatingItemFontInfoFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRatingItemFontInfoStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RatingItemFontInfo : Microsoft.UI.Xaml.Controls.RatingItemInfo
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRatingItemFontInfo;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRatingItemImageInfoFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRatingItemImageInfoStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RatingItemImageInfo : Microsoft.UI.Xaml.Controls.RatingItemInfo
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRatingItemImageInfo;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRatingItemInfoFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RatingItemInfo : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRatingItemInfo;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRecyclePoolFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRecyclePoolStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RecyclePool
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRecyclePool;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IRecyclePoolOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRecyclingElementFactoryFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RecyclingElementFactory : Microsoft.UI.Xaml.Controls.ElementFactory
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRecyclingElementFactory;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IRecyclingElementFactoryOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRefreshContainerFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRefreshContainerStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RefreshContainer : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRefreshContainer;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass RefreshInteractionRatioChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass RefreshRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRefreshRequestedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass RefreshStateChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRefreshStateChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRefreshVisualizerFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRefreshVisualizerStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RefreshVisualizer : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRefreshVisualizer;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRelativePanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRelativePanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RelativePanel : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRelativePanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenterFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass RevealListViewItemPresenter : Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IRichEditBoxFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRichEditBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RichEditBox : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRichEditBox;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass RichEditBoxSelectionChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRichEditBoxSelectionChangingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass RichEditBoxTextChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRichTextBlockStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RichTextBlock : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRichTextBlock;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRichTextBlockOverflowStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RichTextBlockOverflow : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRichTextBlockOverflow;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IRowDefinitionStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass RowDefinition : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IRowDefinition;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass RowDefinitionCollection
                {
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.RowDefinition*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition*>;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollAnimationStartingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollAnimationStartingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollCompletedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IScrollContentPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ScrollContentPresenter : Microsoft.UI.Xaml.Controls.ContentPresenter
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollContentPresenter;
                }

                [composable(Microsoft.UI.Xaml.Controls.IScrollOptionsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ScrollOptions
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollOptions;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IScrollViewerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ScrollViewer : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollViewer;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IScrollAnchorProvider;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ScrollViewerView
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollViewerView;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ScrollViewerViewChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ScrollViewerViewChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollerAnchorRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollerAnchorRequestedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ScrollerBringingIntoViewEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IScrollerBringingIntoViewEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISectionsInViewChangedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SectionsInViewChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISectionsInViewChangedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass SelectTemplateEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISelectTemplateEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SelectionChangedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISelectionModelFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SelectionModel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISelectionModel;
                    [protected] interface Microsoft.UI.Xaml.Controls.ISelectionModelProtected;
                    interface Microsoft.UI.Xaml.Data.INotifyPropertyChanged;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass SelectionModelChildrenRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISelectionModelChildrenRequestedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass SelectionModelSelectionChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISelectionModelSelectionChangedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISemanticZoomStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass SemanticZoom : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISemanticZoom;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SemanticZoomLocation
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISemanticZoomLocation;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SemanticZoomViewChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISemanticZoomViewChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISliderFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISliderStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Slider : Microsoft.UI.Xaml.Controls.Primitives.RangeBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISlider;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISplitButtonFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISplitButtonStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SplitButton : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISplitButton;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass SplitButtonClickEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISplitButtonClickEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISplitViewFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISplitViewStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass SplitView : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISplitView;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass SplitViewPaneClosingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISplitViewPaneClosingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IStackLayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IStackLayoutStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass StackLayout : Microsoft.UI.Xaml.Controls.VirtualizingLayout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IStackLayout;
                }

                [composable(Microsoft.UI.Xaml.Controls.IStackLayoutStateFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass StackLayoutState
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IStackLayoutState;
                }

                [composable(Microsoft.UI.Xaml.Controls.IStackPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IStackPanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass StackPanel : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IStackPanel;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInsertionPanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.IStyleSelectorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass StyleSelector
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IStyleSelector;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IStyleSelectorOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISwapChainBackgroundPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass SwapChainBackgroundPanel : Microsoft.UI.Xaml.Controls.Grid
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwapChainBackgroundPanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISwapChainPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISwapChainPanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass SwapChainPanel : Microsoft.UI.Xaml.Controls.Grid
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwapChainPanel;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISwipeControlFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISwipeControlStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SwipeControl : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwipeControl;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISwipeItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISwipeItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SwipeItem : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwipeItem;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass SwipeItemInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwipeItemInvokedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISwipeItemsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISwipeItemsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass SwipeItems : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISwipeItems;
                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.SwipeItem*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.SwipeItem*>;
                }

                [activatable(Microsoft.UI.Xaml.Controls.ISymbolIconFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISymbolIconStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass SymbolIcon : Microsoft.UI.Xaml.Controls.IconElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISymbolIcon;
                }

                [composable(Microsoft.UI.Xaml.Controls.ISymbolIconSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ISymbolIconSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass SymbolIconSource : Microsoft.UI.Xaml.Controls.IconSource
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ISymbolIconSource;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITabViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITabViewStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TabView : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabView;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITabViewItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITabViewItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TabViewItem : Microsoft.UI.Xaml.Controls.ListViewItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TabViewItemTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettings;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TabViewTabCloseRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewTabCloseRequestedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TabViewTabDragCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewTabDragCompletedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TabViewTabDragStartingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewTabDragStartingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TabViewTabDroppedOutsideEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITabViewTabDroppedOutsideEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITeachingTipFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITeachingTipStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TeachingTip : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITeachingTip;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TeachingTipClosedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITeachingTipClosedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TeachingTipClosingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITeachingTipClosingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TeachingTipTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettings;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITextBlockStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass TextBlock : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextBlock;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITextBoxFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITextBoxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass TextBox : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextBox;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IInputValidationControl;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextBoxBeforeTextChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextBoxSelectionChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextBoxSelectionChangingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextBoxTextChangingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextBoxTextChangingEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass TextChangedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITextCommandBarFlyoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TextCommandBarFlyout : Microsoft.UI.Xaml.Controls.CommandBarFlyout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextCommandBarFlyout;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextCompositionChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextCompositionChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextCompositionEndedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextCompositionEndedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextCompositionStartedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextCompositionStartedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextControlCopyingToClipboardEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextControlCuttingToClipboardEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TextControlPasteEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITextControlPasteEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass TimePickedEventArgs : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePickedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITimePickerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITimePickerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass TimePicker : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePicker;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITimePickerFlyoutStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass TimePickerFlyout : Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePickerFlyout;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITimePickerFlyoutPresenterStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass TimePickerFlyoutPresenter : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePickerFlyoutPresenter;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TimePickerSelectedValueChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePickerSelectedValueChangedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass TimePickerValueChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITimePickerValueChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItemFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItemStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ToggleMenuFlyoutItem : Microsoft.UI.Xaml.Controls.MenuFlyoutItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItem;
                }

                [composable(Microsoft.UI.Xaml.Controls.IToggleSplitButtonFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IToggleSplitButtonStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ToggleSplitButton : Microsoft.UI.Xaml.Controls.SplitButton
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToggleSplitButton;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ToggleSplitButtonIsCheckedChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToggleSplitButtonIsCheckedChangedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IToggleSwitchStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ToggleSwitch : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToggleSwitch;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IToggleSwitchOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IToolTipFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IToolTipStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ToolTip : Microsoft.UI.Xaml.Controls.ContentControl
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToolTip;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IToolTipServiceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass ToolTipService
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IToolTipService;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITreeViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITreeViewStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TreeView : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeView;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewCollapsedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewCollapsedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewDragItemsCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewDragItemsStartingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewDragItemsStartingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewExpandingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewExpandingEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITreeViewItemFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITreeViewItemStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TreeViewItem : Microsoft.UI.Xaml.Controls.ListViewItem
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewItem;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewItemInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TreeViewItemTemplateSettings : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettings;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITreeViewListFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TreeViewList : Microsoft.UI.Xaml.Controls.ListView
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewList;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITreeViewNodeFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITreeViewNodeStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TreeViewNode : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewNode;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass TreeViewSelectionChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITreeViewSelectionChangedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.ITwoPaneViewFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.ITwoPaneViewStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass TwoPaneView : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.ITwoPaneView;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass UIElementCollection
                {
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Controls.IUIElementCollection;
                    [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement*>;
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement*>;
                }

                [composable(Microsoft.UI.Xaml.Controls.IUniformGridLayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IUniformGridLayoutStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass UniformGridLayout : Microsoft.UI.Xaml.Controls.VirtualizingLayout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IUniformGridLayout;
                }

                [composable(Microsoft.UI.Xaml.Controls.IUniformGridLayoutStateFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass UniformGridLayoutState
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IUniformGridLayoutState;
                }

                [composable(Microsoft.UI.Xaml.Controls.IUserControlFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IUserControlStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass UserControl : Microsoft.UI.Xaml.Controls.Control
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IUserControl;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IVariableSizedWrapGridStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass VariableSizedWrapGrid : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IVariableSizedWrapGrid;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IViewboxStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass Viewbox : Microsoft.UI.Xaml.FrameworkElement
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IViewbox;
                }

                [composable(Microsoft.UI.Xaml.Controls.IVirtualizingLayoutFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass VirtualizingLayout : Microsoft.UI.Xaml.Controls.Layout
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IVirtualizingLayout;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IVirtualizingLayoutOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass VirtualizingLayoutContext : Microsoft.UI.Xaml.Controls.LayoutContext
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContext;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextOverrides;
                }

                [composable(Microsoft.UI.Xaml.Controls.IVirtualizingPanelFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass VirtualizingPanel : Microsoft.UI.Xaml.Controls.Panel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IVirtualizingPanel;
                    [protected] interface Microsoft.UI.Xaml.Controls.IVirtualizingPanelProtected;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IVirtualizingPanelOverrides;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IVirtualizingStackPanelStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass VirtualizingStackPanel : Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IVirtualizingStackPanel;
                    [overridable] interface Microsoft.UI.Xaml.Controls.IVirtualizingStackPanelOverrides;
                }


                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IWrapGridStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass WrapGrid : Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IWrapGrid;
                }

                [activatable(0x00000001)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics, 0x00000001)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass XamlControlsResources : Microsoft.UI.Xaml.ResourceDictionary
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IXamlControlsResources;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ZoomAnimationStartingEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IZoomAnimationStartingEventArgs;
                }

                [marshaling_behavior(agile)]
                [version(0x00000001)]
                runtimeclass ZoomCompletedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IZoomCompletedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Controls.IZoomOptionsFactory, public, 0x00000001)]
                [marshaling_behavior(agile)]
                [threading(both)]
                [version(0x00000001)]
                runtimeclass ZoomOptions
                {
                    [default] interface Microsoft.UI.Xaml.Controls.IZoomOptions;
                }
            }
        }
    }
}
