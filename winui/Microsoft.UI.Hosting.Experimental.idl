//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.Foundation.idl";
import "Microsoft.UI.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Composition.Experimental.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Windows.UI.Core.idl";

// Forward Declare
namespace Microsoft
{
    namespace Foundation
    {
        apicontract LiftedExperimentalContract;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Compositor;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            namespace Experimental
            {
                runtimeclass ExpCompositionContent;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass Visual;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        typedef struct DisplayId DisplayId;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpFocusNavigationRequest;

                runtimeclass ExpFocusNavigationResult;

                runtimeclass ExpInputSite;

                runtimeclass ExpNavigateFocusRequestedEventArgs;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        typedef struct WindowId WindowId;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass CoreWindow;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                interface IExpContentBridge;

                interface IExpCoreWindowBridge;

                interface IExpCoreWindowBridgeStatics;

                interface IExpDesktopWindowBridge;

                interface IExpDesktopWindowBridgeStatics;

                interface IExpSystemVisualBridge;

                interface IExpSystemVisualBridgeStatics;

                runtimeclass ExpCoreWindowBridge;

                runtimeclass ExpDesktopWindowBridge;

                runtimeclass ExpSystemVisualBridge;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                declare
                {
                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge*, IInspectable*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Hosting
        {
            namespace Experimental
            {
                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [uuid(5B85BA18-F850-5621-919E-E545723AB94E)]
                interface IExpContentBridge : IInspectable
                    requires
                        Windows.Foundation.IClosable
                {
                    HRESULT Connect([in] Microsoft.UI.Composition.Experimental.ExpCompositionContent* content, [in] Microsoft.UI.Input.Experimental.ExpInputSite* inputSite);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge)]
                [uuid(87B0E524-DF7F-55E6-B8DF-F8032FC115CE)]
                interface IExpCoreWindowBridge : IInspectable
                {
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge)]
                [uuid(B888061B-D5DC-58A8-9E44-C881EA3AAECB)]
                interface IExpCoreWindowBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Windows.UI.Core.CoreWindow* coreWindow, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge)]
                [uuid(CD7C2FED-95AE-532D-90CA-92C4DC3A09B9)]
                interface IExpDesktopWindowBridge : IInspectable
                {
                    [propget] HRESULT AppliedScaleFactor([out] [retval] FLOAT* value);
                    [propget] HRESULT ChildWindowId([out] [retval] Microsoft.UI.WindowId* value);
                    [propget] HRESULT TopLevelDisplayId([out] [retval] Microsoft.UI.DisplayId* value);
                    HRESULT SetOverrideScaleFactor([in] FLOAT value);
                    HRESULT NotifyHostActivationChange([in] boolean active);
                    HRESULT NavigateFocus([in] Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest* request, [out] [retval] Microsoft.UI.Input.Experimental.ExpFocusNavigationResult** result);
                    HRESULT PreTranslateKeyboardMessage([in] UINT64 windowHandle, [in] UINT32 keyboardMessage, [in] UINT32 virtualKey, [in] UINT64 keyInfo, [out] [retval] boolean* result);
                    [eventadd] HRESULT TakeFocusRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge*, Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TakeFocusRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT TopLevelStateChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT TopLevelStateChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge)]
                [uuid(4DD9D544-3DDC-56B9-9682-6FBDCAE9B464)]
                interface IExpDesktopWindowBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [in] Microsoft.UI.WindowId parentWindowId, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge)]
                [uuid(C1AD453A-881B-500A-8315-A3563BBEF753)]
                interface IExpSystemVisualBridge : IInspectable
                {
                    [propget] HRESULT BridgeVisual([out] [retval] Microsoft.UI.Composition.Visual** value);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [exclusiveto(Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge)]
                [uuid(29469AC9-FE18-540C-B0A8-060BF7618D65)]
                interface IExpSystemVisualBridgeStatics : IInspectable
                {
                    HRESULT Create([in] Microsoft.UI.Composition.Compositor* compositor, [out] [retval] Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge** result);
                    HRESULT IsSupported([out] [retval] boolean* result);
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpCoreWindowBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridge;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridge;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpDesktopWindowBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridge;
                    interface Microsoft.UI.Hosting.Experimental.IExpContentBridge;
                    interface Windows.Foundation.IClosable;
                }

                [contract(Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridgeStatics, Microsoft.Foundation.LiftedExperimentalContract, 1.0)]
                [threading(both)]
                runtimeclass ExpSystemVisualBridge
                {
                    [default] interface Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridge;
                    interface Windows.Foundation.IClosable;
                }
            }
        }
    }
}
