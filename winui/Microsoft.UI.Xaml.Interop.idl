//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Xaml.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            apicontract WinUIContract;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                typedef enum NotifyCollectionChangedAction NotifyCollectionChangedAction;

                delegate BindableVectorChangedEventHandler;

                delegate NotifyCollectionChangedEventHandler;

                interface IBindableIterable;

                interface IBindableIterator;

                interface IBindableObservableVector;

                interface IBindableVector;

                interface IBindableVectorView;

                interface INotifyCollectionChanged;

                interface INotifyCollectionChangedEventArgs;

                interface INotifyCollectionChangedEventArgsFactory;

                runtimeclass NotifyCollectionChangedEventArgs;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum NotifyCollectionChangedAction
                {
                    Add_d = 0
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(624CD4E1-D007-43B1-9C03-AF4D3E6258C5)]
                delegate
                    HRESULT BindableVectorChangedEventHandler([in] Microsoft.UI.Xaml.Interop.IBindableObservableVector* vector, [in] IInspectable* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(8B0909DC-2005-5D93-BF8A-725F017BAA8A)]
                delegate
                    HRESULT NotifyCollectionChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(036D2C08-DF29-41AF-8AA2-D774BE62BA6E)]
                interface IBindableIterable : IInspectable
                {
                    HRESULT First([out] [retval] Microsoft.UI.Xaml.Interop.IBindableIterator** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(6A1D6C07-076D-49F2-8314-F52C9C9A8332)]
                interface IBindableIterator : IInspectable
                {
                    [propget] HRESULT Current([out] [retval] IInspectable** value);
                    [propget] HRESULT HasCurrent([out] [retval] boolean* value);
                    HRESULT MoveNext([out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(FE1EB536-7E7F-4F90-AC9A-474984AAE513)]
                interface IBindableObservableVector : IInspectable
                    requires
                        Microsoft.UI.Xaml.Interop.IBindableVector,
                        Microsoft.UI.Xaml.Interop.IBindableIterable
                {
                    [eventadd] HRESULT VectorChanged([in] Microsoft.UI.Xaml.Interop.BindableVectorChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT VectorChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(393DE7DE-6FD0-4C0D-BB71-47244A113E94)]
                interface IBindableVector : IInspectable
                    requires
                        Microsoft.UI.Xaml.Interop.IBindableIterable
                {
                    HRESULT GetAt([in] UINT32 index, [out] [retval] IInspectable** result);
                    [propget] HRESULT Size([out] [retval] UINT32* value);
                    HRESULT GetView([out] [retval] Microsoft.UI.Xaml.Interop.IBindableVectorView** result);
                    HRESULT IndexOf([in] IInspectable* value, [out] UINT32* index, [out] [retval] boolean* returnValue);
                    HRESULT SetAt([in] UINT32 index, [in] IInspectable* value);
                    HRESULT InsertAt([in] UINT32 index, [in] IInspectable* value);
                    HRESULT RemoveAt([in] UINT32 index);
                    HRESULT Append([in] IInspectable* value);
                    HRESULT RemoveAtEnd();
                    HRESULT Clear();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(346DD6E7-976E-4BC3-815D-ECE243BC0F34)]
                interface IBindableVectorView : IInspectable
                    requires
                        Microsoft.UI.Xaml.Interop.IBindableIterable
                {
                    HRESULT GetAt([in] UINT32 index, [out] [retval] IInspectable** result);
                    [propget] HRESULT Size([out] [retval] UINT32* value);
                    HRESULT IndexOf([in] IInspectable* value, [out] UINT32* index, [out] [retval] boolean* returnValue);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(530155E1-28A5-5693-87CE-30724D95A06D)]
                interface INotifyCollectionChanged : IInspectable
                {
                    [eventadd] HRESULT CollectionChanged([in] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CollectionChanged([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs)]
                [uuid(DA049FF2-D2E0-5FE8-8C7B-F87F26060B6F)]
                interface INotifyCollectionChangedEventArgs : IInspectable
                {
                    [propget] HRESULT Action([out] [retval] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedAction* value);
                    [propget] HRESULT NewItems([out] [retval] Microsoft.UI.Xaml.Interop.IBindableVector** value);
                    [propget] HRESULT OldItems([out] [retval] Microsoft.UI.Xaml.Interop.IBindableVector** value);
                    [propget] HRESULT NewStartingIndex([out] [retval] INT32* value);
                    [propget] HRESULT OldStartingIndex([out] [retval] INT32* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs)]
                [uuid(5108EBA4-4892-5A20-8374-A96815E0FD27)]
                interface INotifyCollectionChangedEventArgsFactory : IInspectable
                {
                    HRESULT CreateInstanceWithAllParameters([in] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedAction action, [in] Microsoft.UI.Xaml.Interop.IBindableVector* newItems, [in] Microsoft.UI.Xaml.Interop.IBindableVector* oldItems, [in] INT32 newIndex, [in] INT32 oldIndex, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Interop.NotifyCollectionChangedEventArgs** value);
                }

                [composable(Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass NotifyCollectionChangedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Interop.INotifyCollectionChangedEventArgs;
                }
            }
        }
    }
}
