//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Media.idl";
import "Windows.ApplicationModel.Background.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.Storage.Streams.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DependencyProperty;

            delegate ExceptionRoutedEventHandler;

            apicontract PrivateApiContract;

            runtimeclass ResourceDictionary;

            delegate RoutedEventHandler;

            runtimeclass UIElement;

            apicontract WinUIContract;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Background
        {
            interface IBackgroundTaskInstance;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;

            interface IRandomAccessStream;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    typedef enum BitmapCreateOptions BitmapCreateOptions;

                    typedef enum DecodePixelType DecodePixelType;

                    typedef enum SvgImageSourceLoadStatus SvgImageSourceLoadStatus;

                    delegate DownloadProgressEventHandler;

                    interface IBitmapImage;

                    interface IBitmapImageFactory;

                    interface IBitmapImageStatics;

                    interface IBitmapSource;

                    interface IBitmapSourceFactory;

                    interface IBitmapSourceStatics;

                    interface IDownloadProgressEventArgs;

                    interface IRenderTargetBitmap;

                    interface IRenderTargetBitmapStatics;

                    interface ISoftwareBitmapSource;

                    interface ISurfaceImageSource;

                    interface ISurfaceImageSourceFactory;

                    interface ISvgImageSource;

                    interface ISvgImageSourceFactory;

                    interface ISvgImageSourceFailedEventArgs;

                    interface ISvgImageSourceOpenedEventArgs;

                    interface ISvgImageSourceStatics;

                    interface IVirtualSurfaceImageSource;

                    interface IVirtualSurfaceImageSourceFactory;

                    interface IWriteableBitmap;

                    interface IWriteableBitmapFactory;

                    interface IXamlRenderingBackgroundTask;

                    interface IXamlRenderingBackgroundTaskFactory;

                    interface IXamlRenderingBackgroundTaskOverrides;

                    interface IXamlRenderingBackgroundTaskStaticsPrivate;

                    runtimeclass BitmapImage;

                    runtimeclass BitmapSource;

                    runtimeclass DownloadProgressEventArgs;

                    runtimeclass RenderTargetBitmap;

                    runtimeclass SoftwareBitmapSource;

                    runtimeclass SurfaceImageSource;

                    runtimeclass SvgImageSource;

                    runtimeclass SvgImageSourceFailedEventArgs;

                    runtimeclass SvgImageSourceOpenedEventArgs;

                    runtimeclass VirtualSurfaceImageSource;

                    runtimeclass WriteableBitmap;

                    runtimeclass XamlRenderingBackgroundTask;
                }
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    declare
                    {
                        interface Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource*, Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs*>;

                        interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource*, Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs*>;
                    }
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [flags]
                    enum BitmapCreateOptions
                    {
                        None             = 0x0,
                        IgnoreImageCache = 0x8
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum DecodePixelType
                    {
                        Physical = 0,
                        Logical  = 1
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    enum SvgImageSourceLoadStatus
                    {
                        Success       = 0,
                        NetworkError  = 1,
                        InvalidFormat = 2,
                        Other         = 3
                    };

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [uuid(9A8E4AF5-B124-5205-8AE9-3496E063C569)]
                    delegate
                        HRESULT DownloadProgressEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs* e);

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(5CC29916-A411-5BC2-A3C5-A00D99A59DA8)]
                    interface IBitmapImage : IInspectable
                    {
                        [propget] HRESULT CreateOptions([out] [retval] Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions* value);
                        [propput] HRESULT CreateOptions([in] Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions value);
                        [propget] HRESULT UriSource([out] [retval] Windows.Foundation.Uri** value);
                        [propput] HRESULT UriSource([in] Windows.Foundation.Uri* value);
                        [propget] HRESULT DecodePixelWidth([out] [retval] INT32* value);
                        [propput] HRESULT DecodePixelWidth([in] INT32 value);
                        [propget] HRESULT DecodePixelHeight([out] [retval] INT32* value);
                        [propput] HRESULT DecodePixelHeight([in] INT32 value);
                        [propget] HRESULT DecodePixelType([out] [retval] Microsoft.UI.Xaml.Media.Imaging.DecodePixelType* value);
                        [propput] HRESULT DecodePixelType([in] Microsoft.UI.Xaml.Media.Imaging.DecodePixelType value);
                        [propget] HRESULT IsAnimatedBitmap([out] [retval] boolean* value);
                        [propget] HRESULT IsPlaying([out] [retval] boolean* value);
                        [propget] HRESULT AutoPlay([out] [retval] boolean* value);
                        [propput] HRESULT AutoPlay([in] boolean value);
                        [eventadd] HRESULT DownloadProgress([in] Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT DownloadProgress([in] EventRegistrationToken token);
                        [eventadd] HRESULT ImageOpened([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ImageOpened([in] EventRegistrationToken token);
                        [eventadd] HRESULT ImageFailed([in] Microsoft.UI.Xaml.ExceptionRoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT ImageFailed([in] EventRegistrationToken token);
                        HRESULT Play();
                        HRESULT Stop();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(F037E0E9-F229-522E-95C9-DA2211A14B05)]
                    interface IBitmapImageFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithUriSource([in] Windows.Foundation.Uri* uriSource, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.BitmapImage** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapImage)]
                    [uuid(4BCF71A9-1897-51DC-8E3F-2C5C796D1CD9)]
                    interface IBitmapImageStatics : IInspectable
                    {
                        [propget] HRESULT CreateOptionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT UriSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DecodePixelWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DecodePixelHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT DecodePixelTypeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsAnimatedBitmapProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT IsPlayingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT AutoPlayProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(8424269D-9B82-534F-8FEA-AF5B5EF96BF2)]
                    interface IBitmapSource : IInspectable
                    {
                        [propget] HRESULT PixelWidth([out] [retval] INT32* value);
                        [propget] HRESULT PixelHeight([out] [retval] INT32* value);
                        HRESULT SetSource([in] Windows.Storage.Streams.IRandomAccessStream* streamSource);
                        HRESULT SetSourceAsync([in] Windows.Storage.Streams.IRandomAccessStream* streamSource, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(0392F025-1868-5876-AD67-12E94A8DA5BF)]
                    interface IBitmapSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.BitmapSource** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.BitmapSource)]
                    [uuid(EFA3745E-4400-5F0B-BDC7-3F2911A3D719)]
                    interface IBitmapSourceStatics : IInspectable
                    {
                        [propget] HRESULT PixelWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PixelHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs)]
                    [uuid(9A0EA80B-1A17-50D5-83F3-377738212619)]
                    interface IDownloadProgressEventArgs : IInspectable
                    {
                        [propget] HRESULT Progress([out] [retval] INT32* value);
                        [propput] HRESULT Progress([in] INT32 value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap)]
                    [uuid(CF10407D-FA8B-57A3-9574-710529AE0B04)]
                    interface IRenderTargetBitmap : IInspectable
                    {
                        [propget] HRESULT PixelWidth([out] [retval] INT32* value);
                        [propget] HRESULT PixelHeight([out] [retval] INT32* value);
                        [overload("RenderAsync")] HRESULT RenderAsync([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                        [overload("RenderAsync")] HRESULT RenderToSizeAsync([in] Microsoft.UI.Xaml.UIElement* element, [in] INT32 scaledWidth, [in] INT32 scaledHeight, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                        HRESULT GetPixelsAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** operation);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap)]
                    [uuid(83E822E4-9F84-5986-93B0-E4F7019C367D)]
                    interface IRenderTargetBitmapStatics : IInspectable
                    {
                        [propget] HRESULT PixelWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT PixelHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource)]
                    [uuid(A6ACA802-1F24-5A1E-BF08-781A85ED5511)]
                    interface ISoftwareBitmapSource : IInspectable
                    {
                        HRESULT SetBitmapAsync([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [out] [retval] Windows.Foundation.IAsyncAction** operation);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource)]
                    [uuid(AC078D9C-D0E0-5FF9-B73E-98E82E4C8D36)]
                    interface ISurfaceImageSource : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource)]
                    [uuid(09A26ED2-11B3-5EF1-AC56-20D064CCCA34)]
                    interface ISurfaceImageSourceFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource** value);
                        HRESULT CreateInstanceWithDimensionsAndOpacity([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] boolean isOpaque, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SvgImageSource)]
                    [uuid(D5B61D3C-B68D-53A2-B07B-BA6ADFDD5887)]
                    interface ISvgImageSource : IInspectable
                    {
                        [propget] HRESULT UriSource([out] [retval] Windows.Foundation.Uri** value);
                        [propput] HRESULT UriSource([in] Windows.Foundation.Uri* value);
                        [propget] HRESULT RasterizePixelWidth([out] [retval] DOUBLE* value);
                        [propput] HRESULT RasterizePixelWidth([in] DOUBLE value);
                        [propget] HRESULT RasterizePixelHeight([out] [retval] DOUBLE* value);
                        [propput] HRESULT RasterizePixelHeight([in] DOUBLE value);
                        [eventadd] HRESULT Opened([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource*, Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT Opened([in] EventRegistrationToken token);
                        [eventadd] HRESULT OpenFailed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource*, Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                        [eventremove] HRESULT OpenFailed([in] EventRegistrationToken token);
                        HRESULT SetSourceAsync([in] Windows.Storage.Streams.IRandomAccessStream* streamSource, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus>** operation);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SvgImageSource)]
                    [uuid(2F85673F-AC64-570D-9BDA-94FA082EEAD9)]
                    interface ISvgImageSourceFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.SvgImageSource** value);
                        HRESULT CreateInstanceWithUriSource([in] Windows.Foundation.Uri* uriSource, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.SvgImageSource** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs)]
                    [uuid(76E66278-7804-5439-A50D-14C5BA896714)]
                    interface ISvgImageSourceFailedEventArgs : IInspectable
                    {
                        [propget] HRESULT Status([out] [retval] Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus* value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs)]
                    [uuid(1C9860D5-38D0-5B21-8D48-072F1E254E39)]
                    interface ISvgImageSourceOpenedEventArgs : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.SvgImageSource)]
                    [uuid(E3AD1068-F4C6-5513-A777-2980F0BA41BD)]
                    interface ISvgImageSourceStatics : IInspectable
                    {
                        [propget] HRESULT UriSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RasterizePixelWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                        [propget] HRESULT RasterizePixelHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource)]
                    [uuid(E4FF96A6-FEDE-589C-A007-4178B53B6739)]
                    interface IVirtualSurfaceImageSource : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource)]
                    [uuid(08490F2C-04A8-5031-B9C7-707060D7CD48)]
                    interface IVirtualSurfaceImageSourceFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource** value);
                        HRESULT CreateInstanceWithDimensionsAndOpacity([in] INT32 pixelWidth, [in] INT32 pixelHeight, [in] boolean isOpaque, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap)]
                    [uuid(78C824A9-0E43-5F1E-93BC-D046CCA82B7E)]
                    interface IWriteableBitmap : IInspectable
                    {
                        [propget] HRESULT PixelBuffer([out] [retval] Windows.Storage.Streams.IBuffer** value);
                        HRESULT Invalidate();
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap)]
                    [uuid(26E861D9-B080-512B-96C4-80050E7E08D1)]
                    interface IWriteableBitmapFactory : IInspectable
                    {
                        HRESULT CreateInstanceWithDimensions([in] INT32 pixelWidth, [in] INT32 pixelHeight, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(7807000C-A050-5121-AC74-3322D5358E39)]
                    interface IXamlRenderingBackgroundTask : IInspectable
                    {
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(205247A3-9FFE-599A-A21A-7181442A9D75)]
                    interface IXamlRenderingBackgroundTaskFactory : IInspectable
                    {
                        HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask** value);
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [exclusiveto(Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask)]
                    [uuid(18733237-324B-57C0-89B2-5875472ACC80)]
                    interface IXamlRenderingBackgroundTaskOverrides : IInspectable
                    {
                        HRESULT OnRun([in] Windows.ApplicationModel.Background.IBackgroundTaskInstance* taskInstance);
                    }

                    [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                    [uuid(F5FBD758-16CA-5318-BE90-C3D76A127DCA)]
                    interface IXamlRenderingBackgroundTaskStaticsPrivate : IInspectable
                    {
                        [propget] HRESULT Resources([out] [retval] Microsoft.UI.Xaml.ResourceDictionary** value);
                        HRESULT EnableStandaloneHosting();
                        HRESULT SetScalePercentage([in] UINT32 percentage);
                    }

                    [activatable(Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass BitmapImage : Microsoft.UI.Xaml.Media.Imaging.BitmapSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IBitmapImage;
                    }

                    [composable(Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass BitmapSource : Microsoft.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IBitmapSource;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    runtimeclass DownloadProgressEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass RenderTargetBitmap : Microsoft.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmap;
                    }

                    [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass SoftwareBitmapSource : Microsoft.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSource;
                        [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.Foundation.IClosable;
                    }

                    [composable(Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass SurfaceImageSource : Microsoft.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource;
                    }

                    [composable(Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [static(Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [threading(both)]
                    runtimeclass SvgImageSource : Microsoft.UI.Xaml.Media.ImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.ISvgImageSource;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    runtimeclass SvgImageSourceFailedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgs;
                    }

                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    runtimeclass SvgImageSourceOpenedEventArgs
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgs;
                    }

                    [activatable(Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass VirtualSurfaceImageSource : Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
                    }

                    [activatable(Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass WriteableBitmap : Microsoft.UI.Xaml.Media.Imaging.BitmapSource
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmap;
                    }

                    [composable(Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                    [marshaling_behavior(agile)]
                    [threading(both)]
                    runtimeclass XamlRenderingBackgroundTask
                    {
                        [default] interface Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask;
                        [overridable] interface Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides;
                    }
                }
            }
        }
    }
}
