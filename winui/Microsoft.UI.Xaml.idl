//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.System.idl";
import "Microsoft.UI.Composition.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Microsoft.UI.Xaml.Automation.Peers.idl";
import "Microsoft.UI.Xaml.Controls.idl";
import "Microsoft.UI.Xaml.Controls.Primitives.idl";
import "Microsoft.UI.Xaml.Data.idl";
import "Microsoft.UI.Xaml.Hosting.idl";
import "Microsoft.UI.Xaml.Input.idl";
import "Microsoft.UI.Xaml.Media.idl";
import "Microsoft.UI.Xaml.Media.Animation.idl";
import "Microsoft.UI.Xaml.Media.Imaging.idl";
import "Microsoft.UI.Xaml.Media.Media3D.idl";
import "Windows.ApplicationModel.idl";
import "Windows.ApplicationModel.Activation.idl";
import "Windows.ApplicationModel.Core.idl";
import "Windows.ApplicationModel.DataTransfer.idl";
import "Windows.ApplicationModel.DataTransfer.DragDrop.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Graphics.DirectX.idl";
import "Windows.Graphics.Imaging.idl";
import "Windows.UI.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Xaml.Interop.idl";

// Forward Declare
namespace Microsoft
{
    namespace System
    {
        runtimeclass DispatcherQueue;
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Composition
        {
            runtimeclass AnimationPropertyInfo;

            runtimeclass Compositor;

            interface IAnimationObject;

            interface ICompositionAnimationBase;

            interface IVisualElement;

            interface IVisualElement2;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpPointerPoint;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Automation
            {
                namespace Peers
                {
                    runtimeclass AutomationPeer;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass ContainerContentChangingEventArgs;

                runtimeclass Control;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                namespace Primitives
                {
                    typedef enum ComponentResourceLocation ComponentResourceLocation;

                    runtimeclass FlyoutBase;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Data
            {
                runtimeclass BindingBase;

                runtimeclass BindingExpression;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Hosting
            {
                runtimeclass XamlIsland;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                runtimeclass AccessKeyDisplayDismissedEventArgs;

                runtimeclass AccessKeyDisplayRequestedEventArgs;

                runtimeclass AccessKeyInvokedEventArgs;

                runtimeclass CharacterReceivedRoutedEventArgs;

                runtimeclass ContextRequestedEventArgs;

                delegate DoubleTappedEventHandler;

                runtimeclass GettingFocusEventArgs;

                delegate HoldingEventHandler;

                delegate KeyEventHandler;

                typedef enum KeyTipPlacementMode KeyTipPlacementMode;

                runtimeclass KeyboardAccelerator;

                runtimeclass KeyboardAcceleratorInvokedEventArgs;

                typedef enum KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode;

                typedef enum KeyboardNavigationMode KeyboardNavigationMode;

                runtimeclass LosingFocusEventArgs;

                delegate ManipulationCompletedEventHandler;

                delegate ManipulationDeltaEventHandler;

                delegate ManipulationInertiaStartingEventHandler;

                typedef enum ManipulationModes ManipulationModes;

                delegate ManipulationStartedEventHandler;

                delegate ManipulationStartingEventHandler;

                runtimeclass NoFocusCandidateFoundEventArgs;

                runtimeclass Pointer;

                delegate PointerEventHandler;

                runtimeclass ProcessKeyboardAcceleratorEventArgs;

                delegate RightTappedEventHandler;

                delegate TappedEventHandler;

                typedef enum XYFocusKeyboardNavigationMode XYFocusKeyboardNavigationMode;

                typedef enum XYFocusNavigationStrategy XYFocusNavigationStrategy;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Animation
                {
                    runtimeclass EasingFunctionBase;

                    runtimeclass Storyboard;

                    runtimeclass TransitionCollection;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass Brush;

                runtimeclass CacheMode;

                typedef enum ElementCompositeMode ElementCompositeMode;

                runtimeclass GeneralTransform;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    runtimeclass BitmapImage;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Media3D
                {
                    runtimeclass Transform3D;
                }
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                runtimeclass Projection;

                runtimeclass RectangleGeometry;

                runtimeclass Shadow;

                runtimeclass Transform;

                runtimeclass XamlLight;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Activation
        {
            runtimeclass BackgroundActivatedEventArgs;

            runtimeclass CachedFileUpdaterActivatedEventArgs;

            runtimeclass FileActivatedEventArgs;

            runtimeclass FileOpenPickerActivatedEventArgs;

            runtimeclass FileSavePickerActivatedEventArgs;

            interface IActivatedEventArgs;

            runtimeclass LaunchActivatedEventArgs;

            runtimeclass SearchActivatedEventArgs;

            runtimeclass ShareTargetActivatedEventArgs;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Core
        {
            interface IFrameworkView;

            interface IFrameworkViewSource;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace DataTransfer
        {
            runtimeclass DataPackage;

            typedef enum DataPackageOperation DataPackageOperation;

            runtimeclass DataPackageView;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        namespace DataTransfer
        {
            namespace DragDrop
            {
                typedef enum DragDropModifiers DragDropModifiers;
            }
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        runtimeclass EnteredBackgroundEventArgs;

        runtimeclass LeavingBackgroundEventArgs;

        runtimeclass SuspendingEventArgs;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Numerics
        {
            typedef struct Matrix4x4 Matrix4x4;

            typedef struct Vector2 Vector2;

            typedef struct Vector3 Vector3;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;

        typedef struct Size Size;

        typedef struct TimeSpan TimeSpan;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace DirectX
        {
            typedef enum DirectXPixelFormat DirectXPixelFormat;
        }
    }
}
namespace Windows
{
    namespace Graphics
    {
        namespace Imaging
        {
            runtimeclass SoftwareBitmap;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            runtimeclass CoreCursor;

            runtimeclass CoreDispatcher;

            runtimeclass CoreWindow;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Interop
            {
                typedef struct TypeName TypeName;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            apicontract PrivateApiContract;

            apicontract WinUIContract;

            typedef enum ApplicationHighContrastAdjustment ApplicationHighContrastAdjustment;

            typedef enum ApplicationRequiresPointerMode ApplicationRequiresPointerMode;

            typedef enum ApplicationTheme ApplicationTheme;

            typedef enum AutomationTextAttributesEnum AutomationTextAttributesEnum;

            typedef enum DurationType DurationType;

            typedef enum ElementHighContrastAdjustment ElementHighContrastAdjustment;

            typedef enum ElementSoundKind ElementSoundKind;

            typedef enum ElementSoundMode ElementSoundMode;

            typedef enum ElementSoundPlayerState ElementSoundPlayerState;

            typedef enum ElementSpatialAudioMode ElementSpatialAudioMode;

            typedef enum ElementTheme ElementTheme;

            typedef enum FlowDirection FlowDirection;

            typedef enum FocusState FocusState;

            typedef enum FocusVisualKind FocusVisualKind;

            typedef enum FontCapitals FontCapitals;

            typedef enum FontEastAsianLanguage FontEastAsianLanguage;

            typedef enum FontEastAsianWidths FontEastAsianWidths;

            typedef enum FontFraction FontFraction;

            typedef enum FontNumeralAlignment FontNumeralAlignment;

            typedef enum FontNumeralStyle FontNumeralStyle;

            typedef enum FontVariants FontVariants;

            typedef enum GridUnitType GridUnitType;

            typedef enum HorizontalAlignment HorizontalAlignment;

            typedef enum LineStackingStrategy LineStackingStrategy;

            typedef enum OpticalMarginAlignment OpticalMarginAlignment;

            typedef enum TextAlignment TextAlignment;

            typedef enum TextLineBounds TextLineBounds;

            typedef enum TextReadingOrder TextReadingOrder;

            typedef enum TextTrimming TextTrimming;

            typedef enum TextWrapping TextWrapping;

            typedef enum TransitionParent TransitionParent;

            typedef enum TransitionTrigger TransitionTrigger;

            typedef enum Vector3TransitionComponents Vector3TransitionComponents;

            typedef enum VerticalAlignment VerticalAlignment;

            typedef enum Visibility Visibility;

            typedef enum WindowActivationState WindowActivationState;

            typedef struct CornerRadius CornerRadius;

            typedef struct Duration Duration;

            typedef struct GridLength GridLength;

            typedef struct Thickness Thickness;

            delegate ApplicationInitializationCallback;

            delegate BindingFailedEventHandler;

            delegate CreateDefaultValueCallback;

            delegate DependencyPropertyChangedCallback;

            delegate DependencyPropertyChangedEventHandler;

            delegate DragEventHandler;

            delegate EnteredBackgroundEventHandler;

            delegate ExceptionRoutedEventHandler;

            delegate LeavingBackgroundEventHandler;

            delegate PropertyChangedCallback;

            delegate RoutedEventHandler;

            delegate SizeChangedEventHandler;

            delegate SuspendingEventHandler;

            delegate UnhandledExceptionEventHandler;

            delegate VisualStateChangedEventHandler;

            interface IAdaptiveTrigger;

            interface IAdaptiveTriggerFactory;

            interface IAdaptiveTriggerStatics;

            interface IApplication;

            interface IApplicationFactory;

            interface IApplicationInitializationCallbackParams;

            interface IApplicationOverrides;

            interface IApplicationStatics;

            interface IAtlasRequestCallback;

            interface IBindingFailedEventArgs;

            interface IBringIntoViewOptions;

            interface IBringIntoViewRequestedEventArgs;

            interface IBrushTransition;

            interface IBrushTransitionFactory;

            interface IColorPaletteResources;

            interface IColorPaletteResourcesFactory;

            interface ICornerRadiusHelper;

            interface ICornerRadiusHelperStatics;

            interface IDataContextChangedEventArgs;

            interface IDataTemplate;

            interface IDataTemplateExtension;

            interface IDataTemplateFactory;

            interface IDataTemplateKey;

            interface IDataTemplateKeyFactory;

            interface IDataTemplateStatics;

            interface IDebugSettings;

            interface IDependencyObject;

            interface IDependencyObjectCollectionFactory;

            interface IDependencyObjectFactory;

            interface IDependencyProperty;

            interface IDependencyPropertyChangedEventArgs;

            interface IDependencyPropertyStatics;

            interface IDispatcherTimer;

            interface IDispatcherTimerFactory;

            interface IDragEventArgs;

            interface IDragOperationDeferral;

            interface IDragStartingEventArgs;

            interface IDragUI;

            interface IDragUIOverride;

            interface IDropCompletedEventArgs;

            interface IDurationHelper;

            interface IDurationHelperStatics;

            interface IDxamlCoreTestHooks;

            interface IDxamlCoreTestHooksStatics;

            interface IEffectiveViewportChangedEventArgs;

            interface IElementFactory;

            interface IElementFactoryGetArgs;

            interface IElementFactoryGetArgsFactory;

            interface IElementFactoryRecycleArgs;

            interface IElementFactoryRecycleArgsFactory;

            interface IElementSoundPlayer;

            interface IElementSoundPlayerStatics;

            interface IElementSoundPlayerStaticsPrivate;

            interface IEventTrigger;

            interface IExceptionRoutedEventArgs;

            interface IExceptionRoutedEventArgsFactory;

            interface IFrameworkApplicationPrivate;

            interface IFrameworkApplicationStaticsPrivate;

            interface IFrameworkElement;

            interface IFrameworkElementFactory;

            interface IFrameworkElementOverrides;

            interface IFrameworkElementProtected;

            interface IFrameworkElementStatics;

            interface IFrameworkTemplate;

            interface IFrameworkTemplateFactory;

            interface IFrameworkTemplatePrivate;

            interface IFrameworkView;

            interface IFrameworkViewSource;

            interface IGridLengthHelper;

            interface IGridLengthHelperStatics;

            interface ILaunchActivatedEventArgs;

            interface IMediaFailedRoutedEventArgs;

            interface IMemoryInfoPrivate;

            interface IPointHelper;

            interface IPointHelperStatics;

            interface IPropertyMetadata;

            interface IPropertyMetadataFactory;

            interface IPropertyMetadataStatics;

            interface IPropertyPath;

            interface IPropertyPathFactory;

            interface IRectHelper;

            interface IRectHelperStatics;

            interface IRectHelperStaticsPrivate;

            interface IResourceDictionary;

            interface IResourceDictionaryFactory;

            interface IRoutedEvent;

            interface IRoutedEventArgs;

            interface IRoutedEventArgsFactory;

            interface IScalarTransition;

            interface IScalarTransitionFactory;

            interface ISetter;

            interface ISetterBase;

            interface ISetterBaseCollection;

            interface ISetterBaseFactory;

            interface ISetterFactory;

            interface ISizeChangedEventArgs;

            interface ISizeHelper;

            interface ISizeHelperStatics;

            interface ISourceInfoPrivate;

            interface IStateTrigger;

            interface IStateTriggerBase;

            interface IStateTriggerBaseFactory;

            interface IStateTriggerBaseProtected;

            interface IStateTriggerStatics;

            interface IStyle;

            interface IStyleFactory;

            interface ITargetPropertyPath;

            interface ITargetPropertyPathFactory;

            interface IThicknessHelper;

            interface IThicknessHelperStatics;

            interface ITriggerAction;

            interface ITriggerActionFactory;

            interface ITriggerBase;

            interface ITriggerBaseFactory;

            interface IUIElement;

            interface IUIElementFactory;

            interface IUIElementOverrides;

            interface IUIElementProtected;

            interface IUIElementStatics;

            interface IUIElementStaticsPrivate;

            interface IUIElementWeakCollectionFactory;

            interface IUnhandledExceptionEventArgs;

            interface IVector3Transition;

            interface IVector3TransitionFactory;

            interface IVisualState;

            interface IVisualStateChangedEventArgs;

            interface IVisualStateGroup;

            interface IVisualStateManager;

            interface IVisualStateManagerFactory;

            interface IVisualStateManagerOverrides;

            interface IVisualStateManagerProtected;

            interface IVisualStateManagerStatics;

            interface IVisualTransition;

            interface IVisualTransitionFactory;

            interface IWindow;

            interface IWindowActivatedEventArgs;

            interface IWindowCreatedEventArgs;

            interface IWindowEventArgs;

            interface IWindowFactory;

            interface IWindowPrivate;

            interface IWindowSizeChangedEventArgs;

            interface IWindowStatics;

            interface IWindowVisibilityChangedEventArgs;

            interface IXamlRoot;

            interface IXamlRootChangedEventArgs;

            interface IXamlServiceProvider;

            runtimeclass AdaptiveTrigger;

            runtimeclass Application;

            runtimeclass ApplicationInitializationCallbackParams;

            runtimeclass BindingFailedEventArgs;

            runtimeclass BringIntoViewOptions;

            runtimeclass BringIntoViewRequestedEventArgs;

            runtimeclass BrushTransition;

            runtimeclass ColorPaletteResources;

            runtimeclass CornerRadiusHelper;

            runtimeclass DataContextChangedEventArgs;

            runtimeclass DataTemplate;

            runtimeclass DataTemplateKey;

            runtimeclass DebugSettings;

            runtimeclass DependencyObject;

            runtimeclass DependencyObjectCollection;

            runtimeclass DependencyProperty;

            runtimeclass DependencyPropertyChangedEventArgs;

            runtimeclass DispatcherTimer;

            runtimeclass DragEventArgs;

            runtimeclass DragOperationDeferral;

            runtimeclass DragStartingEventArgs;

            runtimeclass DragUI;

            runtimeclass DragUIOverride;

            runtimeclass DropCompletedEventArgs;

            runtimeclass DurationHelper;

            runtimeclass DxamlCoreTestHooks;

            runtimeclass EffectiveViewportChangedEventArgs;

            runtimeclass ElementFactoryGetArgs;

            runtimeclass ElementFactoryRecycleArgs;

            runtimeclass ElementSoundPlayer;

            runtimeclass EventTrigger;

            runtimeclass ExceptionRoutedEventArgs;

            runtimeclass FrameworkElement;

            runtimeclass FrameworkTemplate;

            runtimeclass FrameworkView;

            runtimeclass FrameworkViewSource;

            runtimeclass GridLengthHelper;

            runtimeclass LaunchActivatedEventArgs;

            runtimeclass MediaFailedRoutedEventArgs;

            runtimeclass PointHelper;

            runtimeclass PropertyMetadata;

            runtimeclass PropertyPath;

            runtimeclass RectHelper;

            runtimeclass ResourceDictionary;

            runtimeclass RoutedEvent;

            runtimeclass RoutedEventArgs;

            runtimeclass ScalarTransition;

            runtimeclass Setter;

            runtimeclass SetterBase;

            runtimeclass SetterBaseCollection;

            runtimeclass SizeChangedEventArgs;

            runtimeclass SizeHelper;

            runtimeclass StateTrigger;

            runtimeclass StateTriggerBase;

            runtimeclass Style;

            runtimeclass TargetPropertyPath;

            runtimeclass ThicknessHelper;

            runtimeclass TriggerAction;

            runtimeclass TriggerActionCollection;

            runtimeclass TriggerBase;

            runtimeclass TriggerCollection;

            runtimeclass UIElement;

            runtimeclass UIElementWeakCollection;

            runtimeclass UnhandledExceptionEventArgs;

            runtimeclass Vector3Transition;

            runtimeclass VisualState;

            runtimeclass VisualStateChangedEventArgs;

            runtimeclass VisualStateGroup;

            runtimeclass VisualStateManager;

            runtimeclass VisualTransition;

            runtimeclass Window;

            runtimeclass WindowActivatedEventArgs;

            runtimeclass WindowCreatedEventArgs;

            runtimeclass WindowEventArgs;

            runtimeclass WindowSizeChangedEventArgs;

            runtimeclass WindowVisibilityChangedEventArgs;

            runtimeclass XamlRoot;

            runtimeclass XamlRootChangedEventArgs;
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Xaml.DataTemplate*>*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Xaml.DataTemplate*>*>;

                interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Microsoft.UI.Xaml.DataTemplate*>;

                interface Windows.Foundation.Collections.IMapView<HSTRING, Microsoft.UI.Xaml.DataTemplate*>;

                interface Windows.Foundation.Collections.IMap<HSTRING, Microsoft.UI.Xaml.DataTemplate*>;

                interface Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.DependencyObject*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.StateTriggerBase*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerAction*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualState*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualStateGroup*>;

                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualTransition*>;

                interface Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowActivatedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowSizeChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, Microsoft.UI.Xaml.DataContextChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DragStartingEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DropCompletedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.RoutedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot*, Microsoft.UI.Xaml.XamlRootChangedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            [contractversion(1.0)]
            apicontract PrivateApiContract
            {
            }

            [contractversion(1.0)]
            apicontract WinUIContract
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [flags]
            enum ApplicationHighContrastAdjustment
            {
                None = 0x0,
                Auto = 0xFFFFFFFF
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ApplicationRequiresPointerMode
            {
                Auto          = 0,
                WhenRequested = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ApplicationTheme
            {
                Light = 0,
                Dark  = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum AutomationTextAttributesEnum
            {
                AnimationStyleAttribute          = 40000,
                BackgroundColorAttribute         = 40001,
                BulletStyleAttribute             = 40002,
                CapStyleAttribute                = 40003,
                CultureAttribute                 = 40004,
                FontNameAttribute                = 40005,
                FontSizeAttribute                = 40006,
                FontWeightAttribute              = 40007,
                ForegroundColorAttribute         = 40008,
                HorizontalTextAlignmentAttribute = 40009,
                IndentationFirstLineAttribute    = 40010,
                IndentationLeadingAttribute      = 40011,
                IndentationTrailingAttribute     = 40012,
                IsHiddenAttribute                = 40013,
                IsItalicAttribute                = 40014,
                IsReadOnlyAttribute              = 40015,
                IsSubscriptAttribute             = 40016,
                IsSuperscriptAttribute           = 40017,
                MarginBottomAttribute            = 40018,
                MarginLeadingAttribute           = 40019,
                MarginTopAttribute               = 40020,
                MarginTrailingAttribute          = 40021,
                OutlineStylesAttribute           = 40022,
                OverlineColorAttribute           = 40023,
                OverlineStyleAttribute           = 40024,
                StrikethroughColorAttribute      = 40025,
                StrikethroughStyleAttribute      = 40026,
                TabsAttribute                    = 40027,
                TextFlowDirectionsAttribute      = 40028,
                UnderlineColorAttribute          = 40029,
                UnderlineStyleAttribute          = 40030,
                AnnotationTypesAttribute         = 40031,
                AnnotationObjectsAttribute       = 40032,
                StyleNameAttribute               = 40033,
                StyleIdAttribute                 = 40034,
                LinkAttribute                    = 40035,
                IsActiveAttribute                = 40036,
                SelectionActiveEndAttribute      = 40037,
                CaretPositionAttribute           = 40038,
                CaretBidiModeAttribute           = 40039
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum DurationType
            {
                Automatic = 0,
                TimeSpan  = 1,
                Forever   = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [flags]
            enum ElementHighContrastAdjustment
            {
                None        = 0x0,
                Application = 0x80000000,
                Auto        = 0xFFFFFFFF
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ElementSoundKind
            {
                Focus        = 0,
                Invoke       = 1,
                Show         = 2,
                Hide         = 3,
                MovePrevious = 4,
                MoveNext     = 5,
                GoBack       = 6
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ElementSoundMode
            {
                Default   = 0,
                FocusOnly = 1,
                Off       = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ElementSoundPlayerState
            {
                Auto = 0,
                Off  = 1,
                On   = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ElementSpatialAudioMode
            {
                Auto = 0,
                Off  = 1,
                On   = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum ElementTheme
            {
                Default = 0,
                Light   = 1,
                Dark    = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FlowDirection
            {
                LeftToRight = 0,
                RightToLeft = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FocusState
            {
                Unfocused    = 0,
                Pointer      = 1,
                Keyboard     = 2,
                Programmatic = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FocusVisualKind
            {
                DottedLine     = 0,
                HighVisibility = 1,
                Reveal         = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontCapitals
            {
                Normal        = 0,
                AllSmallCaps  = 1,
                SmallCaps     = 2,
                AllPetiteCaps = 3,
                PetiteCaps    = 4,
                Unicase       = 5,
                Titling       = 6
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontEastAsianLanguage
            {
                Normal           = 0,
                HojoKanji        = 1,
                Jis04            = 2,
                Jis78            = 3,
                Jis83            = 4,
                Jis90            = 5,
                NlcKanji         = 6,
                Simplified       = 7,
                Traditional      = 8,
                TraditionalNames = 9
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontEastAsianWidths
            {
                Normal       = 0,
                Full         = 1,
                Half         = 2,
                Proportional = 3,
                Quarter      = 4,
                Third        = 5
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontFraction
            {
                Normal  = 0,
                Stacked = 1,
                Slashed = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontNumeralAlignment
            {
                Normal       = 0,
                Proportional = 1,
                Tabular      = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontNumeralStyle
            {
                Normal   = 0,
                Lining   = 1,
                OldStyle = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum FontVariants
            {
                Normal      = 0,
                Superscript = 1,
                Subscript   = 2,
                Ordinal     = 3,
                Inferior    = 4,
                Ruby        = 5
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum GridUnitType
            {
                Auto  = 0,
                Pixel = 1,
                Star  = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum HorizontalAlignment
            {
                Left    = 0,
                Center  = 1,
                Right   = 2,
                Stretch = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum LineStackingStrategy
            {
                MaxHeight          = 0,
                BlockLineHeight    = 1,
                BaselineToBaseline = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum OpticalMarginAlignment
            {
                None             = 0,
                TrimSideBearings = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum TextAlignment
            {
                Center            = 0,
                Left              = 1,
                Start             = 1,
                Right             = 2,
                End               = 2,
                Justify           = 3,
                DetectFromContent = 4
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum TextLineBounds
            {
                Full            = 0,
                TrimToCapHeight = 1,
                TrimToBaseline  = 2,
                Tight           = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum TextReadingOrder
            {
                [deprecated("Consider using UseFlowDirection, which is an improved version of Default. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                Default           = 0,
                UseFlowDirection  = 0,
                DetectFromContent = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum TextTrimming
            {
                None              = 0,
                CharacterEllipsis = 1,
                WordEllipsis      = 2,
                Clip              = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum TextWrapping
            {
                NoWrap         = 1,
                Wrap           = 2,
                WrapWholeWords = 3
            };

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            enum TransitionParent
            {
                ParentToRoot         = 0,
                ParentToCommonParent = 1,
                ParentToGrandParent  = 2
            };

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            enum TransitionTrigger
            {
                Load     = 0,
                Layout   = 1,
                Unload   = 2,
                Reparent = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [flags]
            enum Vector3TransitionComponents
            {
                X = 0x1,
                Y = 0x2,
                Z = 0x4
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum VerticalAlignment
            {
                Top     = 0,
                Center  = 1,
                Bottom  = 2,
                Stretch = 3
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum Visibility
            {
                Visible   = 0,
                Collapsed = 1
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            enum WindowActivationState
            {
                CodeActivated    = 0,
                Deactivated      = 1,
                PointerActivated = 2
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            struct CornerRadius
            {
                DOUBLE TopLeft;
                DOUBLE TopRight;
                DOUBLE BottomRight;
                DOUBLE BottomLeft;
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            struct Duration
            {
                Windows.Foundation.TimeSpan TimeSpan;
                Microsoft.UI.Xaml.DurationType Type;
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            struct GridLength
            {
                DOUBLE Value;
                Microsoft.UI.Xaml.GridUnitType GridUnitType;
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            struct Thickness
            {
                DOUBLE Left;
                DOUBLE Top;
                DOUBLE Right;
                DOUBLE Bottom;
            };

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(D8EEF1C9-1234-56F1-9963-45DD9C80A661)]
            delegate
                HRESULT ApplicationInitializationCallback([in] Microsoft.UI.Xaml.ApplicationInitializationCallbackParams* p);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(A3160AB0-A8A9-5F38-AF17-5CD91A2B33F5)]
            delegate
                HRESULT BindingFailedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.BindingFailedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(7F808C05-2AC4-5AD9-AC8A-26890333D81E)]
            delegate
                HRESULT CreateDefaultValueCallback([out] [retval] IInspectable** result);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(F055BB21-219B-5B0C-805D-BCAEDAE15458)]
            delegate
                HRESULT DependencyPropertyChangedCallback([in] Microsoft.UI.Xaml.DependencyObject* sender, [in] Microsoft.UI.Xaml.DependencyProperty* dp);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(4BE8DC75-373D-5F4E-A0B4-54B9EEAFB4A9)]
            delegate
                HRESULT DependencyPropertyChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(277AFC83-CB67-56C8-B601-1B9C0F1C3D32)]
            delegate
                HRESULT DragEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.DragEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(F9A5148D-8F72-553F-B479-21B68610899D)]
            delegate
                HRESULT EnteredBackgroundEventHandler([in] IInspectable* sender, [in] Windows.ApplicationModel.EnteredBackgroundEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(45FBB85D-54F9-5A2A-8A38-00A3B7761F96)]
            delegate
                HRESULT ExceptionRoutedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.ExceptionRoutedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(3D723B94-FBCF-5C0D-B6EF-5062E68BF9F8)]
            delegate
                HRESULT LeavingBackgroundEventHandler([in] IInspectable* sender, [in] Windows.ApplicationModel.LeavingBackgroundEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(5FD9243A-2422-53C9-8D6F-F1BA1A0BBA9A)]
            delegate
                HRESULT PropertyChangedCallback([in] Microsoft.UI.Xaml.DependencyObject* d, [in] Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(DAE23D85-69CA-5BDF-805B-6161A3A215CC)]
            delegate
                HRESULT RoutedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.RoutedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(8D7B1A58-14C6-51C9-892C-9FCCE368E77D)]
            delegate
                HRESULT SizeChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.SizeChangedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(E4BEEC79-95FD-5841-ACEB-01A8A1FB73D0)]
            delegate
                HRESULT SuspendingEventHandler([in] IInspectable* sender, [in] Windows.ApplicationModel.SuspendingEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(3427C1B6-5ECA-5631-84B8-5BAE732FB67F)]
            delegate
                HRESULT UnhandledExceptionEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.UnhandledExceptionEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(CDBBD854-0539-5BFF-B448-33193D2F41B8)]
            delegate
                HRESULT VisualStateChangedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.VisualStateChangedEventArgs* e);

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.AdaptiveTrigger)]
            [uuid(B2B18AE8-48D9-5A1D-A555-6685DDD4DA80)]
            interface IAdaptiveTrigger : IInspectable
            {
                [propget] HRESULT MinWindowWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWindowWidth([in] DOUBLE value);
                [propget] HRESULT MinWindowHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWindowHeight([in] DOUBLE value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.AdaptiveTrigger)]
            [uuid(9C9560BB-4099-5175-9250-45A15E753DA8)]
            interface IAdaptiveTriggerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.AdaptiveTrigger** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.AdaptiveTrigger)]
            [uuid(E7A3547F-C077-5F20-AAB1-D16C30D9D37F)]
            interface IAdaptiveTriggerStatics : IInspectable
            {
                [propget] HRESULT MinWindowWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinWindowHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Application)]
            [uuid(9BC9D617-B5F8-5AD8-80C1-93D8B82425F9)]
            interface IApplication : IInspectable
            {
                [propget] HRESULT Resources([out] [retval] Microsoft.UI.Xaml.ResourceDictionary** value);
                [propput] HRESULT Resources([in] Microsoft.UI.Xaml.ResourceDictionary* value);
                [propget] HRESULT DebugSettings([out] [retval] Microsoft.UI.Xaml.DebugSettings** value);
                [propget] HRESULT RequestedTheme([out] [retval] Microsoft.UI.Xaml.ApplicationTheme* value);
                [propput] HRESULT RequestedTheme([in] Microsoft.UI.Xaml.ApplicationTheme value);
                [propget] HRESULT FocusVisualKind([out] [retval] Microsoft.UI.Xaml.FocusVisualKind* value);
                [propput] HRESULT FocusVisualKind([in] Microsoft.UI.Xaml.FocusVisualKind value);
                [propget] HRESULT RequiresPointerMode([out] [retval] Microsoft.UI.Xaml.ApplicationRequiresPointerMode* value);
                [propput] HRESULT RequiresPointerMode([in] Microsoft.UI.Xaml.ApplicationRequiresPointerMode value);
                [propget] HRESULT HighContrastAdjustment([out] [retval] Microsoft.UI.Xaml.ApplicationHighContrastAdjustment* value);
                [propput] HRESULT HighContrastAdjustment([in] Microsoft.UI.Xaml.ApplicationHighContrastAdjustment value);
                [eventadd] HRESULT UnhandledException([in] Microsoft.UI.Xaml.UnhandledExceptionEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT UnhandledException([in] EventRegistrationToken token);
                [eventadd] HRESULT Suspending([in] Microsoft.UI.Xaml.SuspendingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Suspending([in] EventRegistrationToken token);
                [eventadd] HRESULT Resuming([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Resuming([in] EventRegistrationToken token);
                [eventadd] HRESULT LeavingBackground([in] Microsoft.UI.Xaml.LeavingBackgroundEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LeavingBackground([in] EventRegistrationToken token);
                [eventadd] HRESULT EnteredBackground([in] Microsoft.UI.Xaml.EnteredBackgroundEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT EnteredBackground([in] EventRegistrationToken token);
                HRESULT Exit();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Application)]
            [uuid(9FD96657-5294-5A65-A1DB-4FEA143597DA)]
            interface IApplicationFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Application** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ApplicationInitializationCallbackParams)]
            [uuid(1B1906EA-5B7B-5876-81AB-7C2281AC3D20)]
            interface IApplicationInitializationCallbackParams : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Application)]
            [uuid(3785B209-37BB-5B49-B3C6-6974DCDC4787)]
            interface IApplicationOverrides : IInspectable
            {
                HRESULT OnActivated([in] Windows.ApplicationModel.Activation.IActivatedEventArgs* args);
                HRESULT OnLaunched([in] Microsoft.UI.Xaml.LaunchActivatedEventArgs* args);
                HRESULT OnFileActivated([in] Windows.ApplicationModel.Activation.FileActivatedEventArgs* args);
                HRESULT OnSearchActivated([in] Windows.ApplicationModel.Activation.SearchActivatedEventArgs* args);
                HRESULT OnShareTargetActivated([in] Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs* args);
                HRESULT OnFileOpenPickerActivated([in] Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs* args);
                HRESULT OnFileSavePickerActivated([in] Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs* args);
                HRESULT OnCachedFileUpdaterActivated([in] Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs* args);
                HRESULT OnBackgroundActivated([in] Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs* args);
                HRESULT OnWindowCreated([in] Microsoft.UI.Xaml.WindowCreatedEventArgs* args);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Application)]
            [uuid(4E0D09F5-4358-512C-A987-503B52848E95)]
            interface IApplicationStatics : IInspectable
            {
                [propget] HRESULT Current([out] [retval] Microsoft.UI.Xaml.Application** value);
                HRESULT Start([in] Microsoft.UI.Xaml.ApplicationInitializationCallback* callback);
                [overload("LoadComponent")] HRESULT LoadComponent([in] IInspectable* component, [in] Windows.Foundation.Uri* resourceLocator);
                [overload("LoadComponent")] HRESULT LoadComponentWithResourceLocation([in] IInspectable* component, [in] Windows.Foundation.Uri* resourceLocator, [in] Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(15645012-8F3F-5090-B584-DF078FCC509A)]
            interface IAtlasRequestCallback : IInspectable
            {
                HRESULT AtlasRequest([in] UINT32 width, [in] UINT32 height, [in] Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.BindingFailedEventArgs)]
            [uuid(A7BF50F3-DBC0-5B44-BE74-56E8F80FD716)]
            interface IBindingFailedEventArgs : IInspectable
            {
                [propget] HRESULT Message([out] [retval] HSTRING* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.BringIntoViewOptions)]
            [uuid(EEB4A447-EB9E-5003-A479-B9E3A886B708)]
            interface IBringIntoViewOptions : IInspectable
            {
                [propget] HRESULT AnimationDesired([out] [retval] boolean* value);
                [propput] HRESULT AnimationDesired([in] boolean value);
                [propget] HRESULT TargetRect([out] [retval] Windows.Foundation.IReference<Windows.Foundation.Rect>** value);
                [propput] HRESULT TargetRect([in] Windows.Foundation.IReference<Windows.Foundation.Rect>* value);
                [propget] HRESULT HorizontalAlignmentRatio([out] [retval] DOUBLE* value);
                [propput] HRESULT HorizontalAlignmentRatio([in] DOUBLE value);
                [propget] HRESULT VerticalAlignmentRatio([out] [retval] DOUBLE* value);
                [propput] HRESULT VerticalAlignmentRatio([in] DOUBLE value);
                [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT HorizontalOffset([in] DOUBLE value);
                [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT VerticalOffset([in] DOUBLE value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs)]
            [uuid(807DE8F9-B1DC-5A63-8101-5EE966841A27)]
            interface IBringIntoViewRequestedEventArgs : IInspectable
            {
                [propget] HRESULT TargetElement([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propput] HRESULT TargetElement([in] Microsoft.UI.Xaml.UIElement* value);
                [propget] HRESULT AnimationDesired([out] [retval] boolean* value);
                [propput] HRESULT AnimationDesired([in] boolean value);
                [propget] HRESULT TargetRect([out] [retval] Windows.Foundation.Rect* value);
                [propput] HRESULT TargetRect([in] Windows.Foundation.Rect value);
                [propget] HRESULT HorizontalAlignmentRatio([out] [retval] DOUBLE* value);
                [propget] HRESULT VerticalAlignmentRatio([out] [retval] DOUBLE* value);
                [propget] HRESULT HorizontalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT HorizontalOffset([in] DOUBLE value);
                [propget] HRESULT VerticalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT VerticalOffset([in] DOUBLE value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.BrushTransition)]
            [uuid(A996A7BA-4567-5963-A112-76E3C0000204)]
            interface IBrushTransition : IInspectable
            {
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.BrushTransition)]
            [uuid(13735998-C3B6-5C24-B40A-7B166A6FFC2C)]
            interface IBrushTransitionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.BrushTransition** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ColorPaletteResources)]
            [uuid(1903A03C-1750-54FE-A434-14B227CBE701)]
            interface IColorPaletteResources : IInspectable
            {
                [propget] HRESULT AltHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT AltHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT AltLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT AltLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT AltMedium([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT AltMedium([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT AltMediumHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT AltMediumHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT AltMediumLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT AltMediumLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BaseHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BaseHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BaseLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BaseLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BaseMedium([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BaseMedium([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BaseMediumHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BaseMediumHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT BaseMediumLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT BaseMediumLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeAltLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeAltLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeBlackHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeBlackHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeBlackLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeBlackLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeBlackMediumLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeBlackMediumLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeBlackMedium([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeBlackMedium([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeDisabledHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeDisabledHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeDisabledLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeDisabledLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeHigh([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeHigh([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeMedium([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeMedium([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeMediumLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeMediumLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeWhite([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeWhite([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ChromeGray([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ChromeGray([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ListLow([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ListLow([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ListMedium([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ListMedium([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT ErrorText([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT ErrorText([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
                [propget] HRESULT Accent([out] [retval] Windows.Foundation.IReference<Windows.UI.Color>** value);
                [propput] HRESULT Accent([in] Windows.Foundation.IReference<Windows.UI.Color>* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ColorPaletteResources)]
            [uuid(32FDE185-8544-59C0-9E0A-E6E0BAD9EDCF)]
            interface IColorPaletteResourcesFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.ColorPaletteResources** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.CornerRadiusHelper)]
            [uuid(DFCC382D-CFA8-5614-A35A-4091D1A81C9E)]
            interface ICornerRadiusHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.CornerRadiusHelper)]
            [uuid(77352882-894B-5DED-B54C-A86105E4E068)]
            interface ICornerRadiusHelperStatics : IInspectable
            {
                HRESULT FromRadii([in] DOUBLE topLeft, [in] DOUBLE topRight, [in] DOUBLE bottomRight, [in] DOUBLE bottomLeft, [out] [retval] Microsoft.UI.Xaml.CornerRadius* result);
                HRESULT FromUniformRadius([in] DOUBLE uniformRadius, [out] [retval] Microsoft.UI.Xaml.CornerRadius* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataContextChangedEventArgs)]
            [uuid(A1BE80F4-CF83-5022-B113-9233F1D4FAFA)]
            interface IDataContextChangedEventArgs : IInspectable
            {
                [propget] HRESULT NewValue([out] [retval] IInspectable** value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataTemplate)]
            [uuid(08FA70FA-EE75-5E92-A101-F52D0E1E9FAB)]
            interface IDataTemplate : IInspectable
            {
                HRESULT LoadContent([out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(351E63C4-8FA3-5CC3-B073-7F84BAA6485D)]
            interface IDataTemplateExtension : IInspectable
            {
                HRESULT ResetTemplate();
                HRESULT ProcessBinding([in] UINT32 phase, [out] [retval] boolean* result);
                HRESULT ProcessBindings([in] Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs* arg, [out] [retval] INT32* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataTemplate)]
            [uuid(D8E8249D-305B-5CA5-ACF8-3E1BEFFD0219)]
            interface IDataTemplateFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DataTemplate** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataTemplateKey)]
            [uuid(6E704A95-4B2F-5BA8-ADA5-1261C832BAED)]
            interface IDataTemplateKey : IInspectable
            {
                [propget] HRESULT DataType([out] [retval] IInspectable** value);
                [propput] HRESULT DataType([in] IInspectable* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataTemplateKey)]
            [uuid(13B2F604-EEBC-5DAA-8A5B-460C4FABDEB7)]
            interface IDataTemplateKeyFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DataTemplateKey** value);
                HRESULT CreateInstanceWithType([in] IInspectable* dataType, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DataTemplateKey** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DataTemplate)]
            [uuid(CF6ADA69-4BF1-5F2D-8BDB-09EA1A26F975)]
            interface IDataTemplateStatics : IInspectable
            {
                [propget] HRESULT ExtensionInstanceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                HRESULT GetExtensionInstance([in] Microsoft.UI.Xaml.FrameworkElement* element, [out] [retval] Microsoft.UI.Xaml.IDataTemplateExtension** result);
                HRESULT SetExtensionInstance([in] Microsoft.UI.Xaml.FrameworkElement* element, [in] Microsoft.UI.Xaml.IDataTemplateExtension* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DebugSettings)]
            [uuid(4004943B-2509-5476-BBA2-3FE05ECF615D)]
            interface IDebugSettings : IInspectable
            {
                [propget] HRESULT EnableFrameRateCounter([out] [retval] boolean* value);
                [propput] HRESULT EnableFrameRateCounter([in] boolean value);
                [propget] HRESULT IsBindingTracingEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsBindingTracingEnabled([in] boolean value);
                [propget] HRESULT IsTextPerformanceVisualizationEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsTextPerformanceVisualizationEnabled([in] boolean value);
                [propget] HRESULT FailFastOnErrors([out] [retval] boolean* value);
                [propput] HRESULT FailFastOnErrors([in] boolean value);
                [eventadd] HRESULT BindingFailed([in] Microsoft.UI.Xaml.BindingFailedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT BindingFailed([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyObject)]
            [uuid(9FB92D6F-2CC3-5892-ABB3-45F6461EA7E4)]
            interface IDependencyObject : IInspectable
            {
                HRESULT GetValue([in] Microsoft.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** result);
                HRESULT SetValue([in] Microsoft.UI.Xaml.DependencyProperty* dp, [in] IInspectable* value);
                HRESULT ClearValue([in] Microsoft.UI.Xaml.DependencyProperty* dp);
                HRESULT ReadLocalValue([in] Microsoft.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** result);
                HRESULT GetAnimationBaseValue([in] Microsoft.UI.Xaml.DependencyProperty* dp, [out] [retval] IInspectable** result);
                HRESULT RegisterPropertyChangedCallback([in] Microsoft.UI.Xaml.DependencyProperty* dp, [in] Microsoft.UI.Xaml.DependencyPropertyChangedCallback* callback, [out] [retval] INT64* result);
                HRESULT UnregisterPropertyChangedCallback([in] Microsoft.UI.Xaml.DependencyProperty* dp, [in] INT64 token);
                [propget] HRESULT Dispatcher([out] [retval] Windows.UI.Core.CoreDispatcher** value);
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyObjectCollection)]
            [uuid(2A74EE43-90FD-5D61-9383-584EA8422B39)]
            interface IDependencyObjectCollectionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DependencyObjectCollection** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyObject)]
            [uuid(936B614C-475F-5D7D-B3F7-BF1FBEA28126)]
            interface IDependencyObjectFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyProperty)]
            [uuid(960EAB49-9672-58A0-995B-3A42E5EA6278)]
            interface IDependencyProperty : IInspectable
            {
                HRESULT GetMetadata([in] Windows.UI.Xaml.Interop.TypeName forType, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs)]
            [uuid(84EAD020-7849-5E98-8030-488A80D164EC)]
            interface IDependencyPropertyChangedEventArgs : IInspectable
            {
                [propget] HRESULT Property([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT OldValue([out] [retval] IInspectable** value);
                [propget] HRESULT NewValue([out] [retval] IInspectable** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DependencyProperty)]
            [uuid(61DDC651-0383-5D6F-98CE-5C046AAAAA8F)]
            interface IDependencyPropertyStatics : IInspectable
            {
                [propget] HRESULT UnsetValue([out] [retval] IInspectable** value);
                HRESULT Register([in] HSTRING name, [in] Windows.UI.Xaml.Interop.TypeName propertyType, [in] Windows.UI.Xaml.Interop.TypeName ownerType, [in] Microsoft.UI.Xaml.PropertyMetadata* typeMetadata, [out] [retval] Microsoft.UI.Xaml.DependencyProperty** result);
                HRESULT RegisterAttached([in] HSTRING name, [in] Windows.UI.Xaml.Interop.TypeName propertyType, [in] Windows.UI.Xaml.Interop.TypeName ownerType, [in] Microsoft.UI.Xaml.PropertyMetadata* defaultMetadata, [out] [retval] Microsoft.UI.Xaml.DependencyProperty** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DispatcherTimer)]
            [uuid(58A4ABF1-A4A3-53DD-AE21-08F43231E817)]
            interface IDispatcherTimer : IInspectable
            {
                [propget] HRESULT Interval([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Interval([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT IsEnabled([out] [retval] boolean* value);
                [eventadd] HRESULT Tick([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Tick([in] EventRegistrationToken token);
                HRESULT Start();
                HRESULT Stop();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DispatcherTimer)]
            [uuid(1BCB3166-22E4-50BF-A5A2-B78CA4377BD0)]
            interface IDispatcherTimerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.DispatcherTimer** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DragEventArgs)]
            [uuid(47AC5757-E4BC-52BA-8AB9-1BF81AAD7900)]
            interface IDragEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
                [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                [propput] HRESULT Data([in] Windows.ApplicationModel.DataTransfer.DataPackage* value);
                [propget] HRESULT DataView([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageView** value);
                [propget] HRESULT DragUIOverride([out] [retval] Microsoft.UI.Xaml.DragUIOverride** value);
                [propget] HRESULT Modifiers([out] [retval] Windows.ApplicationModel.DataTransfer.DragDrop.DragDropModifiers* value);
                [propget] HRESULT AcceptedOperation([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                [propput] HRESULT AcceptedOperation([in] Windows.ApplicationModel.DataTransfer.DataPackageOperation value);
                [propget] HRESULT AllowedOperations([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                HRESULT GetDeferral([out] [retval] Microsoft.UI.Xaml.DragOperationDeferral** result);
                HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DragOperationDeferral)]
            [uuid(462C1880-FC6A-5035-8ABF-564BACB78158)]
            interface IDragOperationDeferral : IInspectable
            {
                HRESULT Complete();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DragStartingEventArgs)]
            [uuid(AD17BACE-9613-5666-A31B-79A73FBA77CF)]
            interface IDragStartingEventArgs : IInspectable
            {
                [propget] HRESULT Cancel([out] [retval] boolean* value);
                [propput] HRESULT Cancel([in] boolean value);
                [propget] HRESULT Data([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackage** value);
                [propget] HRESULT DragUI([out] [retval] Microsoft.UI.Xaml.DragUI** value);
                [propget] HRESULT AllowedOperations([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
                [propput] HRESULT AllowedOperations([in] Windows.ApplicationModel.DataTransfer.DataPackageOperation value);
                HRESULT GetDeferral([out] [retval] Microsoft.UI.Xaml.DragOperationDeferral** result);
                HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DragUI)]
            [uuid(35F170E0-93BF-58DA-877A-8EC77D8D9F00)]
            interface IDragUI : IInspectable
            {
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImage([in] Microsoft.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage);
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImageWithAnchorPoint([in] Microsoft.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage, [in] Windows.Foundation.Point anchorPoint);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmap([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmapWithAnchorPoint([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [in] Windows.Foundation.Point anchorPoint);
                HRESULT SetContentFromDataPackage();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DragUIOverride)]
            [uuid(3260B18B-70DF-5DF2-B98A-56BEB0601F79)]
            interface IDragUIOverride : IInspectable
            {
                [propget] HRESULT Caption([out] [retval] HSTRING* value);
                [propput] HRESULT Caption([in] HSTRING value);
                [propget] HRESULT IsContentVisible([out] [retval] boolean* value);
                [propput] HRESULT IsContentVisible([in] boolean value);
                [propget] HRESULT IsCaptionVisible([out] [retval] boolean* value);
                [propput] HRESULT IsCaptionVisible([in] boolean value);
                [propget] HRESULT IsGlyphVisible([out] [retval] boolean* value);
                [propput] HRESULT IsGlyphVisible([in] boolean value);
                HRESULT Clear();
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImage([in] Microsoft.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage);
                [overload("SetContentFromBitmapImage")] HRESULT SetContentFromBitmapImageWithAnchorPoint([in] Microsoft.UI.Xaml.Media.Imaging.BitmapImage* bitmapImage, [in] Windows.Foundation.Point anchorPoint);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmap([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap);
                [overload("SetContentFromSoftwareBitmap")] HRESULT SetContentFromSoftwareBitmapWithAnchorPoint([in] Windows.Graphics.Imaging.SoftwareBitmap* softwareBitmap, [in] Windows.Foundation.Point anchorPoint);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DropCompletedEventArgs)]
            [uuid(E700082D-C640-5D44-B23A-F213DFBEB245)]
            interface IDropCompletedEventArgs : IInspectable
            {
                [propget] HRESULT DropResult([out] [retval] Windows.ApplicationModel.DataTransfer.DataPackageOperation* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DurationHelper)]
            [uuid(CC1089AB-8041-5C3E-B753-8397E7358CC6)]
            interface IDurationHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DurationHelper)]
            [uuid(491FEB2C-3475-5F89-B15C-49C236EB514C)]
            interface IDurationHelperStatics : IInspectable
            {
                [propget] HRESULT Automatic([out] [retval] Microsoft.UI.Xaml.Duration* value);
                [propget] HRESULT Forever([out] [retval] Microsoft.UI.Xaml.Duration* value);
                HRESULT Compare([in] Microsoft.UI.Xaml.Duration duration1, [in] Microsoft.UI.Xaml.Duration duration2, [out] [retval] INT32* result);
                HRESULT FromTimeSpan([in] Windows.Foundation.TimeSpan timeSpan, [out] [retval] Microsoft.UI.Xaml.Duration* result);
                HRESULT GetHasTimeSpan([in] Microsoft.UI.Xaml.Duration target, [out] [retval] boolean* result);
                HRESULT Add([in] Microsoft.UI.Xaml.Duration target, [in] Microsoft.UI.Xaml.Duration duration, [out] [retval] Microsoft.UI.Xaml.Duration* result);
                HRESULT Equals([in] Microsoft.UI.Xaml.Duration target, [in] Microsoft.UI.Xaml.Duration value, [out] [retval] boolean* result);
                HRESULT Subtract([in] Microsoft.UI.Xaml.Duration target, [in] Microsoft.UI.Xaml.Duration duration, [out] [retval] Microsoft.UI.Xaml.Duration* result);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DxamlCoreTestHooks)]
            [uuid(E44D8E58-844D-5201-83BD-5D48CEB7035D)]
            interface IDxamlCoreTestHooks : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.DxamlCoreTestHooks)]
            [uuid(4B2F7A38-3584-53E8-A67F-F3EDF229E5AB)]
            interface IDxamlCoreTestHooksStatics : IInspectable
            {
                HRESULT GetForCurrentThread([out] [retval] Microsoft.UI.Xaml.DxamlCoreTestHooks** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs)]
            [uuid(636E8159-2D82-538A-8483-CD576E41D0DF)]
            interface IEffectiveViewportChangedEventArgs : IInspectable
            {
                [propget] HRESULT EffectiveViewport([out] [retval] Windows.Foundation.Rect* value);
                [propget] HRESULT MaxViewport([out] [retval] Windows.Foundation.Rect* value);
                [propget] HRESULT BringIntoViewDistanceX([out] [retval] DOUBLE* value);
                [propget] HRESULT BringIntoViewDistanceY([out] [retval] DOUBLE* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(75FABA47-2CF2-54AE-91E6-0581556FDDAA)]
            interface IElementFactory : IInspectable
            {
                HRESULT GetElement([in] Microsoft.UI.Xaml.ElementFactoryGetArgs* args, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                HRESULT RecycleElement([in] Microsoft.UI.Xaml.ElementFactoryRecycleArgs* args);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementFactoryGetArgs)]
            [uuid(B7017D68-EC9E-5435-B078-BE6F906F0953)]
            interface IElementFactoryGetArgs : IInspectable
            {
                [propget] HRESULT Data([out] [retval] IInspectable** value);
                [propput] HRESULT Data([in] IInspectable* value);
                [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propput] HRESULT Parent([in] Microsoft.UI.Xaml.UIElement* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementFactoryGetArgs)]
            [uuid(A88E401B-9FE5-5960-87A3-89A3CFE2531C)]
            interface IElementFactoryGetArgsFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.ElementFactoryGetArgs** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementFactoryRecycleArgs)]
            [uuid(46E444F7-05D3-5C5E-9B7A-5541F63E4EF9)]
            interface IElementFactoryRecycleArgs : IInspectable
            {
                [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propput] HRESULT Element([in] Microsoft.UI.Xaml.UIElement* value);
                [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propput] HRESULT Parent([in] Microsoft.UI.Xaml.UIElement* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementFactoryRecycleArgs)]
            [uuid(30EE194A-FE4D-53E7-A84A-CD34FAB0D4EF)]
            interface IElementFactoryRecycleArgsFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.ElementFactoryRecycleArgs** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementSoundPlayer)]
            [uuid(0EA67E68-937C-5C00-B609-53B63D9A5D42)]
            interface IElementSoundPlayer : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ElementSoundPlayer)]
            [uuid(5A5A20C3-1C9B-5D61-9D63-487C8BF16ECB)]
            interface IElementSoundPlayerStatics : IInspectable
            {
                [propget] HRESULT Volume([out] [retval] DOUBLE* value);
                [propput] HRESULT Volume([in] DOUBLE value);
                [propget] HRESULT State([out] [retval] Microsoft.UI.Xaml.ElementSoundPlayerState* value);
                [propput] HRESULT State([in] Microsoft.UI.Xaml.ElementSoundPlayerState value);
                [propget] HRESULT SpatialAudioMode([out] [retval] Microsoft.UI.Xaml.ElementSpatialAudioMode* value);
                [propput] HRESULT SpatialAudioMode([in] Microsoft.UI.Xaml.ElementSpatialAudioMode value);
                HRESULT Play([in] Microsoft.UI.Xaml.ElementSoundKind sound);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(65D2203B-6FB0-5EBA-8821-F6DD313C33FB)]
            interface IElementSoundPlayerStaticsPrivate : IInspectable
            {
                HRESULT RequestInteractionSoundForElement([in] Microsoft.UI.Xaml.ElementSoundKind sound, [in] Microsoft.UI.Xaml.DependencyObject* element);
                HRESULT GetEffectiveSoundMode([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Microsoft.UI.Xaml.ElementSoundMode* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.EventTrigger)]
            [uuid(8C6F0541-C6AC-5F27-9D45-CF8BDBDFABE6)]
            interface IEventTrigger : IInspectable
            {
                [propget] HRESULT RoutedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propput] HRESULT RoutedEvent([in] Microsoft.UI.Xaml.RoutedEvent* value);
                [propget] HRESULT Actions([out] [retval] Microsoft.UI.Xaml.TriggerActionCollection** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ExceptionRoutedEventArgs)]
            [uuid(E8BCB6D2-D3F5-5393-A84F-DFCD44A2DF34)]
            interface IExceptionRoutedEventArgs : IInspectable
            {
                [propget] HRESULT ErrorMessage([out] [retval] HSTRING* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ExceptionRoutedEventArgs)]
            [uuid(E1E71FB6-2AD0-5189-8D96-33BAE488C5FB)]
            interface IExceptionRoutedEventArgsFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(5CA69216-9979-5E26-B067-D45856580732)]
            interface IFrameworkApplicationPrivate : IInspectable
            {
                HRESULT StartOnCurrentThread([in] Microsoft.UI.Xaml.ApplicationInitializationCallback* callback);
                HRESULT CreateIsland([out] [retval] Microsoft.UI.Xaml.Hosting.XamlIsland** result);
                HRESULT CreateIslandWithContentBridge([in] IInspectable* owner, [in] IInspectable* contentBridge, [out] [retval] Microsoft.UI.Xaml.Hosting.XamlIsland** result);
                HRESULT RemoveIsland([in] Microsoft.UI.Xaml.Hosting.XamlIsland* island);
                HRESULT SetSynchronizationWindow([in] UINT64 commitResizeWindow);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(66CB5498-0063-5D10-B06B-6C6CE06E4D2D)]
            interface IFrameworkApplicationStaticsPrivate : IInspectable
            {
                HRESULT EnableFailFastOnStowedException();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkElement)]
            [uuid(FE08F13D-DC6A-5495-AD44-C2D8D21863B0)]
            interface IFrameworkElement : IInspectable
            {
                [propget] HRESULT Triggers([out] [retval] Microsoft.UI.Xaml.TriggerCollection** value);
                [propget] HRESULT Resources([out] [retval] Microsoft.UI.Xaml.ResourceDictionary** value);
                [propput] HRESULT Resources([in] Microsoft.UI.Xaml.ResourceDictionary* value);
                [propget] HRESULT Tag([out] [retval] IInspectable** value);
                [propput] HRESULT Tag([in] IInspectable* value);
                [propget] HRESULT Language([out] [retval] HSTRING* value);
                [propput] HRESULT Language([in] HSTRING value);
                [propget] HRESULT ActualWidth([out] [retval] DOUBLE* value);
                [propget] HRESULT ActualHeight([out] [retval] DOUBLE* value);
                [propget] HRESULT Width([out] [retval] DOUBLE* value);
                [propput] HRESULT Width([in] DOUBLE value);
                [propget] HRESULT Height([out] [retval] DOUBLE* value);
                [propput] HRESULT Height([in] DOUBLE value);
                [propget] HRESULT MinWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MinWidth([in] DOUBLE value);
                [propget] HRESULT MaxWidth([out] [retval] DOUBLE* value);
                [propput] HRESULT MaxWidth([in] DOUBLE value);
                [propget] HRESULT MinHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MinHeight([in] DOUBLE value);
                [propget] HRESULT MaxHeight([out] [retval] DOUBLE* value);
                [propput] HRESULT MaxHeight([in] DOUBLE value);
                [propget] HRESULT HorizontalAlignment([out] [retval] Microsoft.UI.Xaml.HorizontalAlignment* value);
                [propput] HRESULT HorizontalAlignment([in] Microsoft.UI.Xaml.HorizontalAlignment value);
                [propget] HRESULT VerticalAlignment([out] [retval] Microsoft.UI.Xaml.VerticalAlignment* value);
                [propput] HRESULT VerticalAlignment([in] Microsoft.UI.Xaml.VerticalAlignment value);
                [propget] HRESULT Margin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                [propput] HRESULT Margin([in] Microsoft.UI.Xaml.Thickness value);
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propput] HRESULT Name([in] HSTRING value);
                [propget] HRESULT BaseUri([out] [retval] Windows.Foundation.Uri** value);
                [propget] HRESULT DataContext([out] [retval] IInspectable** value);
                [propput] HRESULT DataContext([in] IInspectable* value);
                [propget] HRESULT AllowFocusOnInteraction([out] [retval] boolean* value);
                [propput] HRESULT AllowFocusOnInteraction([in] boolean value);
                [propget] HRESULT FocusVisualMargin([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                [propput] HRESULT FocusVisualMargin([in] Microsoft.UI.Xaml.Thickness value);
                [propget] HRESULT FocusVisualSecondaryThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                [propput] HRESULT FocusVisualSecondaryThickness([in] Microsoft.UI.Xaml.Thickness value);
                [propget] HRESULT FocusVisualPrimaryThickness([out] [retval] Microsoft.UI.Xaml.Thickness* value);
                [propput] HRESULT FocusVisualPrimaryThickness([in] Microsoft.UI.Xaml.Thickness value);
                [propget] HRESULT FocusVisualSecondaryBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                [propput] HRESULT FocusVisualSecondaryBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                [propget] HRESULT FocusVisualPrimaryBrush([out] [retval] Microsoft.UI.Xaml.Media.Brush** value);
                [propput] HRESULT FocusVisualPrimaryBrush([in] Microsoft.UI.Xaml.Media.Brush* value);
                [propget] HRESULT AllowFocusWhenDisabled([out] [retval] boolean* value);
                [propput] HRESULT AllowFocusWhenDisabled([in] boolean value);
                [propget] HRESULT Style([out] [retval] Microsoft.UI.Xaml.Style** value);
                [propput] HRESULT Style([in] Microsoft.UI.Xaml.Style* value);
                [propget] HRESULT Parent([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propget] HRESULT FlowDirection([out] [retval] Microsoft.UI.Xaml.FlowDirection* value);
                [propput] HRESULT FlowDirection([in] Microsoft.UI.Xaml.FlowDirection value);
                [propget] HRESULT RequestedTheme([out] [retval] Microsoft.UI.Xaml.ElementTheme* value);
                [propput] HRESULT RequestedTheme([in] Microsoft.UI.Xaml.ElementTheme value);
                [propget] HRESULT IsLoaded([out] [retval] boolean* value);
                [propget] HRESULT ActualTheme([out] [retval] Microsoft.UI.Xaml.ElementTheme* value);
                [eventadd] HRESULT Loaded([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Loaded([in] EventRegistrationToken token);
                [eventadd] HRESULT Unloaded([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Unloaded([in] EventRegistrationToken token);
                [eventadd] HRESULT DataContextChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, Microsoft.UI.Xaml.DataContextChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DataContextChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT SizeChanged([in] Microsoft.UI.Xaml.SizeChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SizeChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT LayoutUpdated([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LayoutUpdated([in] EventRegistrationToken token);
                [eventadd] HRESULT Loading([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Loading([in] EventRegistrationToken token);
                [eventadd] HRESULT ActualThemeChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ActualThemeChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT EffectiveViewportChanged([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement*, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT EffectiveViewportChanged([in] EventRegistrationToken token);
                HRESULT FindName([in] HSTRING name, [out] [retval] IInspectable** result);
                HRESULT SetBinding([in] Microsoft.UI.Xaml.DependencyProperty* dp, [in] Microsoft.UI.Xaml.Data.BindingBase* binding);
                HRESULT GetBindingExpression([in] Microsoft.UI.Xaml.DependencyProperty* dp, [out] [retval] Microsoft.UI.Xaml.Data.BindingExpression** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkElement)]
            [uuid(BD3F2272-3EFA-5F92-B759-90B1CC3E784C)]
            interface IFrameworkElementFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.FrameworkElement** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkElement)]
            [uuid(FFC6FD98-F38C-5904-9CE4-97A3427CF4BA)]
            interface IFrameworkElementOverrides : IInspectable
            {
                HRESULT MeasureOverride([in] Windows.Foundation.Size availableSize, [out] [retval] Windows.Foundation.Size* result);
                HRESULT ArrangeOverride([in] Windows.Foundation.Size finalSize, [out] [retval] Windows.Foundation.Size* result);
                HRESULT OnApplyTemplate();
                HRESULT GoToElementStateCore([in] HSTRING stateName, [in] boolean useTransitions, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkElement)]
            [uuid(E59A3DB0-91E5-5903-9CAF-D1BB9F458BF2)]
            interface IFrameworkElementProtected : IInspectable
            {
                HRESULT InvalidateViewport();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkElement)]
            [uuid(894E2704-14E7-569A-B21E-AFC7DF7145A1)]
            interface IFrameworkElementStatics : IInspectable
            {
                [propget] HRESULT TagProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT LanguageProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ActualWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ActualHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT WidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT HeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MaxWidthProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MinHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MaxHeightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT HorizontalAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT VerticalAlignmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT MarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT NameProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT DataContextProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT AllowFocusOnInteractionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusVisualMarginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusVisualSecondaryThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusVisualPrimaryThicknessProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusVisualSecondaryBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusVisualPrimaryBrushProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT AllowFocusWhenDisabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT StyleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FlowDirectionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT RequestedThemeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ActualThemeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                HRESULT DeferTree([in] Microsoft.UI.Xaml.DependencyObject* element);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkTemplate)]
            [uuid(0084C7C2-DE48-5B0B-8A5A-E4FB76B7F7D1)]
            interface IFrameworkTemplate : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkTemplate)]
            [uuid(616DD6DB-B064-561D-B162-46CEB45DC562)]
            interface IFrameworkTemplateFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.FrameworkTemplate** value);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(3EC693E7-F042-5FDC-9661-5DCC9F03385D)]
            interface IFrameworkTemplatePrivate : IInspectable
            {
                HRESULT EnableTemplateCaching([in] boolean isTemplateCachingEnabled);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkView)]
            [uuid(E60094C3-45AF-5A8F-9511-1781D7DF1799)]
            interface IFrameworkView : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.FrameworkViewSource)]
            [uuid(52B5D975-6FA6-5B66-A248-D17443B2BCA0)]
            interface IFrameworkViewSource : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.GridLengthHelper)]
            [uuid(592B4FD5-6564-54E0-87D6-1C41939ED499)]
            interface IGridLengthHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.GridLengthHelper)]
            [uuid(CEA8881B-4E64-535D-9FCD-B4828D3979B0)]
            interface IGridLengthHelperStatics : IInspectable
            {
                [propget] HRESULT Auto([out] [retval] Microsoft.UI.Xaml.GridLength* value);
                HRESULT FromPixels([in] DOUBLE pixels, [out] [retval] Microsoft.UI.Xaml.GridLength* result);
                HRESULT FromValueAndType([in] DOUBLE value, [in] Microsoft.UI.Xaml.GridUnitType type, [out] [retval] Microsoft.UI.Xaml.GridLength* result);
                HRESULT GetIsAbsolute([in] Microsoft.UI.Xaml.GridLength target, [out] [retval] boolean* result);
                HRESULT GetIsAuto([in] Microsoft.UI.Xaml.GridLength target, [out] [retval] boolean* result);
                HRESULT GetIsStar([in] Microsoft.UI.Xaml.GridLength target, [out] [retval] boolean* result);
                HRESULT Equals([in] Microsoft.UI.Xaml.GridLength target, [in] Microsoft.UI.Xaml.GridLength value, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.LaunchActivatedEventArgs)]
            [uuid(D505CEA9-1BCB-5B29-A8BE-944E00F06F78)]
            interface ILaunchActivatedEventArgs : IInspectable
            {
                [propget] HRESULT Arguments([out] [retval] HSTRING* value);
                [propget] HRESULT UWPLaunchActivatedEventArgs([out] [retval] Windows.ApplicationModel.Activation.LaunchActivatedEventArgs** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.MediaFailedRoutedEventArgs)]
            [uuid(A1DCE737-539B-5E54-99AF-75ECE428BF9B)]
            interface IMediaFailedRoutedEventArgs : IInspectable
            {
                [propget] HRESULT ErrorTrace([out] [retval] HSTRING* value);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(D11FAA49-8D7C-5C62-9D50-68E875A434BB)]
            interface IMemoryInfoPrivate : IInspectable
            {
                HRESULT GetCountOfDescendantUIElements([out] [retval] UINT64* result);
                HRESULT GetEstimatedSizeOfDescendantImages([out] [retval] UINT64* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PointHelper)]
            [uuid(06FCC7A4-6099-5F2E-83A5-F3BE0E2C90AA)]
            interface IPointHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PointHelper)]
            [uuid(B0B2BD44-600B-51B3-A42C-3FD36C1AB042)]
            interface IPointHelperStatics : IInspectable
            {
                HRESULT FromCoordinates([in] FLOAT x, [in] FLOAT y, [out] [retval] Windows.Foundation.Point* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PropertyMetadata)]
            [uuid(B3644425-9464-5434-B0AE-AFF8D3159FE1)]
            interface IPropertyMetadata : IInspectable
            {
                [propget] HRESULT DefaultValue([out] [retval] IInspectable** value);
                [propget] HRESULT CreateDefaultValueCallback([out] [retval] Microsoft.UI.Xaml.CreateDefaultValueCallback** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PropertyMetadata)]
            [uuid(9F420906-111A-5465-91EE-BED14B3E7FEC)]
            interface IPropertyMetadataFactory : IInspectable
            {
                HRESULT CreateInstanceWithDefaultValue([in] IInspectable* defaultValue, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** value);
                HRESULT CreateInstanceWithDefaultValueAndCallback([in] IInspectable* defaultValue, [in] Microsoft.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PropertyMetadata)]
            [uuid(37B8ADD4-7A4A-5CF7-A174-235182CD082E)]
            interface IPropertyMetadataStatics : IInspectable
            {
                [default_overload] [overload("Create")] HRESULT CreateWithDefaultValue([in] IInspectable* defaultValue, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** result);
                [default_overload] [overload("Create")] HRESULT CreateWithDefaultValueAndCallback([in] IInspectable* defaultValue, [in] Microsoft.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** result);
                [overload("Create")] HRESULT CreateWithFactory([in] Microsoft.UI.Xaml.CreateDefaultValueCallback* createDefaultValueCallback, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** result);
                [overload("Create")] HRESULT CreateWithFactoryAndCallback([in] Microsoft.UI.Xaml.CreateDefaultValueCallback* createDefaultValueCallback, [in] Microsoft.UI.Xaml.PropertyChangedCallback* propertyChangedCallback, [out] [retval] Microsoft.UI.Xaml.PropertyMetadata** result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PropertyPath)]
            [uuid(8B0712F6-9E57-53B0-80B1-966A79F60B96)]
            interface IPropertyPath : IInspectable
            {
                [propget] HRESULT Path([out] [retval] HSTRING* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.PropertyPath)]
            [uuid(08A8CCAB-7FF8-5CEC-BD3C-72C98804D989)]
            interface IPropertyPathFactory : IInspectable
            {
                HRESULT CreateInstance([in] HSTRING path, [out] [retval] Microsoft.UI.Xaml.PropertyPath** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.RectHelper)]
            [uuid(5FECE92A-A3D2-5BC0-ACA1-E9E1FA86AE9D)]
            interface IRectHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.RectHelper)]
            [uuid(A9CF37AD-5430-5086-A39F-74F0D1ED1072)]
            interface IRectHelperStatics : IInspectable
            {
                [propget] HRESULT Empty([out] [retval] Windows.Foundation.Rect* value);
                HRESULT FromCoordinatesAndDimensions([in] FLOAT x, [in] FLOAT y, [in] FLOAT width, [in] FLOAT height, [out] [retval] Windows.Foundation.Rect* result);
                HRESULT FromPoints([in] Windows.Foundation.Point point1, [in] Windows.Foundation.Point point2, [out] [retval] Windows.Foundation.Rect* result);
                HRESULT FromLocationAndSize([in] Windows.Foundation.Point location, [in] Windows.Foundation.Size size, [out] [retval] Windows.Foundation.Rect* result);
                HRESULT GetIsEmpty([in] Windows.Foundation.Rect target, [out] [retval] boolean* result);
                HRESULT GetBottom([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* result);
                HRESULT GetLeft([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* result);
                HRESULT GetRight([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* result);
                HRESULT GetTop([in] Windows.Foundation.Rect target, [out] [retval] FLOAT* result);
                HRESULT Contains([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Point point, [out] [retval] boolean* result);
                HRESULT Equals([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect value, [out] [retval] boolean* result);
                HRESULT Intersect([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect rect, [out] [retval] Windows.Foundation.Rect* result);
                [default_overload] [overload("Union")] HRESULT UnionWithPoint([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Point point, [out] [retval] Windows.Foundation.Rect* result);
                [overload("Union")] HRESULT UnionWithRect([in] Windows.Foundation.Rect target, [in] Windows.Foundation.Rect rect, [out] [retval] Windows.Foundation.Rect* result);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(08298572-672B-5053-8A13-31110E24314F)]
            interface IRectHelperStaticsPrivate : IInspectable
            {
                HRESULT DipsRectToPhysicalRect([in] Windows.Foundation.Rect dipsRect, [out] [retval] Windows.Foundation.Rect* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ResourceDictionary)]
            [uuid(1B690975-A710-5783-A6E1-15836F6186C2)]
            interface IResourceDictionary : IInspectable
            {
                [propget] HRESULT Source([out] [retval] Windows.Foundation.Uri** value);
                [propput] HRESULT Source([in] Windows.Foundation.Uri* value);
                [propget] HRESULT MergedDictionaries([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary*>** value);
                [propget] HRESULT ThemeDictionaries([out] [retval] Windows.Foundation.Collections.IMap<IInspectable*, IInspectable*>** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ResourceDictionary)]
            [uuid(EA22A48F-AB71-56F6-A392-D82310C8AA7B)]
            interface IResourceDictionaryFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.ResourceDictionary** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.RoutedEvent)]
            [uuid(B2B432BC-EFCA-575E-9D2A-703F8B9C380F)]
            interface IRoutedEvent : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.RoutedEventArgs)]
            [uuid(0908C407-1C7D-5DE3-9C50-D971C62EC8EC)]
            interface IRoutedEventArgs : IInspectable
            {
                [propget] HRESULT OriginalSource([out] [retval] IInspectable** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.RoutedEventArgs)]
            [uuid(914B02C7-076B-5B89-98E7-6C373379E9AF)]
            interface IRoutedEventArgsFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.RoutedEventArgs** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ScalarTransition)]
            [uuid(C2DA2AC8-814C-5889-B2F4-4EBE4B001EE3)]
            interface IScalarTransition : IInspectable
            {
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ScalarTransition)]
            [uuid(A1650CF8-A15B-54FC-B595-C52491318F58)]
            interface IScalarTransitionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.ScalarTransition** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Setter)]
            [uuid(BBD6074D-686F-5AE1-B8DE-5F16AA30B80A)]
            interface ISetter : IInspectable
            {
                [propget] HRESULT Property([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propput] HRESULT Property([in] Microsoft.UI.Xaml.DependencyProperty* value);
                [propget] HRESULT Value([out] [retval] IInspectable** value);
                [propput] HRESULT Value([in] IInspectable* value);
                [propget] HRESULT Target([out] [retval] Microsoft.UI.Xaml.TargetPropertyPath** value);
                [propput] HRESULT Target([in] Microsoft.UI.Xaml.TargetPropertyPath* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SetterBase)]
            [uuid(5A7C1347-CDA3-55BE-BFEF-5C7582213980)]
            interface ISetterBase : IInspectable
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SetterBaseCollection)]
            [uuid(63BF7C0F-B290-5C0C-9185-3338CD350D7F)]
            interface ISetterBaseCollection : IInspectable
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SetterBase)]
            [uuid(780A1D2F-C4BE-5707-8A8A-4550DC22583E)]
            interface ISetterBaseFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Setter)]
            [uuid(13910A06-A327-5407-AE91-B9D2CC3A7AB5)]
            interface ISetterFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Xaml.DependencyProperty* targetProperty, [in] IInspectable* value, [out] [retval] Microsoft.UI.Xaml.Setter** instance);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SizeChangedEventArgs)]
            [uuid(FE76324E-6DFB-58B1-9DCD-886CA8F9A2EA)]
            interface ISizeChangedEventArgs : IInspectable
            {
                [propget] HRESULT PreviousSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT NewSize([out] [retval] Windows.Foundation.Size* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SizeHelper)]
            [uuid(5DF9EEE1-A2A8-5E55-8668-AFEDC0B36DEB)]
            interface ISizeHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.SizeHelper)]
            [uuid(CFF1B27F-84F1-5B14-9459-764AF5714FE5)]
            interface ISizeHelperStatics : IInspectable
            {
                [propget] HRESULT Empty([out] [retval] Windows.Foundation.Size* value);
                HRESULT FromDimensions([in] FLOAT width, [in] FLOAT height, [out] [retval] Windows.Foundation.Size* result);
                HRESULT GetIsEmpty([in] Windows.Foundation.Size target, [out] [retval] boolean* result);
                HRESULT Equals([in] Windows.Foundation.Size target, [in] Windows.Foundation.Size value, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(3ACB731C-C37D-5F03-9596-AC62990F520C)]
            interface ISourceInfoPrivate : IInspectable
            {
                [propget] HRESULT Line([out] [retval] INT32* value);
                [propput] HRESULT Line([in] INT32 value);
                [propget] HRESULT Column([out] [retval] INT32* value);
                [propput] HRESULT Column([in] INT32 value);
                [propget] HRESULT ParseUri([out] [retval] HSTRING* value);
                [propput] HRESULT ParseUri([in] HSTRING value);
                [propget] HRESULT XbfHash([out] [retval] HSTRING* value);
                [propput] HRESULT XbfHash([in] HSTRING value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.StateTrigger)]
            [uuid(7B098126-1DAB-5B58-ACA7-F2B7DE2E1033)]
            interface IStateTrigger : IInspectable
            {
                [propget] HRESULT IsActive([out] [retval] boolean* value);
                [propput] HRESULT IsActive([in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.StateTriggerBase)]
            [uuid(F07B0F7B-5B94-58AE-8717-22AB093BC131)]
            interface IStateTriggerBase : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.StateTriggerBase)]
            [uuid(E7724D65-FC7E-5C67-BB84-B4C7B020ADC3)]
            interface IStateTriggerBaseFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.StateTriggerBase** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.StateTriggerBase)]
            [uuid(2F695047-335B-5C00-A0D4-2A8FA54544C6)]
            interface IStateTriggerBaseProtected : IInspectable
            {
                HRESULT SetActive([in] boolean IsActive);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.StateTrigger)]
            [uuid(BD60C019-833B-5432-A41D-89D72410EB47)]
            interface IStateTriggerStatics : IInspectable
            {
                [propget] HRESULT IsActiveProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Style)]
            [uuid(65E1D164-572F-5B0E-A80F-9C02441FAC49)]
            interface IStyle : IInspectable
            {
                [propget] HRESULT IsSealed([out] [retval] boolean* value);
                [propget] HRESULT Setters([out] [retval] Microsoft.UI.Xaml.SetterBaseCollection** value);
                [propget] HRESULT TargetType([out] [retval] Windows.UI.Xaml.Interop.TypeName* value);
                [propput] HRESULT TargetType([in] Windows.UI.Xaml.Interop.TypeName value);
                [propget] HRESULT BasedOn([out] [retval] Microsoft.UI.Xaml.Style** value);
                [propput] HRESULT BasedOn([in] Microsoft.UI.Xaml.Style* value);
                HRESULT Seal();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Style)]
            [uuid(C2D924A2-3862-517C-B083-9A9120D7302D)]
            interface IStyleFactory : IInspectable
            {
                HRESULT CreateInstance([in] Windows.UI.Xaml.Interop.TypeName targetType, [out] [retval] Microsoft.UI.Xaml.Style** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TargetPropertyPath)]
            [uuid(B1442F0E-F66B-531C-979B-193FD344E2A8)]
            interface ITargetPropertyPath : IInspectable
            {
                [propget] HRESULT Path([out] [retval] Microsoft.UI.Xaml.PropertyPath** value);
                [propput] HRESULT Path([in] Microsoft.UI.Xaml.PropertyPath* value);
                [propget] HRESULT Target([out] [retval] IInspectable** value);
                [propput] HRESULT Target([in] IInspectable* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TargetPropertyPath)]
            [uuid(894CB11D-5C16-555B-B661-F41B29FD9B21)]
            interface ITargetPropertyPathFactory : IInspectable
            {
                HRESULT CreateInstance([in] Microsoft.UI.Xaml.DependencyProperty* targetProperty, [out] [retval] Microsoft.UI.Xaml.TargetPropertyPath** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ThicknessHelper)]
            [uuid(5E496347-3C49-55EE-B442-530789B42B6F)]
            interface IThicknessHelper : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.ThicknessHelper)]
            [uuid(0E3B81CE-D278-577F-98EA-1B6010F86D7F)]
            interface IThicknessHelperStatics : IInspectable
            {
                HRESULT FromLengths([in] DOUBLE left, [in] DOUBLE top, [in] DOUBLE right, [in] DOUBLE bottom, [out] [retval] Microsoft.UI.Xaml.Thickness* result);
                HRESULT FromUniformLength([in] DOUBLE uniformLength, [out] [retval] Microsoft.UI.Xaml.Thickness* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TriggerAction)]
            [uuid(1FA35464-A690-586C-AEDF-6C88CAC7D14A)]
            interface ITriggerAction : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TriggerAction)]
            [uuid(1E1FAF1A-F614-554A-822A-D98FE46575D1)]
            interface ITriggerActionFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TriggerBase)]
            [uuid(D37DA89D-0D71-58CF-A901-99A7D3E5E434)]
            interface ITriggerBase : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.TriggerBase)]
            [uuid(23088EAA-17EC-51B2-B181-5BEDFA8B8FA4)]
            interface ITriggerBaseFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElement)]
            [uuid(C6A6B834-85F2-5A6A-87E3-125475FFEE44)]
            interface IUIElement : IInspectable
            {
                [propget] HRESULT DesiredSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT AllowDrop([out] [retval] boolean* value);
                [propput] HRESULT AllowDrop([in] boolean value);
                [propget] HRESULT Opacity([out] [retval] DOUBLE* value);
                [propput] HRESULT Opacity([in] DOUBLE value);
                [propget] HRESULT Clip([out] [retval] Microsoft.UI.Xaml.Media.RectangleGeometry** value);
                [propput] HRESULT Clip([in] Microsoft.UI.Xaml.Media.RectangleGeometry* value);
                [propget] HRESULT RenderTransform([out] [retval] Microsoft.UI.Xaml.Media.Transform** value);
                [propput] HRESULT RenderTransform([in] Microsoft.UI.Xaml.Media.Transform* value);
                [propget] HRESULT Projection([out] [retval] Microsoft.UI.Xaml.Media.Projection** value);
                [propput] HRESULT Projection([in] Microsoft.UI.Xaml.Media.Projection* value);
                [propget] HRESULT Transform3D([out] [retval] Microsoft.UI.Xaml.Media.Media3D.Transform3D** value);
                [propput] HRESULT Transform3D([in] Microsoft.UI.Xaml.Media.Media3D.Transform3D* value);
                [propget] HRESULT RenderTransformOrigin([out] [retval] Windows.Foundation.Point* value);
                [propput] HRESULT RenderTransformOrigin([in] Windows.Foundation.Point value);
                [propget] HRESULT IsHitTestVisible([out] [retval] boolean* value);
                [propput] HRESULT IsHitTestVisible([in] boolean value);
                [propget] HRESULT Visibility([out] [retval] Microsoft.UI.Xaml.Visibility* value);
                [propput] HRESULT Visibility([in] Microsoft.UI.Xaml.Visibility value);
                [propget] HRESULT RenderSize([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT UseLayoutRounding([out] [retval] boolean* value);
                [propput] HRESULT UseLayoutRounding([in] boolean value);
                [propget] HRESULT Transitions([out] [retval] Microsoft.UI.Xaml.Media.Animation.TransitionCollection** value);
                [propput] HRESULT Transitions([in] Microsoft.UI.Xaml.Media.Animation.TransitionCollection* value);
                [propget] HRESULT CacheMode([out] [retval] Microsoft.UI.Xaml.Media.CacheMode** value);
                [propput] HRESULT CacheMode([in] Microsoft.UI.Xaml.Media.CacheMode* value);
                [propget] HRESULT IsTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsTapEnabled([in] boolean value);
                [propget] HRESULT IsDoubleTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsDoubleTapEnabled([in] boolean value);
                [propget] HRESULT CanDrag([out] [retval] boolean* value);
                [propput] HRESULT CanDrag([in] boolean value);
                [propget] HRESULT IsRightTapEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsRightTapEnabled([in] boolean value);
                [propget] HRESULT IsHoldingEnabled([out] [retval] boolean* value);
                [propput] HRESULT IsHoldingEnabled([in] boolean value);
                [propget] HRESULT ManipulationMode([out] [retval] Microsoft.UI.Xaml.Input.ManipulationModes* value);
                [propput] HRESULT ManipulationMode([in] Microsoft.UI.Xaml.Input.ManipulationModes value);
                [propget] HRESULT PointerCaptures([out] [retval] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.Pointer*>** value);
                [propget] HRESULT ContextFlyout([out] [retval] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase** value);
                [propput] HRESULT ContextFlyout([in] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase* value);
                [propget] HRESULT CompositeMode([out] [retval] Microsoft.UI.Xaml.Media.ElementCompositeMode* value);
                [propput] HRESULT CompositeMode([in] Microsoft.UI.Xaml.Media.ElementCompositeMode value);
                [propget] HRESULT Lights([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight*>** value);
                [propget] HRESULT CanBeScrollAnchor([out] [retval] boolean* value);
                [propput] HRESULT CanBeScrollAnchor([in] boolean value);
                [propget] HRESULT ExitDisplayModeOnAccessKeyInvoked([out] [retval] boolean* value);
                [propput] HRESULT ExitDisplayModeOnAccessKeyInvoked([in] boolean value);
                [propget] HRESULT IsAccessKeyScope([out] [retval] boolean* value);
                [propput] HRESULT IsAccessKeyScope([in] boolean value);
                [propget] HRESULT AccessKeyScopeOwner([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT AccessKeyScopeOwner([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT AccessKey([out] [retval] HSTRING* value);
                [propput] HRESULT AccessKey([in] HSTRING value);
                [propget] HRESULT KeyTipPlacementMode([out] [retval] Microsoft.UI.Xaml.Input.KeyTipPlacementMode* value);
                [propput] HRESULT KeyTipPlacementMode([in] Microsoft.UI.Xaml.Input.KeyTipPlacementMode value);
                [propget] HRESULT KeyTipHorizontalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT KeyTipHorizontalOffset([in] DOUBLE value);
                [propget] HRESULT KeyTipVerticalOffset([out] [retval] DOUBLE* value);
                [propput] HRESULT KeyTipVerticalOffset([in] DOUBLE value);
                [propget] HRESULT KeyTipTarget([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT KeyTipTarget([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT XYFocusKeyboardNavigation([out] [retval] Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode* value);
                [propput] HRESULT XYFocusKeyboardNavigation([in] Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode value);
                [propget] HRESULT XYFocusUpNavigationStrategy([out] [retval] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy* value);
                [propput] HRESULT XYFocusUpNavigationStrategy([in] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value);
                [propget] HRESULT XYFocusDownNavigationStrategy([out] [retval] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy* value);
                [propput] HRESULT XYFocusDownNavigationStrategy([in] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value);
                [propget] HRESULT XYFocusLeftNavigationStrategy([out] [retval] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy* value);
                [propput] HRESULT XYFocusLeftNavigationStrategy([in] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value);
                [propget] HRESULT XYFocusRightNavigationStrategy([out] [retval] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy* value);
                [propput] HRESULT XYFocusRightNavigationStrategy([in] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy value);
                [propget] HRESULT KeyboardAccelerators([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>** value);
                [propget] HRESULT KeyboardAcceleratorPlacementTarget([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT KeyboardAcceleratorPlacementTarget([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT KeyboardAcceleratorPlacementMode([out] [retval] Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode* value);
                [propput] HRESULT KeyboardAcceleratorPlacementMode([in] Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode value);
                [propget] HRESULT HighContrastAdjustment([out] [retval] Microsoft.UI.Xaml.ElementHighContrastAdjustment* value);
                [propput] HRESULT HighContrastAdjustment([in] Microsoft.UI.Xaml.ElementHighContrastAdjustment value);
                [propget] HRESULT TabFocusNavigation([out] [retval] Microsoft.UI.Xaml.Input.KeyboardNavigationMode* value);
                [propput] HRESULT TabFocusNavigation([in] Microsoft.UI.Xaml.Input.KeyboardNavigationMode value);
                [propget] HRESULT OpacityTransition([out] [retval] Microsoft.UI.Xaml.ScalarTransition** value);
                [propput] HRESULT OpacityTransition([in] Microsoft.UI.Xaml.ScalarTransition* value);
                [propget] HRESULT Translation([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propput] HRESULT Translation([in] Windows.Foundation.Numerics.Vector3 value);
                [propget] HRESULT TranslationTransition([out] [retval] Microsoft.UI.Xaml.Vector3Transition** value);
                [propput] HRESULT TranslationTransition([in] Microsoft.UI.Xaml.Vector3Transition* value);
                [propget] HRESULT Rotation([out] [retval] FLOAT* value);
                [propput] HRESULT Rotation([in] FLOAT value);
                [propget] HRESULT RotationTransition([out] [retval] Microsoft.UI.Xaml.ScalarTransition** value);
                [propput] HRESULT RotationTransition([in] Microsoft.UI.Xaml.ScalarTransition* value);
                [propget] HRESULT Scale([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propput] HRESULT Scale([in] Windows.Foundation.Numerics.Vector3 value);
                [propget] HRESULT ScaleTransition([out] [retval] Microsoft.UI.Xaml.Vector3Transition** value);
                [propput] HRESULT ScaleTransition([in] Microsoft.UI.Xaml.Vector3Transition* value);
                [propget] HRESULT TransformMatrix([out] [retval] Windows.Foundation.Numerics.Matrix4x4* value);
                [propput] HRESULT TransformMatrix([in] Windows.Foundation.Numerics.Matrix4x4 value);
                [propget] HRESULT CenterPoint([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propput] HRESULT CenterPoint([in] Windows.Foundation.Numerics.Vector3 value);
                [propget] HRESULT RotationAxis([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propput] HRESULT RotationAxis([in] Windows.Foundation.Numerics.Vector3 value);
                [propget] HRESULT ActualOffset([out] [retval] Windows.Foundation.Numerics.Vector3* value);
                [propget] HRESULT ActualSize([out] [retval] Windows.Foundation.Numerics.Vector2* value);
                [propget] HRESULT XamlRoot([out] [retval] Microsoft.UI.Xaml.XamlRoot** value);
                [propput] HRESULT XamlRoot([in] Microsoft.UI.Xaml.XamlRoot* value);
                [propget] HRESULT Shadow([out] [retval] Microsoft.UI.Xaml.Media.Shadow** value);
                [propput] HRESULT Shadow([in] Microsoft.UI.Xaml.Media.Shadow* value);
                [propget] HRESULT RasterizationScale([out] [retval] DOUBLE* value);
                [propput] HRESULT RasterizationScale([in] DOUBLE value);
                [propget] HRESULT FocusState([out] [retval] Microsoft.UI.Xaml.FocusState* value);
                [propget] HRESULT UseSystemFocusVisuals([out] [retval] boolean* value);
                [propput] HRESULT UseSystemFocusVisuals([in] boolean value);
                [propget] HRESULT XYFocusLeft([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT XYFocusLeft([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT XYFocusRight([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT XYFocusRight([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT XYFocusUp([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT XYFocusUp([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT XYFocusDown([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                [propput] HRESULT XYFocusDown([in] Microsoft.UI.Xaml.DependencyObject* value);
                [propget] HRESULT IsTabStop([out] [retval] boolean* value);
                [propput] HRESULT IsTabStop([in] boolean value);
                [propget] HRESULT TabIndex([out] [retval] INT32* value);
                [propput] HRESULT TabIndex([in] INT32 value);
                [eventadd] HRESULT KeyUp([in] Microsoft.UI.Xaml.Input.KeyEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyUp([in] EventRegistrationToken token);
                [eventadd] HRESULT KeyDown([in] Microsoft.UI.Xaml.Input.KeyEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT KeyDown([in] EventRegistrationToken token);
                [eventadd] HRESULT GotFocus([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT LostFocus([in] Microsoft.UI.Xaml.RoutedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT DragStarting([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DragStartingEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT DropCompleted([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.DropCompletedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DropCompleted([in] EventRegistrationToken token);
                [eventadd] HRESULT CharacterReceived([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CharacterReceived([in] EventRegistrationToken token);
                [eventadd] HRESULT DragEnter([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragEnter([in] EventRegistrationToken token);
                [eventadd] HRESULT DragLeave([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragLeave([in] EventRegistrationToken token);
                [eventadd] HRESULT DragOver([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DragOver([in] EventRegistrationToken token);
                [eventadd] HRESULT Drop([in] Microsoft.UI.Xaml.DragEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Drop([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerPressed([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerPressed([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerMoved([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerMoved([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerReleased([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerReleased([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerEntered([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerEntered([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerExited([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerExited([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerCaptureLost([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerCaptureLost([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerCanceled([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerCanceled([in] EventRegistrationToken token);
                [eventadd] HRESULT PointerWheelChanged([in] Microsoft.UI.Xaml.Input.PointerEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PointerWheelChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT Tapped([in] Microsoft.UI.Xaml.Input.TappedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Tapped([in] EventRegistrationToken token);
                [eventadd] HRESULT DoubleTapped([in] Microsoft.UI.Xaml.Input.DoubleTappedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT DoubleTapped([in] EventRegistrationToken token);
                [eventadd] HRESULT Holding([in] Microsoft.UI.Xaml.Input.HoldingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Holding([in] EventRegistrationToken token);
                [eventadd] HRESULT ContextRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ContextRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT ContextCanceled([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.RoutedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ContextCanceled([in] EventRegistrationToken token);
                [eventadd] HRESULT RightTapped([in] Microsoft.UI.Xaml.Input.RightTappedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT RightTapped([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationStarting([in] Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationInertiaStarting([in] Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationInertiaStarting([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationStarted([in] Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationStarted([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationDelta([in] Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationDelta([in] EventRegistrationToken token);
                [eventadd] HRESULT ManipulationCompleted([in] Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ManipulationCompleted([in] EventRegistrationToken token);
                [eventadd] HRESULT AccessKeyDisplayRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AccessKeyDisplayRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT AccessKeyDisplayDismissed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AccessKeyDisplayDismissed([in] EventRegistrationToken token);
                [eventadd] HRESULT AccessKeyInvoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT AccessKeyInvoked([in] EventRegistrationToken token);
                [eventadd] HRESULT ProcessKeyboardAccelerators([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT ProcessKeyboardAccelerators([in] EventRegistrationToken token);
                [eventadd] HRESULT GettingFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.GettingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT GettingFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT LosingFocus([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.LosingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT LosingFocus([in] EventRegistrationToken token);
                [eventadd] HRESULT NoFocusCandidateFound([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT NoFocusCandidateFound([in] EventRegistrationToken token);
                [eventadd] HRESULT PreviewKeyDown([in] Microsoft.UI.Xaml.Input.KeyEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PreviewKeyDown([in] EventRegistrationToken token);
                [eventadd] HRESULT PreviewKeyUp([in] Microsoft.UI.Xaml.Input.KeyEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT PreviewKeyUp([in] EventRegistrationToken token);
                [eventadd] HRESULT BringIntoViewRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT BringIntoViewRequested([in] EventRegistrationToken token);
                HRESULT Measure([in] Windows.Foundation.Size availableSize);
                HRESULT Arrange([in] Windows.Foundation.Rect finalRect);
                HRESULT CapturePointer([in] Microsoft.UI.Xaml.Input.Pointer* value, [out] [retval] boolean* result);
                HRESULT ReleasePointerCapture([in] Microsoft.UI.Xaml.Input.Pointer* value);
                HRESULT ReleasePointerCaptures();
                HRESULT AddHandler([in] Microsoft.UI.Xaml.RoutedEvent* routedEvent, [in] IInspectable* handler, [in] boolean handledEventsToo);
                HRESULT RemoveHandler([in] Microsoft.UI.Xaml.RoutedEvent* routedEvent, [in] IInspectable* handler);
                HRESULT TransformToVisual([in] Microsoft.UI.Xaml.UIElement* visual, [out] [retval] Microsoft.UI.Xaml.Media.GeneralTransform** result);
                HRESULT InvalidateMeasure();
                HRESULT InvalidateArrange();
                HRESULT UpdateLayout();
                HRESULT CancelDirectManipulations([out] [retval] boolean* result);
                HRESULT StartDragAsync([in] Microsoft.UI.Input.Experimental.ExpPointerPoint* pointerPoint, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation>** operation);
                [overload("StartBringIntoView")] HRESULT StartBringIntoView();
                [overload("StartBringIntoView")] HRESULT StartBringIntoViewWithOptions([in] Microsoft.UI.Xaml.BringIntoViewOptions* options);
                HRESULT TryInvokeKeyboardAccelerator([in] Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs* args);
                HRESULT Focus([in] Microsoft.UI.Xaml.FocusState value, [out] [retval] boolean* result);
                HRESULT StartAnimation([in] Microsoft.UI.Composition.ICompositionAnimationBase* animation);
                HRESULT StopAnimation([in] Microsoft.UI.Composition.ICompositionAnimationBase* animation);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElement)]
            [uuid(14D1D309-ADD0-5CCB-B946-77488CD70F87)]
            interface IUIElementFactory : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElement)]
            [uuid(9034F41E-AB7B-59E7-8168-50DE6B689DDE)]
            interface IUIElementOverrides : IInspectable
            {
                HRESULT OnCreateAutomationPeer([out] [retval] Microsoft.UI.Xaml.Automation.Peers.AutomationPeer** result);
                HRESULT OnDisconnectVisualChildren();
                HRESULT FindSubElementsForTouchTargeting([in] Windows.Foundation.Point point, [in] Windows.Foundation.Rect boundingRect, [out] [retval] Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>*>** result);
                HRESULT GetChildrenInTabFocusOrder([out] [retval] Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject*>** result);
                HRESULT OnKeyboardAcceleratorInvoked([in] Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs* args);
                HRESULT OnProcessKeyboardAccelerators([in] Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs* args);
                HRESULT OnBringIntoViewRequested([in] Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs* e);
                HRESULT PopulatePropertyInfoOverride([in] HSTRING propertyName, [in] Microsoft.UI.Composition.AnimationPropertyInfo* animationPropertyInfo);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElement)]
            [uuid(DAF64AC6-6A6D-5F58-B326-296BF114CBBA)]
            interface IUIElementProtected : IInspectable
            {
                [propget] HRESULT ProtectedCursor([out] [retval] Windows.UI.Core.CoreCursor** value);
                [propput] HRESULT ProtectedCursor([in] Windows.UI.Core.CoreCursor* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElement)]
            [uuid(D2921D87-3584-5E22-8A3A-C2C78DAB4F6E)]
            interface IUIElementStatics : IInspectable
            {
                [propget] HRESULT KeyDownEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT KeyUpEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerEnteredEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerPressedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerMovedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerReleasedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerExitedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerCaptureLostEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerCanceledEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PointerWheelChangedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT TappedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DoubleTappedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT HoldingEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT RightTappedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationStartingEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationInertiaStartingEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationStartedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationDeltaEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ManipulationCompletedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragEnterEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragLeaveEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DragOverEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT DropEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT GettingFocusEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT LosingFocusEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT NoFocusCandidateFoundEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PreviewKeyDownEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT CharacterReceivedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT PreviewKeyUpEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT BringIntoViewRequestedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT ContextRequestedEvent([out] [retval] Microsoft.UI.Xaml.RoutedEvent** value);
                [propget] HRESULT AllowDropProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT OpacityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ClipProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT RenderTransformProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ProjectionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT Transform3DProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT RenderTransformOriginProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsHitTestVisibleProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT VisibilityProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT UseLayoutRoundingProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT TransitionsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CacheModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsTapEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsDoubleTapEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CanDragProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsRightTapEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsHoldingEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ManipulationModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT PointerCapturesProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ContextFlyoutProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CompositeModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT LightsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT CanBeScrollAnchorProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ExitDisplayModeOnAccessKeyInvokedProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsAccessKeyScopeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT AccessKeyScopeOwnerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT AccessKeyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyTipPlacementModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyTipHorizontalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyTipVerticalOffsetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyTipTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusKeyboardNavigationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusUpNavigationStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusDownNavigationStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusLeftNavigationStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusRightNavigationStrategyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyboardAcceleratorPlacementTargetProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT KeyboardAcceleratorPlacementModeProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT HighContrastAdjustmentProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT TabFocusNavigationProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT ShadowProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT FocusStateProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT UseSystemFocusVisualsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusLeftProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusRightProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusUpProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT XYFocusDownProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT IsTabStopProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                [propget] HRESULT TabIndexProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                HRESULT TryStartDirectManipulation([in] Microsoft.UI.Xaml.Input.Pointer* value, [out] [retval] boolean* result);
                HRESULT RegisterAsScrollPort([in] Microsoft.UI.Xaml.UIElement* element);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(B35B8888-C508-52DC-AF8F-8A3C38ADBB86)]
            interface IUIElementStaticsPrivate : IInspectable
            {
                HRESULT InternalGetIsEnabled([in] Microsoft.UI.Xaml.UIElement* element, [out] [retval] boolean* result);
                HRESULT InternalPutIsEnabled([in] Microsoft.UI.Xaml.UIElement* element, [in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UIElementWeakCollection)]
            [uuid(B4D69F09-D494-5BC8-AE68-B6307D845049)]
            interface IUIElementWeakCollectionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.UIElementWeakCollection** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.UnhandledExceptionEventArgs)]
            [uuid(59EAEBA9-8F9C-5BE7-9B3B-820960FAA220)]
            interface IUnhandledExceptionEventArgs : IInspectable
            {
                [propget] HRESULT Exception([out] [retval] HRESULT* value);
                [propget] HRESULT Message([out] [retval] HSTRING* value);
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Vector3Transition)]
            [uuid(0C408BB9-F9A2-55D7-8AED-143D36D603F2)]
            interface IVector3Transition : IInspectable
            {
                [propget] HRESULT Duration([out] [retval] Windows.Foundation.TimeSpan* value);
                [propput] HRESULT Duration([in] Windows.Foundation.TimeSpan value);
                [propget] HRESULT Components([out] [retval] Microsoft.UI.Xaml.Vector3TransitionComponents* value);
                [propput] HRESULT Components([in] Microsoft.UI.Xaml.Vector3TransitionComponents value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Vector3Transition)]
            [uuid(A3A084FC-B965-534B-900F-78E288129232)]
            interface IVector3TransitionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Vector3Transition** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualState)]
            [uuid(4BB32AE8-0E28-5521-A7F5-66B661372994)]
            interface IVisualState : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propget] HRESULT Storyboard([out] [retval] Microsoft.UI.Xaml.Media.Animation.Storyboard** value);
                [propput] HRESULT Storyboard([in] Microsoft.UI.Xaml.Media.Animation.Storyboard* value);
                [propget] HRESULT Setters([out] [retval] Microsoft.UI.Xaml.SetterBaseCollection** value);
                [propget] HRESULT StateTriggers([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.StateTriggerBase*>** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateChangedEventArgs)]
            [uuid(11DE9510-A195-577B-88C8-06391618868C)]
            interface IVisualStateChangedEventArgs : IInspectable
            {
                [propget] HRESULT OldState([out] [retval] Microsoft.UI.Xaml.VisualState** value);
                [propput] HRESULT OldState([in] Microsoft.UI.Xaml.VisualState* value);
                [propget] HRESULT NewState([out] [retval] Microsoft.UI.Xaml.VisualState** value);
                [propput] HRESULT NewState([in] Microsoft.UI.Xaml.VisualState* value);
                [propget] HRESULT Control([out] [retval] Microsoft.UI.Xaml.Controls.Control** value);
                [propput] HRESULT Control([in] Microsoft.UI.Xaml.Controls.Control* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateGroup)]
            [uuid(8DFD691B-710C-5D6D-B71A-7A7F5ED54AC7)]
            interface IVisualStateGroup : IInspectable
            {
                [propget] HRESULT Name([out] [retval] HSTRING* value);
                [propget] HRESULT Transitions([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualTransition*>** value);
                [propget] HRESULT States([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualState*>** value);
                [propget] HRESULT CurrentState([out] [retval] Microsoft.UI.Xaml.VisualState** value);
                [eventadd] HRESULT CurrentStateChanged([in] Microsoft.UI.Xaml.VisualStateChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CurrentStateChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT CurrentStateChanging([in] Microsoft.UI.Xaml.VisualStateChangedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CurrentStateChanging([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateManager)]
            [uuid(342C8D32-AD61-5925-93D1-0C704DF2A7D1)]
            interface IVisualStateManager : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateManager)]
            [uuid(713DAF82-92B3-58F2-8FC1-B0D9A2CAD03C)]
            interface IVisualStateManagerFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.VisualStateManager** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateManager)]
            [uuid(E3F8E9C9-9432-514C-923E-142CD8C82730)]
            interface IVisualStateManagerOverrides : IInspectable
            {
                HRESULT GoToStateCore([in] Microsoft.UI.Xaml.Controls.Control* control, [in] Microsoft.UI.Xaml.FrameworkElement* templateRoot, [in] HSTRING stateName, [in] Microsoft.UI.Xaml.VisualStateGroup* group, [in] Microsoft.UI.Xaml.VisualState* state, [in] boolean useTransitions, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateManager)]
            [uuid(0F008013-787F-5599-A5AD-0A10B988ED24)]
            interface IVisualStateManagerProtected : IInspectable
            {
                HRESULT RaiseCurrentStateChanging([in] Microsoft.UI.Xaml.VisualStateGroup* stateGroup, [in] Microsoft.UI.Xaml.VisualState* oldState, [in] Microsoft.UI.Xaml.VisualState* newState, [in] Microsoft.UI.Xaml.Controls.Control* control);
                HRESULT RaiseCurrentStateChanged([in] Microsoft.UI.Xaml.VisualStateGroup* stateGroup, [in] Microsoft.UI.Xaml.VisualState* oldState, [in] Microsoft.UI.Xaml.VisualState* newState, [in] Microsoft.UI.Xaml.Controls.Control* control);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualStateManager)]
            [uuid(A4D5147D-88C3-57ED-AD83-245DF5F6B50D)]
            interface IVisualStateManagerStatics : IInspectable
            {
                HRESULT GetVisualStateGroups([in] Microsoft.UI.Xaml.FrameworkElement* obj, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualStateGroup*>** result);
                [propget] HRESULT CustomVisualStateManagerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                HRESULT GetCustomVisualStateManager([in] Microsoft.UI.Xaml.FrameworkElement* obj, [out] [retval] Microsoft.UI.Xaml.VisualStateManager** result);
                HRESULT SetCustomVisualStateManager([in] Microsoft.UI.Xaml.FrameworkElement* obj, [in] Microsoft.UI.Xaml.VisualStateManager* value);
                HRESULT GoToState([in] Microsoft.UI.Xaml.Controls.Control* control, [in] HSTRING stateName, [in] boolean useTransitions, [out] [retval] boolean* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualTransition)]
            [uuid(DD21AF54-2CE1-59DE-9FD1-2B45F6BF6581)]
            interface IVisualTransition : IInspectable
            {
                [propget] HRESULT GeneratedDuration([out] [retval] Microsoft.UI.Xaml.Duration* value);
                [propput] HRESULT GeneratedDuration([in] Microsoft.UI.Xaml.Duration value);
                [propget] HRESULT GeneratedEasingFunction([out] [retval] Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase** value);
                [propput] HRESULT GeneratedEasingFunction([in] Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase* value);
                [propget] HRESULT To([out] [retval] HSTRING* value);
                [propput] HRESULT To([in] HSTRING value);
                [propget] HRESULT From([out] [retval] HSTRING* value);
                [propput] HRESULT From([in] HSTRING value);
                [propget] HRESULT Storyboard([out] [retval] Microsoft.UI.Xaml.Media.Animation.Storyboard** value);
                [propput] HRESULT Storyboard([in] Microsoft.UI.Xaml.Media.Animation.Storyboard* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.VisualTransition)]
            [uuid(F3E74C0D-0B5B-5920-A309-08CB6BF2A739)]
            interface IVisualTransitionFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.VisualTransition** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Window)]
            [uuid(8DE74F65-EA02-5380-BA58-28B3FC36BAE9)]
            interface IWindow : IInspectable
            {
                [propget] HRESULT Bounds([out] [retval] Windows.Foundation.Rect* value);
                [propget] HRESULT Visible([out] [retval] boolean* value);
                [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propput] HRESULT Content([in] Microsoft.UI.Xaml.UIElement* value);
                [propget] HRESULT CoreWindow([out] [retval] Windows.UI.Core.CoreWindow** value);
                [propget] HRESULT Compositor([out] [retval] Microsoft.UI.Composition.Compositor** value);
                [propget] HRESULT Dispatcher([out] [retval] Windows.UI.Core.CoreDispatcher** value);
                [propget] HRESULT DispatcherQueue([out] [retval] Microsoft.System.DispatcherQueue** value);
                [propget] HRESULT Title([out] [retval] HSTRING* value);
                [propput] HRESULT Title([in] HSTRING value);
                [eventadd] HRESULT Activated([in] Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowActivatedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Activated([in] EventRegistrationToken token);
                [eventadd] HRESULT Closed([in] Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Closed([in] EventRegistrationToken token);
                [eventadd] HRESULT SizeChanged([in] Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowSizeChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT SizeChanged([in] EventRegistrationToken token);
                [eventadd] HRESULT VisibilityChanged([in] Windows.Foundation.TypedEventHandler<IInspectable*, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT VisibilityChanged([in] EventRegistrationToken token);
                HRESULT Activate();
                HRESULT Close();
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.WindowActivatedEventArgs)]
            [uuid(C723A5EA-82C4-5DD6-861B-70EF573B88D6)]
            interface IWindowActivatedEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
                [propget] HRESULT WindowActivationState([out] [retval] Microsoft.UI.Xaml.WindowActivationState* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.WindowCreatedEventArgs)]
            [uuid(C407E71B-FE7F-50E8-B41C-BE6DF3113DD8)]
            interface IWindowCreatedEventArgs : IInspectable
            {
                [propget] HRESULT Window([out] [retval] Microsoft.UI.Xaml.Window** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.WindowEventArgs)]
            [uuid(1140827C-FE0A-5268-BC2B-F4492C2CCB49)]
            interface IWindowEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Window)]
            [uuid(F0441536-AFEF-5222-918F-324A9B2DEC75)]
            interface IWindowFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Window** value);
            }

            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [uuid(F5DEF8F6-95C2-55CB-B1A4-551B9DA34220)]
            interface IWindowPrivate : IInspectable
            {
                [propget] HRESULT TransparentBackground([out] [retval] boolean* value);
                [propput] HRESULT TransparentBackground([in] boolean value);
                HRESULT Show();
                HRESULT Hide();
                HRESULT MoveWindow([in] INT32 x, [in] INT32 y, [in] INT32 width, [in] INT32 height);
                HRESULT SetAtlasSizeHint([in] UINT32 width, [in] UINT32 height);
                HRESULT ReleaseGraphicsDeviceOnSuspend([in] boolean enable);
                HRESULT SetAtlasRequestCallback([in] Microsoft.UI.Xaml.IAtlasRequestCallback* callback);
                HRESULT GetWindowContentBoundsForElement([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] Windows.Foundation.Rect* result);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.WindowSizeChangedEventArgs)]
            [uuid(542F6F2C-4B64-5C72-A7A5-3A7E0664B8FF)]
            interface IWindowSizeChangedEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
                [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.Window)]
            [uuid(8CC985E3-A41A-5DF4-B531-D3A1788D86C5)]
            interface IWindowStatics : IInspectable
            {
                [propget] HRESULT Current([out] [retval] Microsoft.UI.Xaml.Window** value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs)]
            [uuid(7BB24A6D-070C-5CB6-8E9C-547905BE8265)]
            interface IWindowVisibilityChangedEventArgs : IInspectable
            {
                [propget] HRESULT Handled([out] [retval] boolean* value);
                [propput] HRESULT Handled([in] boolean value);
                [propget] HRESULT Visible([out] [retval] boolean* value);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.XamlRoot)]
            [uuid(60CB215A-AD15-520A-8B01-4416824F0441)]
            interface IXamlRoot : IInspectable
            {
                [propget] HRESULT Content([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* value);
                [propget] HRESULT RasterizationScale([out] [retval] DOUBLE* value);
                [propget] HRESULT IsHostVisible([out] [retval] boolean* value);
                [eventadd] HRESULT Changed([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot*, Microsoft.UI.Xaml.XamlRootChangedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT Changed([in] EventRegistrationToken token);
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [exclusiveto(Microsoft.UI.Xaml.XamlRootChangedEventArgs)]
            [uuid(61D2C719-F8A1-515A-902C-CFA498BA7A7F)]
            interface IXamlRootChangedEventArgs : IInspectable
            {
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [uuid(68B3A2DF-8173-539F-B524-C8A2348F5AFB)]
            interface IXamlServiceProvider : IInspectable
            {
                HRESULT GetService([in] Windows.UI.Xaml.Interop.TypeName type, [out] [retval] IInspectable** result);
            }

            [composable(Microsoft.UI.Xaml.IAdaptiveTriggerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IAdaptiveTriggerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass AdaptiveTrigger : Microsoft.UI.Xaml.StateTriggerBase
            {
                [default] interface Microsoft.UI.Xaml.IAdaptiveTrigger;
            }

            [composable(Microsoft.UI.Xaml.IApplicationFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IApplicationStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass Application
            {
                [default] interface Microsoft.UI.Xaml.IApplication;
                [overridable] interface Microsoft.UI.Xaml.IApplicationOverrides;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass ApplicationInitializationCallbackParams
            {
                [default] interface Microsoft.UI.Xaml.IApplicationInitializationCallbackParams;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass BindingFailedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IBindingFailedEventArgs;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass BringIntoViewOptions
            {
                [default] interface Microsoft.UI.Xaml.IBringIntoViewOptions;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass BringIntoViewRequestedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IBrushTransitionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass BrushTransition
            {
                [default] interface Microsoft.UI.Xaml.IBrushTransition;
            }

            [composable(Microsoft.UI.Xaml.IColorPaletteResourcesFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ColorPaletteResources : Microsoft.UI.Xaml.ResourceDictionary
            {
                [default] interface Microsoft.UI.Xaml.IColorPaletteResources;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.ICornerRadiusHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass CornerRadiusHelper
            {
                [default] interface Microsoft.UI.Xaml.ICornerRadiusHelper;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DataContextChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IDataContextChangedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IDataTemplateFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IDataTemplateStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass DataTemplate : Microsoft.UI.Xaml.FrameworkTemplate
            {
                [default] interface Microsoft.UI.Xaml.IDataTemplate;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.IElementFactory;
            }

            [composable(Microsoft.UI.Xaml.IDataTemplateKeyFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DataTemplateKey
            {
                [default] interface Microsoft.UI.Xaml.IDataTemplateKey;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DebugSettings
            {
                [default] interface Microsoft.UI.Xaml.IDebugSettings;
            }

            [composable(Microsoft.UI.Xaml.IDependencyObjectFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IDependencyObject;
            }

            [composable(Microsoft.UI.Xaml.IDependencyObjectCollectionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DependencyObjectCollection : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.DependencyObject*>;
                interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.DependencyObject*>;
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject*>;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IDependencyPropertyStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass DependencyProperty
            {
                [default] interface Microsoft.UI.Xaml.IDependencyProperty;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DependencyPropertyChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IDispatcherTimerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DispatcherTimer
            {
                [default] interface Microsoft.UI.Xaml.IDispatcherTimer;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DragEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IDragEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DragOperationDeferral
            {
                [default] interface Microsoft.UI.Xaml.IDragOperationDeferral;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DragStartingEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IDragStartingEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DragUI
            {
                [default] interface Microsoft.UI.Xaml.IDragUI;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass DragUIOverride
            {
                [default] interface Microsoft.UI.Xaml.IDragUIOverride;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass DropCompletedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IDropCompletedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IDurationHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass DurationHelper
            {
                [default] interface Microsoft.UI.Xaml.IDurationHelper;
            }

            [activatable(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IDxamlCoreTestHooksStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
            [threading(both)]
            runtimeclass DxamlCoreTestHooks
            {
                [default] interface Microsoft.UI.Xaml.IDxamlCoreTestHooks;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass EffectiveViewportChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IElementFactoryGetArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ElementFactoryGetArgs
            {
                [default] interface Microsoft.UI.Xaml.IElementFactoryGetArgs;
            }

            [composable(Microsoft.UI.Xaml.IElementFactoryRecycleArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ElementFactoryRecycleArgs
            {
                [default] interface Microsoft.UI.Xaml.IElementFactoryRecycleArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IElementSoundPlayerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass ElementSoundPlayer
            {
                [default] interface Microsoft.UI.Xaml.IElementSoundPlayer;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass EventTrigger : Microsoft.UI.Xaml.TriggerBase
            {
                [default] interface Microsoft.UI.Xaml.IEventTrigger;
            }

            [composable(Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ExceptionRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IExceptionRoutedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IFrameworkElementFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IFrameworkElementStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass FrameworkElement : Microsoft.UI.Xaml.UIElement
            {
                [default] interface Microsoft.UI.Xaml.IFrameworkElement;
                [protected] interface Microsoft.UI.Xaml.IFrameworkElementProtected;
                [overridable] interface Microsoft.UI.Xaml.IFrameworkElementOverrides;
            }

            [composable(Microsoft.UI.Xaml.IFrameworkTemplateFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass FrameworkTemplate : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IFrameworkTemplate;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass FrameworkView
            {
                [default] interface Microsoft.UI.Xaml.IFrameworkView;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.ApplicationModel.Core.IFrameworkView;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass FrameworkViewSource
            {
                [default] interface Microsoft.UI.Xaml.IFrameworkViewSource;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.ApplicationModel.Core.IFrameworkViewSource;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IGridLengthHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass GridLengthHelper
            {
                [default] interface Microsoft.UI.Xaml.IGridLengthHelper;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass LaunchActivatedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.ILaunchActivatedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass MediaFailedRoutedEventArgs : Microsoft.UI.Xaml.ExceptionRoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IMediaFailedRoutedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IPointHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass PointHelper
            {
                [default] interface Microsoft.UI.Xaml.IPointHelper;
            }

            [composable(Microsoft.UI.Xaml.IPropertyMetadataFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IPropertyMetadataStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass PropertyMetadata
            {
                [default] interface Microsoft.UI.Xaml.IPropertyMetadata;
            }

            [activatable(Microsoft.UI.Xaml.IPropertyPathFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass PropertyPath : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IPropertyPath;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IRectHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass RectHelper
            {
                [default] interface Microsoft.UI.Xaml.IRectHelper;
            }

            [composable(Microsoft.UI.Xaml.IResourceDictionaryFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ResourceDictionary : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IResourceDictionary;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.Foundation.Collections.IMap<IInspectable*, IInspectable*>;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<IInspectable*, IInspectable*>*>;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass RoutedEvent
            {
                [default] interface Microsoft.UI.Xaml.IRoutedEvent;
            }

            [composable(Microsoft.UI.Xaml.IRoutedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IRoutedEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IScalarTransitionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass ScalarTransition
            {
                [default] interface Microsoft.UI.Xaml.IScalarTransition;
            }

            [activatable(Microsoft.UI.Xaml.ISetterFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Setter : Microsoft.UI.Xaml.SetterBase
            {
                [default] interface Microsoft.UI.Xaml.ISetter;
            }

            [composable(Microsoft.UI.Xaml.ISetterBaseFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass SetterBase : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.ISetterBase;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass SetterBaseCollection
            {
                [default] interface Microsoft.UI.Xaml.ISetterBaseCollection;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase*>;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase*>;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass SizeChangedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.ISizeChangedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.ISizeHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass SizeHelper
            {
                [default] interface Microsoft.UI.Xaml.ISizeHelper;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IStateTriggerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass StateTrigger : Microsoft.UI.Xaml.StateTriggerBase
            {
                [default] interface Microsoft.UI.Xaml.IStateTrigger;
            }

            [composable(Microsoft.UI.Xaml.IStateTriggerBaseFactory, protected, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass StateTriggerBase : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IStateTriggerBase;
                [protected] interface Microsoft.UI.Xaml.IStateTriggerBaseProtected;
            }

            [activatable(Microsoft.UI.Xaml.IStyleFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Style : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IStyle;
            }

            [activatable(Microsoft.UI.Xaml.ITargetPropertyPathFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass TargetPropertyPath
            {
                [default] interface Microsoft.UI.Xaml.ITargetPropertyPath;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IThicknessHelperStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass ThicknessHelper
            {
                [default] interface Microsoft.UI.Xaml.IThicknessHelper;
            }

            [composable(Microsoft.UI.Xaml.ITriggerActionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass TriggerAction : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.ITriggerAction;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass TriggerActionCollection
            {
                [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerAction*>;
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerAction*>;
            }

            [composable(Microsoft.UI.Xaml.ITriggerBaseFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass TriggerBase : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.ITriggerBase;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass TriggerCollection
            {
                [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase*>;
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase*>;
            }

            [composable(Microsoft.UI.Xaml.IUIElementFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IUIElementStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass UIElement : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IUIElement;
                [protected] interface Microsoft.UI.Xaml.IUIElementProtected;
                [overridable] interface Microsoft.UI.Xaml.IUIElementOverrides;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Composition.IAnimationObject;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Composition.IVisualElement;
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Composition.IVisualElement2;
            }

            [composable(Microsoft.UI.Xaml.IUIElementWeakCollectionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass UIElementWeakCollection
            {
                [default] interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement*>;
                interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement*>;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass UnhandledExceptionEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IUnhandledExceptionEventArgs;
            }

            [composable(Microsoft.UI.Xaml.IVector3TransitionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Vector3Transition
            {
                [default] interface Microsoft.UI.Xaml.IVector3Transition;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass VisualState : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IVisualState;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass VisualStateChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IVisualStateChangedEventArgs;
            }

            [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass VisualStateGroup : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IVisualStateGroup;
            }

            [composable(Microsoft.UI.Xaml.IVisualStateManagerFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IVisualStateManagerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass VisualStateManager : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IVisualStateManager;
                [protected] interface Microsoft.UI.Xaml.IVisualStateManagerProtected;
                [overridable] interface Microsoft.UI.Xaml.IVisualStateManagerOverrides;
            }

            [composable(Microsoft.UI.Xaml.IVisualTransitionFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass VisualTransition : Microsoft.UI.Xaml.DependencyObject
            {
                [default] interface Microsoft.UI.Xaml.IVisualTransition;
            }

            [composable(Microsoft.UI.Xaml.IWindowFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Microsoft.UI.Xaml.IWindowStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [threading(both)]
            runtimeclass Window
            {
                [default] interface Microsoft.UI.Xaml.IWindow;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowActivatedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IWindowActivatedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowCreatedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IWindowCreatedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IWindowEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowSizeChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IWindowSizeChangedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowVisibilityChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass XamlRoot
            {
                [default] interface Microsoft.UI.Xaml.IXamlRoot;
            }

            [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
            [marshaling_behavior(agile)]
            runtimeclass XamlRootChangedEventArgs
            {
                [default] interface Microsoft.UI.Xaml.IXamlRootChangedEventArgs;
            }
        }
    }
}
