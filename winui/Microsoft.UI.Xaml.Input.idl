//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Input.Experimental.idl";
import "Microsoft.UI.Xaml.idl";
import "Microsoft.UI.Xaml.Controls.idl";
import "Microsoft.UI.Xaml.Documents.idl";
import "Windows.Devices.Input.idl";
import "Windows.System.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Input.idl";

// Forward Declare
namespace Microsoft
{
    namespace UI
    {
        namespace Input
        {
            namespace Experimental
            {
                runtimeclass ExpPointerPoint;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass IconSource;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Documents
            {
                runtimeclass TextElement;
            }
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            typedef enum FocusState FocusState;

            apicontract PrivateApiContract;

            runtimeclass UIElement;

            apicontract WinUIContract;

            runtimeclass XamlRoot;
        }
    }
}
namespace Windows
{
    namespace Devices
    {
        namespace Input
        {
            typedef enum PointerDeviceType PointerDeviceType;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;

        typedef enum VirtualKeyModifiers VirtualKeyModifiers;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            typedef struct CorePhysicalKeyStatus CorePhysicalKeyStatus;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Input
        {
            typedef enum HoldingState HoldingState;

            typedef struct ManipulationDelta ManipulationDelta;

            typedef struct ManipulationVelocities ManipulationVelocities;
        }
    }
}
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                typedef enum FocusInputDeviceKind FocusInputDeviceKind;

                typedef enum FocusNavigationDirection FocusNavigationDirection;

                typedef enum InputScopeNameValue InputScopeNameValue;

                typedef enum KeyTipPlacementMode KeyTipPlacementMode;

                typedef enum KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode;

                typedef enum KeyboardNavigationMode KeyboardNavigationMode;

                typedef enum LastInputDeviceType LastInputDeviceType;

                typedef enum ManipulationModes ManipulationModes;

                typedef enum StandardUICommandKind StandardUICommandKind;

                typedef enum XYFocusKeyboardNavigationMode XYFocusKeyboardNavigationMode;

                typedef enum XYFocusNavigationStrategy XYFocusNavigationStrategy;

                typedef enum XYFocusNavigationStrategyOverride XYFocusNavigationStrategyOverride;

                delegate DoubleTappedEventHandler;

                delegate FocusedElementRemovedEventHandler;

                delegate HoldingEventHandler;

                delegate KeyEventHandler;

                delegate ManipulationCompletedEventHandler;

                delegate ManipulationDeltaEventHandler;

                delegate ManipulationInertiaStartingEventHandler;

                delegate ManipulationStartedEventHandler;

                delegate ManipulationStartingEventHandler;

                delegate PointerEventHandler;

                delegate RightTappedEventHandler;

                delegate TappedEventHandler;

                interface IAccessKeyDisplayDismissedEventArgs;

                interface IAccessKeyDisplayRequestedEventArgs;

                interface IAccessKeyInvokedEventArgs;

                interface IAccessKeyManager;

                interface IAccessKeyManagerStatics;

                interface ICanExecuteRequestedEventArgs;

                interface ICharacterReceivedRoutedEventArgs;

                interface ICommand;

                interface IContextRequestedEventArgs;

                interface IDoubleTappedRoutedEventArgs;

                interface IExecuteRequestedEventArgs;

                interface IFindNextElementOptions;

                interface IFindNextElementOptionsPrivate;

                interface IFocusManager;

                interface IFocusManagerGotFocusEventArgs;

                interface IFocusManagerLostFocusEventArgs;

                interface IFocusManagerStatics;

                interface IFocusManagerStaticsPrivate;

                interface IFocusMovementResult;

                interface IFocusedElementRemovedEventArgs;

                interface IGettingFocusEventArgs;

                interface IHoldingRoutedEventArgs;

                interface IInertiaExpansionBehavior;

                interface IInertiaRotationBehavior;

                interface IInertiaTranslationBehavior;

                interface IInputManagerStatics;

                interface IInputScope;

                interface IInputScopeName;

                interface IInputScopeNameFactory;

                interface IKeyRoutedEventArgs;

                interface IKeyboardAccelerator;

                interface IKeyboardAcceleratorFactory;

                interface IKeyboardAcceleratorInvokedEventArgs;

                interface IKeyboardAcceleratorStatics;

                interface ILosingFocusEventArgs;

                interface IManipulationCompletedRoutedEventArgs;

                interface IManipulationDeltaRoutedEventArgs;

                interface IManipulationInertiaStartingRoutedEventArgs;

                interface IManipulationPivot;

                interface IManipulationPivotFactory;

                interface IManipulationStartedRoutedEventArgs;

                interface IManipulationStartedRoutedEventArgsFactory;

                interface IManipulationStartingRoutedEventArgs;

                interface INoFocusCandidateFoundEventArgs;

                interface IPointer;

                interface IPointerRoutedEventArgs;

                interface IProcessKeyboardAcceleratorEventArgs;

                interface IRightTappedRoutedEventArgs;

                interface IStandardUICommand;

                interface IStandardUICommandFactory;

                interface IStandardUICommandStatics;

                interface ITappedRoutedEventArgs;

                interface IXamlUICommand;

                interface IXamlUICommandFactory;

                interface IXamlUICommandStatics;

                runtimeclass AccessKeyDisplayDismissedEventArgs;

                runtimeclass AccessKeyDisplayRequestedEventArgs;

                runtimeclass AccessKeyInvokedEventArgs;

                runtimeclass AccessKeyManager;

                runtimeclass CanExecuteRequestedEventArgs;

                runtimeclass CharacterReceivedRoutedEventArgs;

                runtimeclass ContextRequestedEventArgs;

                runtimeclass DoubleTappedRoutedEventArgs;

                runtimeclass ExecuteRequestedEventArgs;

                runtimeclass FindNextElementOptions;

                runtimeclass FocusManager;

                runtimeclass FocusManagerGotFocusEventArgs;

                runtimeclass FocusManagerLostFocusEventArgs;

                runtimeclass FocusMovementResult;

                runtimeclass FocusedElementRemovedEventArgs;

                runtimeclass GettingFocusEventArgs;

                runtimeclass HoldingRoutedEventArgs;

                runtimeclass InertiaExpansionBehavior;

                runtimeclass InertiaRotationBehavior;

                runtimeclass InertiaTranslationBehavior;

                runtimeclass InputManager;

                runtimeclass InputScope;

                runtimeclass InputScopeName;

                runtimeclass KeyRoutedEventArgs;

                runtimeclass KeyboardAccelerator;

                runtimeclass KeyboardAcceleratorInvokedEventArgs;

                runtimeclass LosingFocusEventArgs;

                runtimeclass ManipulationCompletedRoutedEventArgs;

                runtimeclass ManipulationDeltaRoutedEventArgs;

                runtimeclass ManipulationInertiaStartingRoutedEventArgs;

                runtimeclass ManipulationPivot;

                runtimeclass ManipulationStartedRoutedEventArgs;

                runtimeclass ManipulationStartingRoutedEventArgs;

                runtimeclass NoFocusCandidateFoundEventArgs;

                runtimeclass Pointer;

                runtimeclass PointerRoutedEventArgs;

                runtimeclass ProcessKeyboardAcceleratorEventArgs;

                runtimeclass RightTappedRoutedEventArgs;

                runtimeclass StandardUICommand;

                runtimeclass TappedRoutedEventArgs;

                runtimeclass XamlUICommand;
            }
        }
    }
}

// Generic instantiations
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.GettingFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.LosingFocusEventArgs*>;

                    interface Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement*, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator*, Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand*, Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand*, Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.GettingFocusEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.LosingFocusEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement*, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs*>;
                }
            }
        }
    }
}

// Type definition
namespace Microsoft
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum FocusInputDeviceKind
                {
                    None           = 0,
                    Mouse          = 1,
                    Touch          = 2,
                    Pen            = 3,
                    Keyboard       = 4,
                    GameController = 5
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum FocusNavigationDirection
                {
                    Next     = 0,
                    Previous = 1,
                    Up       = 2,
                    Down     = 3,
                    Left     = 4,
                    Right    = 5,
                    None     = 6
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum InputScopeNameValue
                {
                    Default                 = 0,
                    Url                     = 1,
                    EmailSmtpAddress        = 5,
                    PersonalFullName        = 7,
                    CurrencyAmountAndSymbol = 20,
                    CurrencyAmount          = 21,
                    DateMonthNumber         = 23,
                    DateDayNumber           = 24,
                    DateYear                = 25,
                    Digits                  = 28,
                    Number                  = 29,
                    Password                = 31,
                    TelephoneNumber         = 32,
                    TelephoneCountryCode    = 33,
                    TelephoneAreaCode       = 34,
                    TelephoneLocalNumber    = 35,
                    TimeHour                = 37,
                    TimeMinutesOrSeconds    = 38,
                    NumberFullWidth         = 39,
                    AlphanumericHalfWidth   = 40,
                    AlphanumericFullWidth   = 41,
                    Hiragana                = 44,
                    KatakanaHalfWidth       = 45,
                    KatakanaFullWidth       = 46,
                    Hanja                   = 47,
                    HangulHalfWidth         = 48,
                    HangulFullWidth         = 49,
                    Search                  = 50,
                    Formula                 = 51,
                    SearchIncremental       = 52,
                    ChineseHalfWidth        = 53,
                    ChineseFullWidth        = 54,
                    NativeScript            = 55,
                    Text                    = 57,
                    Chat                    = 58,
                    NameOrPhoneNumber       = 59,
                    EmailNameOrAddress      = 60,
                    Maps                    = 62,
                    NumericPassword         = 63,
                    NumericPin              = 64,
                    AlphanumericPin         = 65,
                    FormulaNumber           = 67,
                    ChatWithoutEmoji        = 68
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum KeyTipPlacementMode
                {
                    Auto   = 0,
                    Bottom = 1,
                    Top    = 2,
                    Left   = 3,
                    Right  = 4,
                    Center = 5,
                    Hidden = 6
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum KeyboardAcceleratorPlacementMode
                {
                    Auto   = 0,
                    Hidden = 1
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum KeyboardNavigationMode
                {
                    Local = 0,
                    Cycle = 1,
                    Once  = 2
                };

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                enum LastInputDeviceType
                {
                    None            = 0,
                    Mouse           = 1,
                    Touch           = 2,
                    Pen             = 3,
                    Keyboard        = 4,
                    GamepadOrRemote = 5
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [flags]
                enum ManipulationModes
                {
                    None             = 0x0,
                    TranslateX       = 0x1,
                    TranslateY       = 0x2,
                    TranslateRailsX  = 0x4,
                    TranslateRailsY  = 0x8,
                    Rotate           = 0x10,
                    Scale            = 0x20,
                    TranslateInertia = 0x40,
                    RotateInertia    = 0x80,
                    ScaleInertia     = 0x100,
                    All              = 0xFFFF,
                    System           = 0x10000
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum StandardUICommandKind
                {
                    None      = 0,
                    Cut       = 1,
                    Copy      = 2,
                    Paste     = 3,
                    SelectAll = 4,
                    Delete    = 5,
                    Share     = 6,
                    Save      = 7,
                    Open      = 8,
                    Close     = 9,
                    Pause     = 10,
                    Play      = 11,
                    Stop      = 12,
                    Forward   = 13,
                    Backward  = 14,
                    Undo      = 15,
                    Redo      = 16
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum XYFocusKeyboardNavigationMode
                {
                    Auto     = 0,
                    Enabled  = 1,
                    Disabled = 2
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum XYFocusNavigationStrategy
                {
                    Auto                        = 0,
                    Projection                  = 1,
                    NavigationDirectionDistance = 2,
                    RectilinearDistance         = 3
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                enum XYFocusNavigationStrategyOverride
                {
                    None                        = 0,
                    Auto                        = 1,
                    Projection                  = 2,
                    NavigationDirectionDistance = 3,
                    RectilinearDistance         = 4
                };

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(F7A501B9-E277-5611-87B0-0E0607622183)]
                delegate
                    HRESULT DoubleTappedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(BE7AD825-7E45-57C4-8E5E-96F4AFB4DB58)]
                delegate
                    HRESULT FocusedElementRemovedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.FocusedElementRemovedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(FE23C5BD-4984-56B6-B92B-FC9D1216B24E)]
                delegate
                    HRESULT HoldingEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(DB68E7CC-9A2B-527D-9989-25284DACCC03)]
                delegate
                    HRESULT KeyEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.KeyRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(D51DF8DB-71CD-5BFD-8426-767218EE55EC)]
                delegate
                    HRESULT ManipulationCompletedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(83F2D4CE-105F-5392-A38A-B7467B7C2EA5)]
                delegate
                    HRESULT ManipulationDeltaEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(5DE296BD-6F1C-5F60-9180-10705282576C)]
                delegate
                    HRESULT ManipulationInertiaStartingEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(41060669-304C-53AC-9D43-BC311235AAE4)]
                delegate
                    HRESULT ManipulationStartedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(44F528F1-F0E4-505C-A0BB-0C4839B29DF5)]
                delegate
                    HRESULT ManipulationStartingEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(A48A71E1-8BB4-5597-9E31-903A3F6A04FB)]
                delegate
                    HRESULT PointerEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.PointerRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(5070E32F-3DC7-56CF-8FDD-DE1B40D0B472)]
                delegate
                    HRESULT RightTappedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(B60074F3-125B-534E-8F9C-9769BD3F0F64)]
                delegate
                    HRESULT TappedEventHandler([in] IInspectable* sender, [in] Microsoft.UI.Xaml.Input.TappedRoutedEventArgs* e);

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs)]
                [uuid(125A83D8-7F86-5EA9-9063-B9407E644587)]
                interface IAccessKeyDisplayDismissedEventArgs : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs)]
                [uuid(C4ED84D8-2B27-59B1-9CF0-7F9164DE58CB)]
                interface IAccessKeyDisplayRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT PressedKeys([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs)]
                [uuid(D00C11A4-F9FB-5707-9692-98B80BB8546D)]
                interface IAccessKeyInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.AccessKeyManager)]
                [uuid(8F2A4402-A635-53DC-BC17-DA911EABAADE)]
                interface IAccessKeyManager : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.AccessKeyManager)]
                [uuid(3375AEF7-742F-5E84-B76F-C187E08253BF)]
                interface IAccessKeyManagerStatics : IInspectable
                {
                    [propget] HRESULT IsDisplayModeEnabled([out] [retval] boolean* value);
                    [propget] HRESULT AreKeyTipsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreKeyTipsEnabled([in] boolean value);
                    [eventadd] HRESULT IsDisplayModeEnabledChanged([in] Windows.Foundation.TypedEventHandler<IInspectable*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsDisplayModeEnabledChanged([in] EventRegistrationToken token);
                    HRESULT ExitDisplayMode();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs)]
                [uuid(E4BF6D7D-F6EB-53CA-A2D4-C741EC871E38)]
                interface ICanExecuteRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Parameter([out] [retval] IInspectable** value);
                    [propget] HRESULT CanExecute([out] [retval] boolean* value);
                    [propput] HRESULT CanExecute([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs)]
                [uuid(E26CA5BB-34C3-5C1E-9A16-00B80B07A899)]
                interface ICharacterReceivedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Character([out] [retval] WCHAR* value);
                    [propget] HRESULT KeyStatus([out] [retval] Windows.UI.Core.CorePhysicalKeyStatus* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [uuid(E5AF3542-CA67-4081-995B-709DD13792DF)]
                interface ICommand : IInspectable
                {
                    [eventadd] HRESULT CanExecuteChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CanExecuteChanged([in] EventRegistrationToken token);
                    HRESULT CanExecute([in] IInspectable* parameter, [out] [retval] boolean* result);
                    HRESULT Execute([in] IInspectable* parameter);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ContextRequestedEventArgs)]
                [uuid(BCEDCB98-77B5-53C0-802E-FD52F3806E51)]
                interface IContextRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT TryGetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] Windows.Foundation.Point* point, [out] [retval] boolean* returnValue);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs)]
                [uuid(DE9300C0-3707-51AC-A3A2-8BC513A5257A)]
                interface IDoubleTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs)]
                [uuid(E1A9FD0C-34D0-5AE2-8F5D-377E7A8A2708)]
                interface IExecuteRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Parameter([out] [retval] IInspectable** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FindNextElementOptions)]
                [uuid(7F88E76B-7417-5447-AED4-2FABD291BDC6)]
                interface IFindNextElementOptions : IInspectable
                {
                    [propget] HRESULT SearchRoot([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT SearchRoot([in] Microsoft.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT ExclusionRect([out] [retval] Windows.Foundation.Rect* value);
                    [propput] HRESULT ExclusionRect([in] Windows.Foundation.Rect value);
                    [propget] HRESULT HintRect([out] [retval] Windows.Foundation.Rect* value);
                    [propput] HRESULT HintRect([in] Windows.Foundation.Rect value);
                    [propget] HRESULT XYFocusNavigationStrategyOverride([out] [retval] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride* value);
                    [propput] HRESULT XYFocusNavigationStrategyOverride([in] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(98B29E17-62D0-57FD-8937-DC47B8B580A1)]
                interface IFindNextElementOptionsPrivate : IInspectable
                {
                    [propget] HRESULT IgnoreOcclusivity([out] [retval] boolean* value);
                    [propput] HRESULT IgnoreOcclusivity([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusManager)]
                [uuid(9FD07BC5-D2D4-53FE-A31A-846DE8B7A257)]
                interface IFocusManager : IInspectable
                {
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs)]
                [uuid(50ACA341-4519-59CF-83B1-C9C45CFDB816)]
                interface IFocusManagerGotFocusEventArgs : IInspectable
                {
                    [propget] HRESULT NewFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs)]
                [uuid(FDAF2C3F-A22E-5902-ABCE-B60758FBED1E)]
                interface IFocusManagerLostFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusManager)]
                [uuid(E73DCE04-E23A-5FB3-96AB-7DF04C51DFF2)]
                interface IFocusManagerStatics : IInspectable
                {
                    [eventadd] HRESULT GotFocus([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT LostFocus([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT GettingFocus([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.GettingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT GettingFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT LosingFocus([in] Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.LosingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LosingFocus([in] EventRegistrationToken token);
                    HRESULT TryFocusAsync([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.FocusState value, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult*>** operation);
                    [overload("TryMoveFocusAsync")] HRESULT TryMoveFocusAsync([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult*>** operation);
                    [overload("TryMoveFocusAsync")] HRESULT TryMoveFocusWithOptionsAsync([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Microsoft.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult*>** operation);
                    [overload("TryMoveFocus")] HRESULT TryMoveFocusWithOptions([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Microsoft.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] boolean* result);
                    [overload("FindNextElement")] HRESULT FindNextElement([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT FindFirstFocusableElement([in] Microsoft.UI.Xaml.DependencyObject* searchScope, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    HRESULT FindLastFocusableElement([in] Microsoft.UI.Xaml.DependencyObject* searchScope, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [overload("FindNextElement")] HRESULT FindNextElementWithOptions([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Microsoft.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] Microsoft.UI.Xaml.DependencyObject** result);
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElement([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElementWithHint([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.Foundation.Rect hintRect, [out] [retval] Microsoft.UI.Xaml.UIElement** result);
                    [overload("TryMoveFocus")] HRESULT TryMoveFocus([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] boolean* result);
                    [overload("GetFocusedElement")] HRESULT GetFocusedElement([out] [retval] IInspectable** result);
                    [overload("GetFocusedElement")] HRESULT GetFocusedElementWithRoot([in] Microsoft.UI.Xaml.XamlRoot* xamlRoot, [out] [retval] IInspectable** result);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [uuid(870BB840-0A1E-54CC-8A82-06E6199824F9)]
                interface IFocusManagerStaticsPrivate : IInspectable
                {
                    [eventadd] HRESULT FocusedElementRemoved([in] Microsoft.UI.Xaml.Input.FocusedElementRemovedEventHandler* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT FocusedElementRemoved([in] EventRegistrationToken token);
                    HRESULT FindNextFocusWithSearchRootIgnoreEngagement([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] IInspectable* searchRoot, [out] [retval] IInspectable** result);
                    HRESULT FindNextFocusWithSearchRootIgnoreEngagementWithHintRect([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] IInspectable* searchRoot, [in] Windows.Foundation.Rect hintRect, [in] Windows.Foundation.Rect exclusionRect, [out] [retval] IInspectable** result);
                    HRESULT FindNextFocusWithSearchRootIgnoreEngagementWithClip([in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] IInspectable* searchRoot, [in] boolean ignoreClipping, [in] boolean ignoreCone, [out] [retval] IInspectable** result);
                    HRESULT SetEngagedControl([in] IInspectable* engagedControl);
                    [overload("SetFocusedElement")] HRESULT SetFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.FocusState focusState, [in] boolean animateIfBringIntoView, [in] boolean forceBringIntoView, [in] boolean isProcessingTab, [in] boolean isShiftPressed, [out] [retval] boolean* result);
                    [overload("SetFocusedElement")] HRESULT SetFocusedElementWithDirection([in] Microsoft.UI.Xaml.DependencyObject* element, [in] Microsoft.UI.Xaml.FocusState focusState, [in] boolean animateIfBringIntoView, [in] boolean forceBringIntoView, [in] Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusMovementResult)]
                [uuid(A46259FD-3EDD-554B-A188-0A47B71E4E1A)]
                interface IFocusMovementResult : IInspectable
                {
                    [propget] HRESULT Succeeded([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.FocusedElementRemovedEventArgs)]
                [uuid(68B4A7EA-8841-52EE-8875-7DC86CFD9B68)]
                interface IFocusedElementRemovedEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT NewFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT NewFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.GettingFocusEventArgs)]
                [uuid(37FD3AF0-BD3C-5BF5-A9CD-71A1E87AF950)]
                interface IGettingFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT NewFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT NewFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT FocusState([out] [retval] Microsoft.UI.Xaml.FocusState* value);
                    [propget] HRESULT Direction([out] [retval] Microsoft.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Microsoft.UI.Xaml.Input.FocusInputDeviceKind* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                    HRESULT TryCancel([out] [retval] boolean* result);
                    HRESULT TrySetNewFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs)]
                [uuid(05F78DDF-9248-56FE-A72E-8D1BEC2D3FC3)]
                interface IHoldingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT HoldingState([out] [retval] Windows.UI.Input.HoldingState* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InertiaExpansionBehavior)]
                [uuid(D60029B7-F0CD-5AEA-ABE5-7410D09118C6)]
                interface IInertiaExpansionBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredExpansion([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredExpansion([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InertiaRotationBehavior)]
                [uuid(27B4BD03-9149-5691-BCE5-FA33B32C4A81)]
                interface IInertiaRotationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredRotation([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredRotation([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InertiaTranslationBehavior)]
                [uuid(D4F91CF5-3317-5914-B25A-EA6EE55B96D0)]
                interface IInertiaTranslationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredDisplacement([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDisplacement([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InputManager)]
                [uuid(77F40F44-9F61-54A0-A820-C7912D0782C0)]
                interface IInputManagerStatics : IInspectable
                {
                    HRESULT GetLastInputDeviceType([out] [retval] Microsoft.UI.Xaml.Input.LastInputDeviceType* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InputScope)]
                [uuid(76EA58B1-E910-5176-9147-695CC95E7DA2)]
                interface IInputScope : IInspectable
                {
                    [propget] HRESULT Names([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.InputScopeName*>** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InputScopeName)]
                [uuid(EE99A66D-28D0-53CB-82EE-1B6EE58BCC35)]
                interface IInputScopeName : IInspectable
                {
                    [propget] HRESULT NameValue([out] [retval] Microsoft.UI.Xaml.Input.InputScopeNameValue* value);
                    [propput] HRESULT NameValue([in] Microsoft.UI.Xaml.Input.InputScopeNameValue value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.InputScopeName)]
                [uuid(FEEC2EFD-BC09-5CD6-9B47-6D35D1D87C61)]
                interface IInputScopeNameFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Microsoft.UI.Xaml.Input.InputScopeNameValue nameValue, [out] [retval] Microsoft.UI.Xaml.Input.InputScopeName** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(EE357007-A2D6-5C75-9431-05FD66EC7915)]
                interface IKeyRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT KeyStatus([out] [retval] Windows.UI.Core.CorePhysicalKeyStatus* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT OriginalKey([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT DeviceId([out] [retval] HSTRING* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(6F8BF1E2-4E91-5CF9-A6BE-4770CAF3D770)]
                interface IKeyboardAccelerator : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propput] HRESULT Key([in] Windows.System.VirtualKey value);
                    [propget] HRESULT Modifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propput] HRESULT Modifiers([in] Windows.System.VirtualKeyModifiers value);
                    [propget] HRESULT IsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsEnabled([in] boolean value);
                    [propget] HRESULT ScopeOwner([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT ScopeOwner([in] Microsoft.UI.Xaml.DependencyObject* value);
                    [eventadd] HRESULT Invoked([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator*, Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Invoked([in] EventRegistrationToken token);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(CA1D410A-AF2A-51B9-A1DE-6C0AF9F3B598)]
                interface IKeyboardAcceleratorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Input.KeyboardAccelerator** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)]
                [uuid(62C9FDB0-B574-527D-97EB-5C7F674441E0)]
                interface IKeyboardAcceleratorInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT Element([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT KeyboardAccelerator([out] [retval] Microsoft.UI.Xaml.Input.KeyboardAccelerator** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(73E674CA-73F4-5E77-B8D6-FF7852A63B0B)]
                interface IKeyboardAcceleratorStatics : IInspectable
                {
                    [propget] HRESULT KeyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ModifiersProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsEnabledProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ScopeOwnerProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.LosingFocusEventArgs)]
                [uuid(FA0E5FFA-2B1B-52F8-BB66-E35F51E73CF3)]
                interface ILosingFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT NewFocusedElement([out] [retval] Microsoft.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT NewFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT FocusState([out] [retval] Microsoft.UI.Xaml.FocusState* value);
                    [propget] HRESULT Direction([out] [retval] Microsoft.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Microsoft.UI.Xaml.Input.FocusInputDeviceKind* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                    HRESULT TryCancel([out] [retval] boolean* result);
                    HRESULT TrySetNewFocusedElement([in] Microsoft.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)]
                [uuid(932321BA-D590-5000-B169-F3AD2BFD39E3)]
                interface IManipulationCompletedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)]
                [uuid(4CD9A70D-11F5-5AB4-A985-78BA3D21B4A5)]
                interface IManipulationDeltaRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    HRESULT Complete();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)]
                [uuid(C1F5771E-2F23-5EC1-A2AB-BFC5D53EB377)]
                interface IManipulationInertiaStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT ExpansionBehavior([out] [retval] Microsoft.UI.Xaml.Input.InertiaExpansionBehavior** value);
                    [propput] HRESULT ExpansionBehavior([in] Microsoft.UI.Xaml.Input.InertiaExpansionBehavior* value);
                    [propget] HRESULT RotationBehavior([out] [retval] Microsoft.UI.Xaml.Input.InertiaRotationBehavior** value);
                    [propput] HRESULT RotationBehavior([in] Microsoft.UI.Xaml.Input.InertiaRotationBehavior* value);
                    [propget] HRESULT TranslationBehavior([out] [retval] Microsoft.UI.Xaml.Input.InertiaTranslationBehavior** value);
                    [propput] HRESULT TranslationBehavior([in] Microsoft.UI.Xaml.Input.InertiaTranslationBehavior* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationPivot)]
                [uuid(286BABA4-313D-507C-ADC5-F739732CEA27)]
                interface IManipulationPivot : IInspectable
                {
                    [propget] HRESULT Center([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT Center([in] Windows.Foundation.Point value);
                    [propget] HRESULT Radius([out] [retval] DOUBLE* value);
                    [propput] HRESULT Radius([in] DOUBLE value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationPivot)]
                [uuid(67143CCD-EA6C-5FE2-BEF2-ADCBD7AF52FD)]
                interface IManipulationPivotFactory : IInspectable
                {
                    HRESULT CreateInstanceWithCenterAndRadius([in] Windows.Foundation.Point center, [in] DOUBLE radius, [out] [retval] Microsoft.UI.Xaml.Input.ManipulationPivot** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(7168AD4C-E866-5AD7-9229-101677FAE052)]
                interface IManipulationStartedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    HRESULT Complete();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(5681B0DE-3FA7-503E-9C46-A80339760292)]
                interface IManipulationStartedRoutedEventArgsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)]
                [uuid(93A99F86-F5A0-5326-91B0-851C897AF79F)]
                interface IManipulationStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Mode([out] [retval] Microsoft.UI.Xaml.Input.ManipulationModes* value);
                    [propput] HRESULT Mode([in] Microsoft.UI.Xaml.Input.ManipulationModes value);
                    [propget] HRESULT Container([out] [retval] Microsoft.UI.Xaml.UIElement** value);
                    [propput] HRESULT Container([in] Microsoft.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pivot([out] [retval] Microsoft.UI.Xaml.Input.ManipulationPivot** value);
                    [propput] HRESULT Pivot([in] Microsoft.UI.Xaml.Input.ManipulationPivot* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs)]
                [uuid(A2D7153A-CD2A-59CB-A574-AC82E30B9201)]
                interface INoFocusCandidateFoundEventArgs : IInspectable
                {
                    [propget] HRESULT Direction([out] [retval] Microsoft.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Microsoft.UI.Xaml.Input.FocusInputDeviceKind* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.Pointer)]
                [uuid(D2B30FC4-8E01-5B42-BAF3-AADDE8E497C1)]
                interface IPointer : IInspectable
                {
                    [propget] HRESULT PointerId([out] [retval] UINT32* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT IsInContact([out] [retval] boolean* value);
                    [propget] HRESULT IsInRange([out] [retval] boolean* value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)]
                [uuid(52E918F4-A644-53ED-85A3-DFD1A0BEE39F)]
                interface IPointerRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Pointer([out] [retval] Microsoft.UI.Xaml.Input.Pointer** value);
                    [propget] HRESULT KeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT IsGenerated([out] [retval] boolean* value);
                    HRESULT GetCurrentPoint([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Microsoft.UI.Input.Experimental.ExpPointerPoint** result);
                    HRESULT GetIntermediatePoints([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Input.Experimental.ExpPointerPoint*>** result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)]
                [uuid(9BE0D058-3D26-5811-B50A-3BB80CA766C9)]
                interface IProcessKeyboardAcceleratorEventArgs : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT Modifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs)]
                [uuid(9412226C-CC52-57AA-AF2C-ADF2A8EE0BEB)]
                interface IRightTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.StandardUICommand)]
                [uuid(5F395D50-5449-59AB-9CB2-4E3700033F03)]
                interface IStandardUICommand : IInspectable
                {
                    [propget] HRESULT Kind([out] [retval] Microsoft.UI.Xaml.Input.StandardUICommandKind* value);
                    [propput] HRESULT Kind([in] Microsoft.UI.Xaml.Input.StandardUICommandKind value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.StandardUICommand)]
                [uuid(5800F099-3746-5BCF-B1CE-AF3D6BF8E83F)]
                interface IStandardUICommandFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Input.StandardUICommand** value);
                    HRESULT CreateInstanceWithKind([in] Microsoft.UI.Xaml.Input.StandardUICommandKind kind, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Input.StandardUICommand** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.StandardUICommand)]
                [uuid(AB80C197-85CC-5D36-81AA-156CD63BE31A)]
                interface IStandardUICommandStatics : IInspectable
                {
                    [propget] HRESULT KindProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.TappedRoutedEventArgs)]
                [uuid(303C1302-E41C-523F-BDBB-908CBD87743C)]
                interface ITappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Microsoft.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.XamlUICommand)]
                [uuid(A457F2CB-51E0-541C-9C42-DD1DCBDF58FB)]
                interface IXamlUICommand : IInspectable
                {
                    [propget] HRESULT Label([out] [retval] HSTRING* value);
                    [propput] HRESULT Label([in] HSTRING value);
                    [propget] HRESULT IconSource([out] [retval] Microsoft.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Microsoft.UI.Xaml.Controls.IconSource* value);
                    [propget] HRESULT KeyboardAccelerators([out] [retval] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator*>** value);
                    [propget] HRESULT AccessKey([out] [retval] HSTRING* value);
                    [propput] HRESULT AccessKey([in] HSTRING value);
                    [propget] HRESULT Description([out] [retval] HSTRING* value);
                    [propput] HRESULT Description([in] HSTRING value);
                    [propget] HRESULT Command([out] [retval] Microsoft.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT Command([in] Microsoft.UI.Xaml.Input.ICommand* value);
                    [eventadd] HRESULT ExecuteRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand*, Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ExecuteRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT CanExecuteRequested([in] Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.XamlUICommand*, Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CanExecuteRequested([in] EventRegistrationToken token);
                    HRESULT NotifyCanExecuteChanged();
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.XamlUICommand)]
                [uuid(F1F80A20-0E31-5505-8BC3-CDD1F0947F1D)]
                interface IXamlUICommandFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Microsoft.UI.Xaml.Input.XamlUICommand** value);
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [exclusiveto(Microsoft.UI.Xaml.Input.XamlUICommand)]
                [uuid(981DBDA6-CDCB-5E35-B24B-C4F60BA148D9)]
                interface IXamlUICommandStatics : IInspectable
                {
                    [propget] HRESULT LabelProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconSourceProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT KeyboardAcceleratorsProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AccessKeyProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandProperty([out] [retval] Microsoft.UI.Xaml.DependencyProperty** value);
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyDisplayDismissedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyDisplayRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass AccessKeyManager
                {
                    [default] interface Microsoft.UI.Xaml.Input.IAccessKeyManager;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass CanExecuteRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CharacterReceivedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ContextRequestedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IContextRequestedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DoubleTappedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExecuteRequestedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FindNextElementOptions
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFindNextElementOptions;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IFocusManagerStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass FocusManager
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFocusManager;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusManagerGotFocusEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusManagerLostFocusEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusMovementResult
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFocusMovementResult;
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusedElementRemovedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IFocusedElementRemovedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GettingFocusEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IGettingFocusEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass HoldingRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaExpansionBehavior
                {
                    [default] interface Microsoft.UI.Xaml.Input.IInertiaExpansionBehavior;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaRotationBehavior
                {
                    [default] interface Microsoft.UI.Xaml.Input.IInertiaRotationBehavior;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaTranslationBehavior
                {
                    [default] interface Microsoft.UI.Xaml.Input.IInertiaTranslationBehavior;
                }

                [contract(Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IInputManagerStatics, Microsoft.UI.Xaml.PrivateApiContract, 1.0)]
                [threading(both)]
                runtimeclass InputManager
                {
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputScope : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Input.IInputScope;
                }

                [activatable(Microsoft.UI.Xaml.Input.IInputScopeNameFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputScopeName : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Input.IInputScopeName;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass KeyRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass KeyboardAccelerator : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Input.IKeyboardAccelerator;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass KeyboardAcceleratorInvokedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass LosingFocusEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.ILosingFocusEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationCompletedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationDeltaRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationInertiaStartingRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.Input.IManipulationPivotFactory, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationPivot
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationPivot;
                }

                [composable(Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationStartedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationStartingRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass NoFocusCandidateFoundEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass Pointer
                {
                    [default] interface Microsoft.UI.Xaml.Input.IPointer;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PointerRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs;
                }

                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass ProcessKeyboardAcceleratorEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RightTappedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Input.IStandardUICommandFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IStandardUICommandStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass StandardUICommand : Microsoft.UI.Xaml.Input.XamlUICommand
                {
                    [default] interface Microsoft.UI.Xaml.Input.IStandardUICommand;
                }

                [activatable(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass TappedRoutedEventArgs : Microsoft.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs;
                }

                [composable(Microsoft.UI.Xaml.Input.IXamlUICommandFactory, public, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Microsoft.UI.Xaml.Input.IXamlUICommandStatics, Microsoft.UI.Xaml.WinUIContract, 1.0)]
                [threading(both)]
                runtimeclass XamlUICommand : Microsoft.UI.Xaml.DependencyObject
                {
                    [default] interface Microsoft.UI.Xaml.Input.IXamlUICommand;
                    [contract(Microsoft.UI.Xaml.WinUIContract, 1.0)] interface Microsoft.UI.Xaml.Input.ICommand;
                }
            }
        }
    }
}
