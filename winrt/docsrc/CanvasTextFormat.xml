<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextDirection">
      <summary>Specifies the direction in which text is formatted and read.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenTopToBottom">
      <summary>Text is read from left to right and lines flow from top to bottom.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenTopToBottom">
      <summary>Text is read from right to left and lines flow from top to bottom.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenBottomToTop">
      <summary>Text is read from left to right and lines flow from bottom to top.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenBottomToTop">
      <summary>Text is read from right to left and lines flow from bottom to top.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenLeftToRight">
      <summary>Text is read from top to bottom and lines flow from left to right.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenLeftToRight">
      <summary>Text is read from bottom to top and lines flow from left to right.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenRightToLeft">
      <summary>Text is read from top to bottom and lines flow from right to left.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenRightToLeft">
      <summary>Text is read from bottom to top and lines flow from right to left.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment">
      <summary>Specifies the horizontal alignment of paragraph text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment.Left">
      <summary>The left edge of the text is aligned to the left edge of the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment.Right">
      <summary>The right edge of the text is aligned to the right edge of the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment.Center">
      <summary>The center of the text is aligned to the center of the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment.Justified">
      <summary>The left edge of the text is aligned to the left edge of the layout box and broken lines are aligned to the right edge.</summary>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment">
      <summary>Specifies the vertical alignment of paragraph text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment.Top">
      <summary>The top of the text is aligned to the top edge of the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment.Bottom">
      <summary>The bottom of the text is aligned to the bottom edge of the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment.Center">
      <summary>The center of the text is aligned to the center of the layout box.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity">
      <summary>Specifies the granularity used to trim text overflowing the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity.None">
      <summary>No trimming occurs. Text flows beyond the layout width.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity.Character">
      <summary>Trimming occurs at a character cluster boundary.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity.Word">
      <summary>Trimming occurs at a word boundary.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping">
      <summary>Specifies word wrapping behavior.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping.Wrap">
      <summary>Words are broken across lines to avoid text overflowing the layout box.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping.NoWrap">
      <summary>Words are kept within the same line even when it overflows the layout box.
               This option is often used with scrolling to reveal overflow text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping.EmergencyBreak">
      <summary>Words are broken across lines to avoid text overflowing the layout box.
               Emergency wrapping occurs if the word is larger than the maximum width.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping.WholeWord">
      <summary>When emergency wrapping, only wrap whole words, never breaking words
               when the layout width is too small for even a single word.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasWordWrapping.Character">
      <summary>Wrap between any valid character clusters.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions">
      <summary>Specifies text drawing options.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions.Default">
      <summary>Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions.NoPixelSnap">
      <summary>Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions.Clip">
      <summary>Text is clipped to the layout rectangle.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions.EnableColorFont">
      <summary>Text is rendered using color versions of glyphs, if defined by the font.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextFormat">
      <summary>Describes font and layout options for drawing text.</summary>

      <remarks>
        <p>
          When using <a href="Interop.htm">Direct2D interop</a>, this Win2D class
          corresponds to the Direct2D interface IDWriteTextFormat1.
        </p>
      </remarks>

      <example>
        Create a CanvasTextFormat with reasonable defaults:
        <code>var format = new CanvasTextFormat();</code>

        Using a specific font:
        <code>
          var format = new CanvasTextFormat()
          {
              FontFamily = "Arial"
          };
        </code>

        With clipping enabled:
        <code>
          var format = new CanvasTextFormat()
          {
              Options = CanvasDrawTextOptions.Clip
          };
        </code>

        Using a font loaded from a TTF file shipped with the application:
        <code>
          var format = new CanvasTextFormat()
          {
              FontFamily = "CustomFont.ttf#CustomFont"
          };
        </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.#ctor">
      <summary>Initializes a new instance of the CanvasTextFormat class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.Dispose">
      <summary>Releases all resources used by the CanvasTextFormat.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.WordWrapping">
      <summary>Specifies word wrapping behavior.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.VerticalAlignment">
      <summary>Specifies the vertical paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.TrimmingGranularity">
      <summary>Specifies the granularity used to trim text overflowing the layout box.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.TrimmingDelimiterCount">
      <summary>A value that indicates how many occurrences of the delimiter to step back.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.TrimmingDelimiter">
      <summary>
        A character code used as the delimiter that signals the beginning of the portion of text to be preserved.
        Most useful for path ellipsis, where the delimiter would be a slash.
       </summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.Direction">
      <summary>Specifies the direction in which the text is read.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.HorizontalAlignment">
      <summary>Specifies the horizontal paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.Options">
      <summary>Specifies text drawing options.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LocaleName">
      <summary>Specifies the locale name.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacingBaseline">
      <summary>Specifies the distance from top of line to baseline. A reasonable ratio to lineSpacing is 80 percent.</summary>
      <remarks>
        <p>
          This property is ignored when <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacing" /> is negative.
        </p>
        <p>
          The default value for this property is 1.
        </p>
        <p>
          The behavior of this property is affected by the text format's <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode"/>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacing">
      <summary>Negative values use default line spacing; non-negative values specify the line height.</summary>
      <remarks>
        <p>
          The line height is the distance from one baseline to another.  When
          LineSpacing is negative the <see
          cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacingBaseline"/>
          property is ignored.
        </p>
        <p>
          The behavior of this property is affected by the text format's <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode"/>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.IncrementalTabStop">
      <summary>Specifies the incremental tab stop position.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.FontWeight">
      <summary>Specifies the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.FontStyle">
      <summary>Specifies the style of a font face (for example, normal or italic).</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.FontStretch">
      <summary>Specifies the degree to which the font is stretched, compared to the normal aspect ratio of that font.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.FontSize">
      <summary>Specifies the font size.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.FontFamily">
      <summary>Specifies the font family name (Arial, Times New Roman, etc.)</summary>
      <remarks>
        <p>
          The FontFamily property recognizes three styles of family name:
          <dl>
            <dt>familyname</dt> 
            <dd>
              A font family name of a font that's installed on the system.
            </dd>

            <dt>applicationUri#familyname</dt>            
            <dd>
              Specifies a font family that's contained in a font package (such
              as a TTF file) that's distributed with the application.  The
              applicationUri must begin with either <tt>ms-appx://</tt> or
              <tt>ms-appdata://</tt>.
            </dd>

            <dt>filename#familyname</dt>
            <dd>
              As for applicationUri above, the filename is treated as a URI that
              starts with <tt>ms-appx:///</tt>.
            </dd>
          </dl>
        </p>
        <p>
          Passing in an applicationUri which is well-formed, but doesn't correspond to
          a valid font file will still succeed. It's equivalent to having no FontFamily
          specified. To be stricter and test that the font file was loaded and supported,
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasFontSet.#ctor(System.Uri)">
          create a CanvasFontSet
          </see>
          and verify that its 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontSet.Fonts">
          Fonts
          </see>
          count is at least one.
        </p>
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.GetSystemFontFamilies">
      <summary>Gets a list of font families available.</summary>
      <remarks>
        <p>
          Font family names are locale-dependent. For each font, this method
          returns its 'en-us' name if possible. If no 'en-us' name is available,
          this method returns whatever is first name enumerated for the font.
        </p>
        <p>
          If you prefer font names to prioritize some other localization,
          use the overload 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.GetSystemFontFamilies(System.Collections.Generic.IReadOnlyList{System.String})"/>.
        </p>
      </remarks>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.GetSystemFontFamilies(System.Collections.Generic.IReadOnlyList{System.String})">
      <summary>Gets a list of font families available, prioritizing the specified locales.</summary>
      <remarks>
        <p>
          Font family names are locale-dependent. For each font, this method 
          returns the first available of:
          <ul>
            <li>The specified list of locales, in order</li>
            <li>en-us</li>
            <li>Whatever is the first name enumerated for the font.</li>
          </ul>
        </p>
        <p>
          An application's environment has a list of locales ordered by
          user preference. 
        </p>
        <p>
          Using this in C# looks like:
          <code>          
              using Windows.Globalization;
              
              ...
              
              string[] fontFamilyNames = CanvasTextFormat.GetSystemFontFamilies(ApplicationLanguages.Languages);
          </code>
        </p>
        <p>
          Passing a null locale list is valid, and is equivalent to using the 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.GetSystemFontFamilies"/>
          overload.
        </p>
      </remarks>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode">
      <summary>Options for specifying how lines are spaced apart.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode.Default">
      <summary>
        Automatically positioned, if <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacing"/> is negative; otherwise, LineSpacing and LineSpacingBaseline are treated as a quantities in DIPs.
      </summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode.Uniform">
      <summary>
        Spacing is affected by the absolute value of LineSpacing, and vertical offset of the text is determined by LineSpacingBaseline. LineSpacing and LineSpacingBaseline are treated as a quantities in DIPs.
      </summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode.Proportional">
      <summary>
        Spacing is affected by the absolute value of LineSpacing, and vertical offset of the text is determined by LineSpacingBaseline. LineSpacing and LineSpacingBaseline are treated as a ratio of the default.
      </summary>
    </member>

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacingMode">
      <summary>Specifies how lines are spaced apart.</summary>
      <remarks>
        <p>
          If this property is set to Default:
          <ul>
            <li>Leaving <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacing"/> 
            at is default value of -1 will keep the default line spacing.</li>
            <li>Set LineSpacing to any positive quantity to have it affect the line spacing. 
                And, LineSpacing and 
                <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LineSpacingBaseline"/> are absolute quantities.</li>
          </ul>
        </p>
        <p>
          If this property is set to Uniform, then the magnitude of the LineSpacing field will affect line spacing.
          LineSpacing and LineSpacingBaseline are absolute quantities in DIPs.
        </p>
        <p>
          If this property is set to Proportional, then the magnitude of the LineSpacing field will affect line spacing.
          LineSpacing and LineSpacingBaseline are amounts by which to scale the default line spacing and line spacing baseline, respectively.
        </p>
        <p>
          For example, to create a text format for double-spaced text, use
          <code>
            CanvasTextFormat textFormat = new CanvasTextFormat()
            {
                LineSpacingMode = CanvasLineSpacingMode.Proportional,
                LineSpacing = 2
            };
          </code>
        </p>
      </remarks>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.VerticalGlyphOrientation">
      <summary>Specifies the orientation of glyphs when a vertical reading direction is used.</summary>
      <remarks>By default, some naturally horizontal scripts may be rotated if they're drawn using a vertical text direction.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.OpticalAlignment">
      <summary>Specifies how glyphs are aligned to the margin.</summary>
      <remarks>
          By default, there is allowed to be some whitespace in between the margin edge and the glyph edge.
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.LastLineWrapping">
      <summary>Specifies whether the last line is wrapped.</summary>
      <remarks>This is set to 'true' by default.</remarks>
    </member>    
    
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign">
      <summary>Specifies the trimming sign that is used when drawing a text layout.</summary>
      <remarks>
        A trimming sign is a symbol that shows up when the text sticking out
        of a text layout's requestedWidth and requestedHeight bounds is trimmed.
        Rather than simply truncate the text, an app may want to show an 
        ellipsis ("&#8230;") symbol.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign.None">
      <summary>When text is trimmed, it is truncated and no trimming sign appears.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign.Ellipsis">
      <summary>When text is trimmed, an ellipsis ("&#8230;") symbol appears.</summary>
    </member>

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.TrimmingSign">
      <summary>Specifies the type of trimming sign used, when text is drawn outside a text layout's requested size extents.</summary>
      <remarks>By default, no trimming sign is used. The text will just appear chopped off at the size boundary.</remarks>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextFormat.CustomTrimmingSign">
      <summary>Gets or sets a custom trimming sign.</summary>
      <remarks>
        <p>
          A custom trimming sign is represented by an application-implemented interface.
          The application chooses arbitrary drawing behavior to use as a trimming sign.
        </p>
        <p>
          A custom trimming sign takes precedence over the text format's TrimmingSign property.
          For example, if the TrimmingSign property is set to Ellipsis, and a custom trimming
          sign was set, then the custom trimming sign will get used- not the ellipsis one.
        </p>
      </remarks>
    </member>
    
  </members>
</doc>
