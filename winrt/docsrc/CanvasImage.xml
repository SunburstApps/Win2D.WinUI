<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Graphics.Canvas.CanvasImage">
      <summary>Static operations that can be applied to all ICanvasImage instances.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasImage.SaveAsync(Microsoft.Graphics.Canvas.ICanvasImage,Windows.Foundation.Rect,System.Single,Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat)">
      <summary>Saves an ICanvasImage to the given stream.</summary>
      <remarks>
        <inherittemplate name="CanvasImage.SaveAsync-remarks"/>
        <inherittemplate name="CanvasImage.SaveAsync-hdr"/>
      </remarks>
      <example>
        <code title="C#">
          <![CDATA[
            async void SaveImage(ICanvasImage image, Rect sourceRectangle)
            {
                var picker = new FileSavePicker();
                picker.FileTypeChoices.Add("Images", new List<string>() { ".jpg" });
            
                var file = await picker.PickSaveFileAsync();
                if (file == null)
                    return;
            
                using (var stream = await file.OpenAsync(FileAccessMode.ReadWrite))
                {
                    CanvasImage.SaveAsync(image, sourceRectangle, 96, this.canvas, stream, CanvasBitmapFileFormat.Jpeg);
                }
            }
          ]]>
        </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasImage.SaveAsync(Microsoft.Graphics.Canvas.ICanvasImage,Windows.Foundation.Rect,System.Single,Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single)">
      <summary>Saves an ICanvasImage to the given stream.</summary>
      <remarks>
        <inherittemplate name="CanvasImage.SaveAsync-remarks"/>
        <inherittemplate name="CanvasImage.SaveAsync-quality"/>
        <inherittemplate name="CanvasImage.SaveAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasImage.SaveAsync(Microsoft.Graphics.Canvas.ICanvasImage,Windows.Foundation.Rect,System.Single,Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single,Microsoft.Graphics.Canvas.CanvasBufferPrecision)">
      <summary>Saves an ICanvasImage to the given stream.</summary>
      <remarks>
        <inherittemplate name="CanvasImage.SaveAsync-remarks"/>
        <inherittemplate name="CanvasImage.SaveAsync-quality"/>
        <p>
          The buffer precision defaults to <see
          cref="F:Microsoft.Graphics.Canvas.CanvasBufferPrecision.Precision8UIntNormalized"/>.
        </p>
        <p>
          To save an image using a high dynamic range (HDR) pixel format, use
          <see cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR"/>
          format and specify one of the buffer precisions:
        </p>
        <ul>
          <li>
            <see cref="F:Microsoft.Graphics.Canvas.CanvasBufferPrecision.Precision16Float"/>
          </li>
          <li>
            <see cref="F:Microsoft.Graphics.Canvas.CanvasBufferPrecision.Precision32Float"/>
          </li>
          <li>
            <see cref="F:Microsoft.Graphics.Canvas.CanvasBufferPrecision.Precision16UIntNormalized"/>
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasImage.ComputeHistogram(Microsoft.Graphics.Canvas.ICanvasImage,Windows.Foundation.Rect,Microsoft.Graphics.Canvas.ICanvasResourceCreator,Microsoft.Graphics.Canvas.Effects.EffectChannelSelect,System.Int32)">
      <summary>Generates a histogram from one color channel of the specified image.</summary>
      <remarks>
        <p>
          The range 0-1 is divided over the specified number of bins, then the number of color 
          values falling into each bin are counted. Color values outside this range are clamped. 
          The range of a particular bin depends on the number of bins.
        </p>
        <p>
          The number of bins can be from 2 to 1024.
        </p>
        <p>
          The histogram is always evaluated at default (96) DPI. If you want to measure some other 
          pixel density, scale the input image (using Transform2DEffect) before passing it to 
          ComputeHistogram.
        </p>
        <p>
          The source image is assumed to be in
          <a href="PremultipliedAlpha.htm">premultiplied alpha</a> format, but this 
          method operates on straight alpha values, so the input colors will be 
          unpremultiplied before computing the histogram.
        </p>
        <p>
          ComputeHistogram requires a GPU that supports DirectCompute. To check whether this is 
          available, call <see cref="M:Microsoft.Graphics.Canvas.CanvasImage.IsHistogramSupported(Microsoft.Graphics.Canvas.CanvasDevice)"/>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasImage.IsHistogramSupported(Microsoft.Graphics.Canvas.CanvasDevice)">
      <summary>Checks whether the ComputeHistogram method is compatible with the GPU capabilities of the specified device.</summary>
    </member>
  </members>

  <template name="CanvasImage.SaveAsync-remarks">
    <p>
      This method saves the given image.  The image can be any size, memory
      or output file format permitting, and is not restricted by the value of <see
      cref="P:Microsoft.Graphics.Canvas.CanvasDevice.MaximumBitmapSizeInPixels">CanvasDevice.MaximumBitmapSizeInPixels</see>.
    </p>
    <p>
      The ICanvasImage may need to be drawn to a render target before it can be
      saved - for example, it may be an effect or a command list.  SaveAsync
      will take care of this automatically and create whatever temporary render
      targets are required.
    </p>
  </template>

  <template name="CanvasImage.SaveAsync-hdr">
    <p>
      To save an image using a high dynamic range (HDR) pixel format, use
      <see cref="M:Microsoft.Graphics.Canvas.CanvasImage.SaveAsync(Microsoft.Graphics.Canvas.ICanvasImage,Windows.Foundation.Rect,System.Single,Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single,Microsoft.Graphics.Canvas.CanvasBufferPrecision)"/> with
      <see cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR"/> format and a suitable
      <see cref="T:Microsoft.Graphics.Canvas.CanvasBufferPrecision"/>.
    </p>
  </template>

  <template name="CanvasImage.SaveAsync-quality">
    <p>
      The quality parameter defaults to 0.9, and only applies to the <see
      cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Jpeg"/> and <see
      cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR"/> formats.
    </p>
  </template>
  
</doc>
