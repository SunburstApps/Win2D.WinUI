<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>
  
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasCharacterRange">
      <summary>Describes a range of characters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasCharacterRange.CharacterIndex">
      <summary>The index into the original string.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasCharacterRange.CharacterCount">
      <summary>The number of characters.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasScaledFont">
      <summary>Represents a font face and a scale factor.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasScaledFont.FontFace">
      <summary>The font face which has been chosen for a character range.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasScaledFont.ScaleFactor">
        <summary>A scale factor that should be applied to the font size.</summary>
    </member>
    
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution">
      <summary>Describes a policy for performing locale-sensitive number substitution in text.</summary>
      <remarks>
        <p>
          When using <a href="Interop.htm">Direct2D interop</a>, this Win2D class
          corresponds to the DirectWrite interface IDWriteNumberSubstitution.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution.#ctor(Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod)">
      <summary>Initializes a new instance of the CanvasNumberSubstitution class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution.#ctor(Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod,System.String,System.Boolean)">
      <summary>Initializes a new instance of the CanvasNumberSubstitution class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution.Dispose">
      <summary>Releases all resources used by the CanvasNumberSubstitution.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod">
      <summary>Identifies the way to perform locale-sensitive number substitution in text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod.FromCulture">
      <summary>
        Specifies that the substitution method should be 
        determined based in the system environment.
      </summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod.Contextual">
      <summary>Either traditional or nominal number shape is used, depending on the nearest preceding strong character.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod.Disabled">
      <summary>Specifies that code points 0x30-0x39 are always rendered as nominal numeral shapes.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod.National">
      <summary>Specifies that numbers are rendered using the national number shape as specified by the locale.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod.Traditional">
      <summary>Specifies that number are rendered using the traditional shape for the specified locale.</summary>
    </member>
    
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer">
      <summary>An object that analyzes text in preparation for constructing glyph runs.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.#ctor(System.String,Microsoft.Graphics.Canvas.Text.CanvasTextDirection)">
      <summary>Initializes a new instance of the CanvasTextAnalyzer class.</summary>
      <remarks>
        <p>
          This constructor is for analyzing text where the number substitution, vertical glyph orientation,
          and bidi level are uniform within the text. For whenever that's not the case, use
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.#ctor(System.String,Microsoft.Graphics.Canvas.Text.CanvasTextDirection,Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions)"/>
        </p>
        <p>
          It's valid to pass a zero-length string to this constructor.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.#ctor(System.String,Microsoft.Graphics.Canvas.Text.CanvasTextDirection,Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution,Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation,System.UInt32)">
      <summary>Initializes a new instance of the CanvasTextAnalyzer class.</summary>
      <remarks>
        <p>
          This constructor is for analyzing text where the number substitution, vertical glyph orientation,
          and bidi level are uniform within the text. For whenever that's not the case, use
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.#ctor(System.String,Microsoft.Graphics.Canvas.Text.CanvasTextDirection,Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions)"/>
        </p>
        <p>
          It's valid to pass a zero-length string to this constructor.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.#ctor(System.String,Microsoft.Graphics.Canvas.Text.CanvasTextDirection,Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions)">
      <summary>Initializes a new instance of the CanvasTextAnalyzer class.</summary>
      <remarks>
        <p>
          It's valid to pass a zero-length string to this constructor.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetFonts(Microsoft.Graphics.Canvas.Text.CanvasTextFormat)">
      <summary>Gets a font for each span of text contained within this text analyzer.</summary>
      <remarks>
        <p>
          This method chooses fonts from the system font set.
        </p>
        <p>
          While a CanvasTextFormat contains a font family name and some other properties, 
          it's not an explicit reference to a font, nor does it guarantee that a piece of 
          text can be drawn with that exact font family. 
          An application needs to apply font fallbacks to match a piece of text to an actual font
          that will support it. When drawing a CanvasTextLayout constructed with a particular 
          CanvasTextFormat, for example, Win2D performs that matching automatically. Here, 
          an application can perform the same matching.
        </p>
        <p>
          If glyphs in the text aren't supported by the text format's font family or aren't
          compatible with its other properties, this method will try to return another
          similar font which is compatible.
        </p>
        <p>
          This method only uses the locale, font family, font weight, stretch, and 
          style from the passed-in text format. It doesn't use its other properties.
        </p>
        <p>
          It can happen that there are some glyphs that don't match any available font.
          When that's the case, there won't be a CanvasCharacterRangeFont which
          spans that character. For glyphs not supported by any font, an app may choose 
          to display nothing, or draw another glyph instead.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetFonts(Microsoft.Graphics.Canvas.Text.CanvasTextFormat,Microsoft.Graphics.Canvas.Text.CanvasFontSet)">
      <summary>Gets a font for each span of text contained within this text analyzer.</summary>
      <remarks>
        <p>
          This method chooses fonts from the passed-in font set.
        </p>
        <p>
          While a CanvasTextFormat contains a font family name and some other properties, 
          it's not an explicit reference to a font, nor does it guarantee that a piece of 
          text can be drawn with that exact font family. 
          An application needs to apply font fallbacks to match a piece of text to an actual font
          that will support it. When drawing a CanvasTextLayout constructed with a particular 
          CanvasTextFormat, for example, Win2D performs that matching automatically. Here, 
          an application can perform the same matching.
        </p>
        <p>
          If glyphs in the text aren't supported by the text format's font family or aren't
          compatible with its other properties, this method will try to return another
          similar font which is compatible.
        </p>
        <p>
          This method only uses the locale, font family, font weight, stretch, and 
          style from the passed-in text format. It doesn't use its other properties.
        </p>
        <p>
          It can happen that there are some glyphs that don't match any available font.
          When that's the case, there won't be a CanvasCharacterRangeFont which
          spans that character. For glyphs not supported by any font, an app may choose 
          to display nothing, or draw another glyph instead.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.Dispose">
      <summary>Releases all resources used by the CanvasTextAnalyzer.</summary>
    </member>
    
    <member name="T:Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions">
      <summary>An application-implemented interface for identifying properties that apply to spans of text.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetLocaleName(System.Int32,System.Int32@)">
      <summary>Gets the locale for this character position, and the character count for this span which shares the same locale.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetNumberSubstitution(System.Int32,System.Int32@)">
      <summary>Gets the number substitution for this character position, and the character count for this span which shares the same number substitution.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetVerticalGlyphOrientation(System.Int32,System.Int32@)">
      <summary>Gets the vertical glyph orientation for this character position, and the character count for this span which shares the same vertical glyph orientation.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetBidiLevel(System.Int32,System.Int32@)">
      <summary>Gets the bidi (bi-directional text) level for this character position, and the character count for this span which shares the same bidi level.</summary>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript">
      <summary>Represents the script data for a piece of text which has been analyzed.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript.ScriptIdentifier">
      <summary>Identifies the script.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript.Shape">
      <summary>Identifies the shaping requirement of a piece of text.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties">
      <summary>Contains script properties that apply to a piece of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsoScriptCode">
      <summary>The standardized four-character code for the given script.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsoScriptNumber">
      <summary>The standardized numeric code for the script, ranging from 0 to 999.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.ClusterLookahead">
      <summary>Number of characters to estimate look-ahead for complex scripts.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.JustificationCharacter">
      <summary>Which character to use to elongate the given script for justification.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.RestrictCaretToClusters">
      <summary>Whether the caret is restricted to whole clusters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.UsesWordDividers">
      <summary>The language uses dividers between words.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsDiscreteWriting">
      <summary>Whether the characters are discrete units from each other; this includes both block scripts and clustered scripts.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsBlockWriting">
      <summary>Whether the language is a block script, expanding between characters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsDistributedWithinCluster">
      <summary>Whether the language is justified within glyph clusters, not just between glyph clusters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsConnectedWriting">
      <summary>Whether the script's clusters are connected to each other, and no separation should be added between characters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.IsCursiveWriting">
      <summary>Whether the script is naturally cursive, meaning it uses justification methods other than intercharacter spacing.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasScriptShape">
      <summary>The shaping requirement of a piece of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptShape.Default">
      <summary>No additional shaping requirement. Text is shaped with the writing system default behavior.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasScriptShape.NoVisual">
      <summary>Text should leave no visual on display, for example, for control or format control characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScript">
      <summary>Gets information about the script used by the text.</summary>
      <remarks>
        <p>
          This method uses no particular locale. To specify a locale, use 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScript(System.String)"/>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScript(System.String)">
      <summary>Gets information about the script used by the text, applying the specified locale.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScriptProperties(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)">
      <summary>Gets the properties for an analyzed script.</summary>
    </member>        

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification">
      <summary>Identifies which what of justification scheme is used for a glyph.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.None">
      <summary>Justification is not used with the glyph.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicBlank">
      <summary>The glyph represents a blank in an Arabic run.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.Character">
      <summary>An inter-character justification point follows the glyph.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.Blank">
      <summary>The glyph represents a blank outside an Arabic run.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicNormal">
      <summary>Normal middle-of-word glyph that connects to the right (begin).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicKashida">
      <summary>Kashida (U+0640) in the middle of the word.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicAlef">
      <summary>Final form of an alef-like (U+0627, U+0625, U+0623, U+0622).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicHa">
      <summary>Final form of Ha (U+0647).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicRa">
      <summary>Final form of Ra (U+0631).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicBa">
      <summary>Final form of Ba (U+0628).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicBara">
      <summary>Ligature of alike (U+0628,U+0631).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicSeen">
      <summary>Highest priority: initial shape of Seen class (U+0633).</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification.ArabicSeenM">
      <summary>Highest priority: medial shape of Seen class (U+0633).</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping">
      <summary>Contains shaping properties for a glyph.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping.Justification">
      <summary>Identifies which type of justification a glyph uses.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping.IsClusterStart">
      <summary>Indicates that the glyph is the start of a cluster.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping.IsDiacritic">
      <summary>Indicates that the glyph is a diacritic mark.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping.IsZeroWidthSpace">
      <summary>Indicates that the glyph is a word boundary with no visible space.</summary>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetGlyphs(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,System.Boolean,System.Boolean,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)">
      <summary>Gets the array of glyphs which comprise the text.</summary>
      <remarks>
        <p>
          Use the results from GetFonts and GetScript to obtain the font and script data
          for calling GetGlyphs.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetGlyphs(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,System.Boolean,System.Boolean,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.String,Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution,System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasTypography}},System.Int32[]@,System.Boolean[]@,Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[]@)">
      <summary>Gets the array of glyphs which comprise the text.</summary>
      <remarks>
        <p>
          Use the results from GetFonts and GetScript to obtain the font and script data
          for calling GetGlyphs.
        </p>
        <p>
          The number substitution parameter is optional. 
        </p>
        <p>
          The typographic ranges parameter is optional.
        </p>
        <p>
          If typographic ranges are specified, they must
          <ul>
            <li>Follow in sequence, starting at the first character position in the range.</li>
            <li>Not overlap</li>
            <li>Cover all text positions in the range.</li>
          </ul>
        </p>
        <p>
          The output array parameters are optional. If they are not specified, these values will
          not be returned.
        </p>
      </remarks>
    </member>    

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi">
      <summary>Describes script directionality for a span of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi.ExplicitLevel">
      <summary>The explicit bi-directional text level.</summary>
      <remarks>
        This comes from the text direction together with any embedded control codes.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi.ResolvedLevel">
      <summary>
        The final implicit level considering the explicit level and 
        characters' natural directionality, after all bi-directional text 
        rules have been applied.
      </summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint">
      <summary>Contains line-breaking information for a character position.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint.BreakBefore">
      <summary>The break behavior before the character position.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint.BreakAfter">
      <summary>The break behavior after the character position.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint.IsWhitespace">
      <summary>Indicates the character is whitespace.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint.IsSoftHyphen">
      <summary>Indicates the character is a soft hyphen (U+00AD).</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation">
      <summary>Describes orientation information for a span of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation.GlyphOrientation">
      <summary>Indicates the angle at which a glyph should appear.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation.AdjustedBidiLevel">
      <summary>The adjusted bi-directional text level to be used by custom layouts when reordering runs.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation.IsSideways">
      <summary>Whether glyphs are rotated on their side.</summary>
      <remarks>This is the default for CJK scripts, and Latin with CanvasVerticalGlyphOrientation.Stacked.</remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation.IsRightToLeft">
      <summary>Indicates that the script is shaped right-to-left.</summary>
      <remarks>With right-to-left scripts such as Arabic, this value is true.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBidi">
      <summary>Gets which bi-directional text levels are mapped to which character positions.</summary>
      <remarks>
        This method overload is locale-agnostic. To use a specified locale, use 
        <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBidi(System.String)"/>.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBidi(System.String)">
      <summary>Gets which bi-directional text levels are mapped to which character positions.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBreakpoints">
      <summary>Gets the line breaking behavior at each character position.</summary>
      <remarks>
        <p>
          This returns an array whose size is the same as the length of the CanvasTextAnalyzer's text.
          There is one element per character position.
        </p>
        <p>
        This method overload is locale-agnostic. To use a specified locale, use 
        <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBreakpoints(System.String)"/>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetBreakpoints(System.String)">
      <summary>Gets the line breaking behavior at each character position.</summary>
      <remarks>
        <p>
          This returns an array whose size is the same as the length of the CanvasTextAnalyzer's text.
          There is one element per character position.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetNumberSubstitutions">
      <summary>Gets which number substitutions are mapped to which character positions.</summary>
      <remarks>
        The locale which affects number substitution is affected solely by the locale set to
        the CanvasNumberSubstitution object. If an ICanvasTextAnalyzerOptions is used with this
        text analyzer, its GetLocaleName method is not called.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetGlyphOrientations">
      <summary>Gets which glyph orientations are mapped to which character positions.</summary>
      <remarks>
        This method overload is locale-agnostic. To use a specified locale, use 
        <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetGlyphOrientations(System.String)"/>.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetGlyphOrientations(System.String)">
      <summary>Gets which glyph orientations are mapped to which character positions.</summary>
    </member>    

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity">
      <summary>Specifies how to apply justification for a glyph.</summary>
      <remarks>
        <p>
          An app doesn't need to decipher or manipulate CanvasJustificationOpportunity data
          in order to perform justification. The array of justification data from 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetJustificationOpportunities(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.Int32[],Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])"/>
          can simply be passed to 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.ApplyJustificationOpportunities(System.Single,Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[])"/>
          unmodified.
          Exposing CanvasJustificationOpportunity data gives apps the opportunity to customize 
          justification behavior.
        </p>
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.ExpansionMinimum">
      <summary>Minimum amount of expansion to apply to the glyph.</summary>
      <remarks>
        ApplyToLeadingEdge and ApplyToTrailingEdge describe how to apply the expansion.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.ExpansionMaximum">
      <summary>Maximum amount of expansion to apply to the glyph.</summary>
      <remarks>
        ApplyToLeadingEdge and ApplyToTrailingEdge describe how to apply the expansion.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.CompressionMaximum">
      <summary>Maximum amount of compression to apply to the glyph. </summary>
      <remarks>
        ApplyToLeadingEdge and ApplyToTrailingEdge describe how to apply the compression.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.ExpansionPriority">
      <summary>Priority of this expansion point. Larger priorities are applied later, while priority zero does nothing.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.CompressionPriority">
      <summary>Priority of this compression point. Larger priorities are applied later, while priority zero does nothing.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.AllowResidualExpansion">
      <summary>Allow this expansion point to use up any remaining slack space even after all expansion priorities have been used up.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.AllowResidualCompression">
      <summary>Allow this compression point to use up any remaining space even after all compression priorities have been used up.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.ApplyToLeadingEdge">
      <summary>Apply expansion and compression to the leading edge of the glyph.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity.ApplyToTrailingEdge">
      <summary>Apply expansion and compression to the trailing edge of the glyph.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetJustificationOpportunities(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.Int32[],Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])">
      <summary>Retrieves justification opportunity information, per-glyph.</summary>
      <remarks>
        <p>
          This is the place to start when performing justification on custom text layouts.
          The order of things is to:
          <ul>
            <li>Split up your text spans into glyph runs.</li>
            <li>Fit your glyph runs into the layout boxes. Perform word wrapping if desired.</li>
            <li>For each glyph run, call GetJustificationOpportunities to obtain an array of CanvasJustificationOpportunity.</li>
            <li>Pass an array of all CanvasJustificationOpportunity's for each layout box to
              <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.ApplyJustificationOpportunities(System.Single,Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[])"/>.
            </li>
            <li>Assign the justified glyph data back into your app's glyph runs.</li>
            <li>Optionally, call 
              <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.AddGlyphsAfterJustification(Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.Int32[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[],System.Int32[]@)"/>
              to insert extra justification glyphs- for example, if you would like to use Arabic kashida.
            </li>
            <li>Draw the glyph runs.</li>
          </ul>
          For an example which performs custom text layout justification, see
          <a href="https://github.com/Microsoft/Win2D-Samples/blob/master/ExampleGallery/Shared/CustomTextLayouts.xaml.cs">CustomTextLayouts.xaml.cs</a>.
        </p>
        <p>
          If a null font face is specified, the default font face will be used.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.ApplyJustificationOpportunities(System.Single,Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[])">
      <summary>Justifies an array of glyph advances to fit the line width.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.AddGlyphsAfterJustification(Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.Int32[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])">
      <summary>Fills in new glyphs for scripts where justification increased the advances of glyphs.</summary>
      <remarks>
        <p>
          This is used when inserting Arabic kashida. 
        </p>
        <p>
          To determine whether a script may add justification characters, call
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScriptProperties(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)"/>
          after analyzing the text's script, and check whether 
          <see cref="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.JustificationCharacter"/>
          is non-null.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.AddGlyphsAfterJustification(Microsoft.Graphics.Canvas.Text.CanvasFontFace,System.Single,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,System.Int32[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyph[],Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[],System.Int32[]@)">
      <summary>Fills in new glyphs for scripts where justification increased the advances of glyphs.</summary>
      <remarks>
        <p>
          This is used when inserting Arabic kashida.
        </p>
        <p>
          To determine whether a script may add justification characters, call
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer.GetScriptProperties(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)"/>
          after analyzing the text's script, and check whether 
          <see cref="F:Microsoft.Graphics.Canvas.Text.CanvasScriptProperties.JustificationCharacter"/>
          is non-null.
        </p>
      </remarks>
    </member>
    
  </members>
</doc>