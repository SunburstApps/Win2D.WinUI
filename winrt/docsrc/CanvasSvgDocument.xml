<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument" Win10_15063="true">
      <summary>Specifies an SVG document that can be drawn.</summary>
      <remarks>
        <p>
          To draw SVG, first create a document using 
          <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadFromXml(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">Load</see> 
          or 
          <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream)">LoadAsync</see>.
          Then, draw it to a drawing session using
          <see cref="O:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawSvg">DrawSvg</see>. For example, in C#,
          <code title="C#">
            <![CDATA[
            using Microsoft.Graphics.Canvas.Svg;     

            CanvasSvgDocument svgDocument;

            void canvasControl_CreateResources(CanvasControl sender, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs args)
            {
                svgDocument = CanvasSvgDocument.LoadFromXml(sender, "<svg><circle fill=\"#660000\" r=\"500\"/></svg>");
            }

            void canvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args)
            {
                args.DrawingSession.DrawSvg(svgDocument, sender.Size);
            }            
            ]]>
          </code>
          It's recommended that apps load their SVG resources only once, rather than every time they are drawn.
        </p>
        <p>
          In addition to being drawn directly, SVG can also be used as an image- for example, to used as source for an image brush, 
          or an input to an effect. To do this, use a command list. For example, in C#:
          <code title="C#">
            <![CDATA[
            void canvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args)
            {
                CanvasCommandList commandList = new CanvasCommandList(sender);

                using (var ds = commandList.CreateDrawingSession())
                {
                    ds.DrawSvg(svgDocument, sender.Size);
                }

                OpacityEffect opacityEffect = new OpacityEffect();
                opacityEffect.Opacity = 0.5f;
                opacityEffect.Source = commandList;

                args.DrawingSession.DrawImage(opacityEffect);
            }
            ]]>
          </code>
          If your application may run on operating systems prior to Windows 10 Creators Edition, it should call
          <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.IsSupported(Microsoft.Graphics.Canvas.CanvasDevice)">CanvasSvgDocument.IsSupported</see>
          to query whether SVG is supported before using it.
        </p>
        <p>
          Currently, Win2D supports a subset of SVG 1.1. For more details, see 
          <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt790715(v=vs.85).aspx">Direct2D's page about SVG support</a>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.GetXml">
      <summary>Gets a string containing the SVG for this document.</summary>
      <remarks>
        The returned XML may be different from what was originally used in constructing this document. For example it may
        contain differently-formatted attributes, differently-ordered attributes, or some elements dropped if they are not
        supported by Direct2D.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.SaveAsync(Windows.Storage.Streams.IRandomAccessStream)">
      <summary>Saves a string containing the SVG for this document.</summary>
      <remarks>
        <p>
          The saved string is encoded in UTF-8, and is not terminated with a null character.
        </p>
        <p>
          The saved XML may be different from what was originally used in constructing this document. For example it may
          contain differently-formatted attributes, differently-ordered attributes, or some elements dropped if they are not
          supported by Direct2D.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Dispose">
      <summary>Releases all resources used by the CanvasSvgDocument.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadFromXml(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">
      <summary>Loads an SVG document from a string.</summary>
      <remarks>
      <p>
        The passed-in string must be a valid SVG document. 
        Currently, Win2D supports a subset of SVG 1.1. For more details, see 
        <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt790715(v=vs.85).aspx">Direct2D's page about SVG support</a>.
        Content which is valid SVG but is unsupported by Win2D will not cause a failure; it will be ignored.
      </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream)">
      <summary>Loads an SVG document from a stream.</summary>
      <remarks>
        <p>
          Both UTF-8 and UTF-16 text are supported.
        </p>
      <p>
        The passed-in string must be a valid SVG document. 
        Currently, Win2D supports a subset of SVG 1.1. For more details, see 
        <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt790715(v=vs.85).aspx">Direct2D's page about SVG support</a>.
        Content which is valid SVG but is unsupported by Win2D will not cause a failure; it will be ignored.
      </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.IsSupported(Microsoft.Graphics.Canvas.CanvasDevice)">
      <summary>Checks whether CanvasSvgDocument is supported on the current operating system version.</summary>
      <remarks>
        <p>
          If the application is currently running on an operating system that
          doesn't support SVG features, then calls to 
          <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadFromXml(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">Load</see> 
          or 
          <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream)">LoadAsync</see>
          will fail.
        </p>
        <p>
          If you know that your application will never run on an operating
          system that doesn't support SVG documents then there is no need to
          perform this check.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Device">
      <summary>Gets the device associated with this SVG document.</summary>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.#ctor(Microsoft.Graphics.Canvas.ICanvasResourceCreator)">
      <summary>Initializes a new instance of the CanvasSvgDocument class.</summary>
      <remarks>
        <p>
          This creates a blank document. A blank document is automatically given a single empty root &lt;svg/&gt; node.
        </p>
        <p>
          To add content to the document, replace the root node using <see cref="P:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Root"/>
          or add to it using <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement.AppendChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)"/>.
        </p>
      </remarks>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadElementFromXml(System.String)">
      <summary>Loads an SVG element from string containing an XML fragment.</summary>
      <remarks>
        <p>
          The passed-in string needs to be valid SVG XML. It should have one root node. It doesn't necessarily
          have to be a complete document, though.
        </p>
        <p>
          After creation, the element is not automatically added to the tree. You can add it to the document tree, for example,
          using 
          <see cref="P:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Root"/>
          or <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement.AppendChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)"/>.
          You can add an element to a document that isn't the one used to create it. Just, the document and the element need to share the
          same device.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.LoadElementAsync(Windows.Storage.Streams.IRandomAccessStream)">
      <summary>Loads an SVG element from a stream containing an XML fragment.</summary>
      <remarks>
        <p>
          The passed-in stream needs to contain valid SVG XML. It should have one root node. It doesn't necessarily
          have to be a complete document, though.
        </p>
        <p>
          After creation, the element is not automatically added to the tree. You can add it to the document tree, for example,
          using 
          <see cref="P:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Root"/>
          or <see cref="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement.AppendChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)"/>.
          You can add an element to a document that isn't the one used to create it. Just, the document and the element need to share the
          same device.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.Root">
      <summary>Gets or sets the root element of the SVG document.</summary>
      <remarks>
        The root element of an svg document is always an &lt;svg&gt; element.
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.FindElementById(System.String)">
      <summary>Finds the element in this document which has the specified ID.</summary>
      <remarks>If the ID doesn't exist, FindElementById will produce an error.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePaintAttribute">
      <summary>Creates an attribute that can be used for a stroke or fill value.</summary>
      <remarks>This attribute is created with a default CanvasSvgPaintType of None, a default color of black, and an empty-string ID.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePaintAttribute(Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType,Windows.UI.Color,System.String)">
      <summary>Creates an attribute that can be used for a stroke or fill value.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePathAttribute">
      <summary>Creates an attribute that can be used for path data, for example on the 'd' attribute of a 'path' element.</summary>
      <remarks>This overload of CreatePathAttribute creates an attribute with empty path arrays.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePathAttribute(System.Single[],Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand[])">
      <summary>Creates an attribute that can be used for path data, for example on the 'd' attribute of a 'path' element.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePointsAttribute">
      <summary>Creates an attribute that can be used to describe a collection of points, for example in a polyline or polygon element.</summary>
      <remarks>This overload of CreatePointsAttribute creates an empty set of points.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreatePointsAttribute(System.Numerics.Vector2[])">
      <summary>Creates an attribute that can be used to describe a collection of points, for example in a polyline or polygon element.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreateStrokeDashArrayAttribute">
      <summary>Creates an attribute that can be used as a stroke-dasharray vlalue.</summary>
      <remarks>This overload of CreateStrokeDashArrayAttribute creates an empty set of dashes.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument.CreateStrokeDashArrayAttribute(System.Single[],Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits[])">
      <summary>Creates an attribute that can be used as a stroke-dasharray vlalue.</summary>
    </member>
    
  </members>
</doc>
