<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>  
  <members>
    <member name="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel">
      <summary>A swap chain panel is a XAML control which draws to a swap chain.</summary>
      <remarks>
        <p>
          The size of the swap chain may be different from the control's layout size. 
          In particular, it does not stretch to fill the control. For more information 
          on swap chains, see <see cref="T:Microsoft.Graphics.Canvas.CanvasSwapChain"/>.
        </p>
        <p>
          When using CanvasSwapChainPanel from managed code, care must be 
          taken to avoid memory leaks due to reference count cycles. See 
          <a href="RefCycles.htm">Avoiding memory leaks</a> for more information.
        </p>
      </remarks>
      <example>
      <code>
        CanvasSwapChain swapChain = new CanvasSwapChain(new CanvasDevice(), 800, 600);

        canvasSwapChainPanel.SwapChain = swapChain;

        using(CanvasDrawingSession ds = swapChain.CreateDrawingSession(Colors.White))
        {
            ds.DrawCircle(400, 300, 100, Colors.Red, 20);
        }

        swapChain.Present();
      </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel.#ctor">
      <summary>Initializes a new instance of the CanvasSwapChainPanel class.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel.SwapChain">
      <summary>Gets or sets the associated swap chain object.</summary>
      <remarks>This property is initially set to null.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel.RemoveFromVisualTree">
      <summary>Removes the control from the last FrameworkElement it was parented to.</summary>
      <remarks>
        <p>
          When using this control from managed code it is necessary to ensure
          that all references to it are released, otherwise it will not get
          garbage collected correctly.  To do this, call RemoveFromVisualTree
          from the Unloaded event handler of the page that the control was on
          and then release any explicit references to it.
        </p>
        <p>For more information, see <a href="RefCycles.htm">Avoiding memory leaks</a>.</p>
        <example>
          <code>
        void page_Unloaded(object sender, RoutedEventArgs e)
        {
            this.canvasSwapChainPanel.RemoveFromVisualTree();
            this.canvasSwapChainPanel = null;
        }
          </code>
        </example>
      </remarks>
    </member>
  </members>
</doc>
