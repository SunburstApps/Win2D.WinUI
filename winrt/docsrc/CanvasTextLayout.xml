<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>  

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment">
      <summary>Specifies how glyphs are aligned to the margin.</summary>
      <remarks>
          By default, there is allowed to be some whitespace in between the margin edge and the glyph edge.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment.Default">
      <summary>Glyphs are aligned according to their 'cell' boundaries. </summary>
      <remarks>This may include some whitespace beside the glyph.</remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment.NoSideBearings">
      <summary>Glyphs are aligned according to their 'ink' boundaries. </summary>
      <remarks>This will push the 'inked' part (usually, the rendered part) as close to the margin as possible.
      Note that some glyphs may still overhang outside the margin, such as flourishes or italic slants.</remarks>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextLayout">
      <summary>A cached, drawable piece of formatted text which can combine different fonts, colors etc.</summary>
      <remarks>
        <p>
          Use CanvasTextLayout to display rich text combining different formatting 
          options, and to query the size and layout of such text after it has been 
          wordwrapped.
        </p>
        <p>
          If you are going to draw the same piece of text more than once, CanvasTextLayout can be 
          faster than <see cref="O:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawText"/>, 
          because it can reuse layout computations rather than repeating them every time the text 
          is drawn.
        </p>
        <p>
          When using <a href="Interop.htm">Direct2D interop</a>, this Win2D class
          corresponds to the Direct2D interface IDWriteTextLayout3.
        </p>
      </remarks>
      <example>
        How to create a CanvasTextLayout:
        <code>
          var format = new CanvasTextFormat();
          
          var textLayout = new CanvasTextLayout("A piece of text", format, layoutWidth, layoutHeight);
        </code>        

        How to draw a CanvasTextLayout:
        <code>
          using (var ds = renderTarget.CreateDrawingSession())
          {
              ds.DrawTextLayout(textLayout, 100, 200, Colors.White); // White text is drawn at (100, 200)
          }
        </code>
        
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.#ctor(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String,Microsoft.Graphics.Canvas.Text.CanvasTextFormat,System.Single,System.Single)">
      <summary>Initializes a new instance of the CanvasTextLayout class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetPairKerning(System.Int32)">
      <summary>Gets whether pair kerning is used for the character at the position specified.</summary>
      <remarks>
        <p>
        Pair kerning is a scheme where a table permutes every glyph against
        every other glyph, and each pair has an explicit kerning value defined. This option
        is desired for some legacy rendering. Non-pair-kerning is determined using
        a more sophisticated computation involving classes of glyphs, and this is the default.
        </p>
        <p>
        Pair kerning isn't supported on all typefaces. If pair kerning is specified, but the
        typeface doesn't support it, non-pair-kerning will be used.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetPairKerning(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets whether pair kerning is used for the group of characters specified.</summary>
      <remarks>
        <p>
        Pair kerning is a scheme where a table permutes every glyph against
        every other glyph, and each pair has an explicit kerning value defined. This option
        is desired for some legacy rendering. Non-pair-kerning is determined using
        a more sophisticated computation involving classes of glyphs, and this is the default.
        </p>
        <p>
        Pair kerning isn't supported on all typefaces. If pair kerning is specified, but the
        typeface doesn't support it, non-pair-kerning will be used.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetLeadingCharacterSpacing(System.Int32)">
      <summary>Gets the the spacing before the character specified, in reading order. </summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetTrailingCharacterSpacing(System.Int32)">
      <summary>Gets the spacing after the character specified, in reading order.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetMinimumCharacterAdvance(System.Int32)">
      <summary>Gets the minimum advance of the character specified.</summary>
      <remarks>
        <p>
          Minimum advance width is the minimum amount to move forward from one character
          to the next, to prevent characters from becoming too thin or zero-width. This must be zero or greater.</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetCharacterSpacing(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
      <summary>Sets the spacing between characters.</summary>
      <remarks>
        <p>Leading spacing is the spacing before each character, in reading order.</p>
        <p>Trailing spacing is the spacing after each character, in reading order.</p>
        <p>Minimum advance width is the minimum amount to move forward from one character
        to the next, to prevent characters from becoming too thin or zero-width. This must be zero or greater.</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Dispose">
      <summary>Releases all resources used by the CanvasTextLayout.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFormatChangeIndices">
      <summary>Gets an array of position indices at which the text format changes.</summary>
      <remarks>By convention, an empty string will yield an array containing only {0}. </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetMinimumLineLength">
      <summary>Gets the minimum possible width/height the layout can be set to, without any emergency breakings between the characters of whole words.</summary>
      <remarks>
        <p>
          If the TextDirection property specifies horizontally oriented text
          then this method returns the minimum width that can be set on the
          layout.  If the TextDirection property specifies vertically oriented
          text then this method returns the minimum height.
        </p>
        
        <p>
          Horizontally oriented text directions are:
          <ul>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenTopToBottom" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenTopToBottom" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenBottomToTop" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenBottomToTop" /></li>
          </ul>
          Vertically oriented text directions are:
          <ul>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenLeftToRight" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenLeftToRight" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenRightToLeft" /></li>
            <li><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenRightToLeft" /></li>
          </ul>
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontFamily(System.Int32)">
      <summary>Gets the font family of the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontSize(System.Int32)">
      <summary>Gets the font size for the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontStretch(System.Int32)">
      <summary>Gets the font stretch for the character at the specified position.</summary>
      <remarks>This indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontStyle(System.Int32)">
      <summary>Gets the font style for the character at the specified position.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetFontWeight(System.Int32)">
      <summary>Gets the font weight for the character at the specified position.</summary>
      <remarks>Font weight is the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetLocaleName(System.Int32)">
      <summary>Specifies the locale name for the character at the specified position.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetStrikethrough(System.Int32)">
      <summary>Gets whether the character at the specified position has strikethrough.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetUnderline(System.Int32)">
      <summary>Gets whether the character at the specified position is underlined.</summary>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetBrush(System.Int32)">
      <summary>Gets the brush associated with a character index in the text layout.</summary>
      <remarks>
      	<p>
      	If the color was set using <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)"/> for this index, this method returns a 
      	<see cref="T:Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush"/> with the appropriate color.
      	</p>
      	<p>
      	If there isn't an associated brush or color, null is returned.
      	</p>
      	</remarks>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontFamily(System.Int32,System.Int32,System.String)">
      <summary>Sets the font family of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontSize(System.Int32,System.Int32,System.Single)">
      <summary>Sets the font size of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontStretch(System.Int32,System.Int32,Windows.UI.Text.FontStretch)">
      <summary>Sets the font stretch of the specified group of characters.</summary>
      <remarks>This indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontStyle(System.Int32,System.Int32,Windows.UI.Text.FontStyle)">
      <summary>Sets the font style of the specified group of characters.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetFontWeight(System.Int32,System.Int32,Windows.UI.Text.FontWeight)">
      <summary>Sets the font weight of the specified group of characters.</summary>
      <remarks>Font weight is the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetLocaleName(System.Int32,System.Int32,System.String)">
      <summary>Sets the local name of the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetStrikethrough(System.Int32,System.Int32,System.Boolean)">
      <summary>Applies strikethrough formatting to the specified group of characters.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetUnderline(System.Int32,System.Int32,System.Boolean)">
      <summary>Applies underline formatting to the specified group of characters.</summary>
    </member>  
    
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)">
      <summary>Sets the color associated with a group of characters in the text layout.</summary>
      <remarks>
      	<p>
      	This color takes effect while calling 
      	<see cref="M:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout,System.Single,System.Single,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/>
      	It overrides the brush or color passed to DrawTextLayout.
      	</p>
      	<p>
      	Calling <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetBrush(System.Int32)"/> for this same index, after calling this method, will yield a 
      	<see cref="T:Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush"/> with the appropriate color.
      	</p>
        <p>
          A color set using this method replaces any brush currently set to those characters using
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetBrush(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/> 
          or 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetCustomBrush(System.Int32,System.Int32,System.Object)"/>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetBrush(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)">
      <summary>Sets the brush associated with a group of characters in the text layout.</summary>
      <remarks>
      	<p>
      	This brush takes effect while calling 
      	<see cref="M:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawTextLayout(Microsoft.Graphics.Canvas.Text.CanvasTextLayout,System.Single,System.Single,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/>
      	It overrides the brush or color passed to DrawTextLayout.
      	</p>
      	<p>
      	The brush is allowed to be null. Setting a group of characters' brush to null causes the default behavior, where the brush passed to DrawTextLayout determines the color of the text.
      	</p>
        <p>
          A brush set using this method replaces any custom brush or color currently set to those characters using
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetCustomBrush(System.Int32,System.Int32,System.Object)"/> 
          or 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)"/>.
        </p>
      </remarks>
    </member>
      
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.WordWrapping">
      <summary>Specifies word wrapping behavior.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.VerticalGlyphOrientation">
      <summary>Specifies the orientation of glyphs when a vertical reading direction is used.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.VerticalAlignment">
      <summary>Specifies the vertical paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingGranularity">
      <summary>Specifies the granularity used to trim text overflowing the layout box.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingDelimiterCount">
      <summary>A value that indicates how many occurrences of the delimiter, counted from the end
      of the text, are allowed before trimming is desired.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingDelimiter">
      <summary>
        A character used as the delimiter that signals the beginning of the portion of text to be preserved.
       </summary>
       <remarks>
         <p>
           An example in which you'd want to use this is long filename paths. For example:
           "C:\Windows\Fonts\Comic.ttf", with an ellipsis trimming sign.
         </p>
         <p>
           An app may want to trim this filename path so that it fits on one line. But the 
           default trimming delimiter options will produce something like "C:\Windows\Fonts\Com...",
           and chop off the end of the filename.
           It would be much more useful to still be able to see "Comic.ttf", the filename,
           and effectively trim the middle portion instead.
         </p>
         <p>
           To accomplish this, the app can set the TrimmingDelimiter to "\" and the 
           TrimmingDelimiterCount to 1. This would produce "C:\Windows\F...\Comic.ttf".
         </p>
         <p>
           Or, in this scenario, if the filename plus its immediate containing folder were 
           deemed important, setting the TrimmingDelimiterCount to 2 would produce
           "C:\Win...\Fonts\Comic.ttf".
         </p>
         <p>
           For example:
           <code>
               string text = "C:\\Windows\\Fonts\\Comic.ttf";
            
               CanvasTextFormat format = new CanvasTextFormat();
               format.WordWrapping = CanvasWordWrapping.NoWrap;
               format.TrimmingSign = CanvasTrimmingSign.Ellipsis;
               format.TrimmingGranularity = CanvasTextTrimmingGranularity.Character;

               CanvasTextLayout layout = new CanvasTextLayout(sender, text, format, 175, 50);

               float x = 100;
               float y = 100;

               // Default trimming delimiter options
               args.DrawingSession.DrawTextLayout(layout, x, y, Colors.White);
               args.DrawingSession.DrawRectangle(x, y, (float)layout.RequestedSize.Width, (float)layout.RequestedSize.Height, Colors.Cyan);

               y += 100;

               // Trimming delimited by one back-slash
               layout.TrimmingDelimiter = "\\";
               layout.TrimmingDelimiterCount = 1;
               args.DrawingSession.DrawTextLayout(layout, x, y, Colors.White);
               args.DrawingSession.DrawRectangle(x, y, (float)layout.RequestedSize.Width, (float)layout.RequestedSize.Height, Colors.Cyan);

               y += 100;

               // Trimming delimited by two back-slashes
               layout.TrimmingDelimiterCount = 2;
               args.DrawingSession.DrawTextLayout(layout, x, y, Colors.White);
               args.DrawingSession.DrawRectangle(x, y, (float)layout.RequestedSize.Width, (float)layout.RequestedSize.Height, Colors.Cyan);
           </code>
         </p>
         <p>
           This draws:
         </p>
         <img src="../media/TextTrimmingDelimiters.png" alt="Text trimming delimiters sample code output" />
       </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Direction">
      <summary>Specifies the direction in which the text is read.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HorizontalAlignment">
      <summary>Specifies the horizontal paragraph alignment.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.OpticalAlignment">
      <summary>Specifies the optical margin aligment for the text layout.</summary>
      <remarks>
      	<p>
      	By default, glyphs are aligned to the margin by the default origin and side-bearings 
      	of the glyph. If you specify CanvasOpticalAlignment.None, then the alignment 
      	uses the side bearings to offset the glyph from the aligned edge, to ensure 
      	the ink of the glyphs are aligned.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.RequestedSize">
      <summary>Specifies the requested size.</summary>
      <remarks>
      	<p>
        This option is for controlling word wrapping and alignment. This option,
        by itself, doesn't perform any kind of clipping behavior- to ensure text
        is clipped to this rectangle, use <see cref="F:Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions.Clip"/>. 
      	</p>        
      	<p>
        If word wrapping is enabled, text is wrapped according to these dimensions. The actual LayoutBounds or
        DrawBounds may be larger than the RequestedSize.
      	</p>
        </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingBaseline">
      <summary>Specifies the distance from top of line to baseline. A reasonable ratio to lineSpacing is 80 percent.</summary>
      <remarks>
        <p>
          This property is ignored when <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacing" /> is negative.
        </p>
        <p>
          The behavior of this property is affected by the text layout's <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode"/>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacing">
      <summary>Negative values use default line spacing; non-negative values specify the line height.</summary>
      <remarks>
        <p>
          The line height is the distance from one baseline to another.  When
          LineSpacing is negative the 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingBaseline"/>
          property is ignored.
        </p>
        <p>
          The behavior of this property is affected by the text layout's <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode"/>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LastLineWrapping">
      <summary>Specifies whether or not the last word on the last line is wrapped.</summary>
      <remarks>This is set to 'true' by default.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.IncrementalTabStop">
      <summary>Specifies the incremental tab stop position.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontFamily">
      <summary>Specifies the font family name for ranges of the layout that don't have an explicitly specified font family name.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontSize">
      <summary>Specifies the font size for ranges of the layout without an explicitly specified font size.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontStretch">
      <summary>Specifies the font stretch for ranges of the layout without an explicitly specified font stretch.</summary>
      <remarks>Font stretch indicates the degree to which the font is stretched, compared to the normal aspect ratio of that font.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontStyle">
      <summary>Specifies the font style for ranges of the layout without an explicitly specified font style.</summary>
      <remarks>Font style indicates whether a typeface is oblique, or italic, or the default.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontWeight">
      <summary>Specifies the font weight for ranges of the layout without an explicitly specified font weight.</summary>
      <remarks>Font weight indicates the density of a typeface, in terms of the lightness or heaviness of the strokes.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultLocaleName">
      <summary>Specifies the locale name for ranges of the layout without an explicitly specified locale name.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation">
      <summary>Specifies the orientation of glyphs when a vertical reading direction is used.</summary>
      <remarks>By default, some naturally horizontal scripts may be rotated if they're drawn using a vertical text direction.</remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation.Default">
      <summary>
      	With this default option and vertical layout, naturally horizontal scripts, such as Latin script,
      	rotate 90 degrees clockwise, while ideographic scripts, such as Chinese, remain upright.
      </summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation.Stacked">
      <summary>
      	With this option and vertical layout, ideographic scripts that permit stacking, such as Latin script,
      	appear stacked, and are not rotated. Connected scripts, such as Arabic, which would otherwise 
      	look broken if glyphs were kept at 0 degrees, remain connected and rotate.
      </summary>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Options">
      <summary>Specifies text drawing options.</summary>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion">
      <summary>A struct describing the result of a hit test operation.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.CharacterIndex">
      <summary>The position index within a piece of text.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.CharacterCount">
      <summary>A number of characters, counted from the PositionInText, used for describing a range of characters.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.LayoutBounds">
      <summary>A rectangle describing the bounds of a piece of text.</summary>
      <remarks>
        <p>
          The bounds are relative to the text's layout box. 
          These bounds are in DIPs, and do not take into account any transforms that might be applied while rendering the text.
        </p>
        <p>
          These bounds do not include any trailing whitespace. To obtain bounds which include the text layout's
          trailing whitespace, use 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBoundsIncludingTrailingWhitespace"/>.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Numerics.Vector2)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Numerics.Vector2,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Numerics.Vector2,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@,System.Boolean@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.HitTest(System.Single,System.Single,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@,System.Boolean@)">
      <summary>Gets whether the point overlaps with any text in the text layout.</summary>
      <remarks>
      	<p>Any whitespace before the end of the text, also counts as text.</p>
      	<p>
      	  Hit tests are always performed using layout bounds, not draw bounds. See 
      	  <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds"/>. 
      	</p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCaretPosition(System.Int32,System.Boolean)">
      <summary>Gets position where the caret (text cursor) would be, given the current text position and caret direction.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCaretPosition(System.Int32,System.Boolean,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion@)">
      <summary>Gets position where the caret (text cursor) would be, given the current text position and caret direction.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCharacterRegions(System.Int32,System.Int32)">
      <summary>Gets an array of descriptions of the range of text.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DrawBounds">
      <summary>Gets the bounds of the parts of the text that would get drawn.</summary>
      <remarks>
      	<p>
      	Draw bounds are different from layout bounds. Below, the draw bounds are outlined in green. Layout bounds are outlined in blue. 
      	</p>
        <img src="../media/TextMetrics.png" alt="CanvasTextLayout diagram" />   
      	<p>
      	The draw bounds are the area that is covered when you draw the text. 
      	Notice how the rectangles don't necessarily align along the top or bottom edge.
      	And how, in some cases, the bounds may overlap each other.
      	</p>
      	<p>
      	The layout bounds align along the top and bottom edges, and are guaranteed never to overlap each other.
      	</p>      	
      	<p>
      	Both types of bounds are useful for different purposes. Layout bounds are useful for positioning text,
      	aligned against an edge. Draw bounds are useful as a clip rect.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBounds">
      <summary>Gets the bounds of the parts of the text that align to the layout.</summary>
      <remarks>
      	<p>
      	Draw bounds are different from layout bounds. Below, the draw bounds are outlined in green. Layout bounds are outlined in blue. 
      	</p>
        <img src="../media/TextMetrics.png" alt="CanvasTextLayout diagram" />   
      	<p>
      	The draw bounds are the area that is covered when you draw the text. 
      	Notice how the rectangles don't necessarily align along the top or bottom edge.
      	And how, in some cases, the bounds may overlap each other.
      	</p>
      	<p>
      	The layout bounds align along the top and bottom edges, and are guaranteed never to overlap each other.
      	</p>      	
      	<p>
      	Both types of bounds are useful for different purposes. Layout bounds are useful for positioning text,
      	aligned against an edge. Draw bounds are useful as a clip rect.
      	</p>
      	</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineCount">
      <summary>Gets the number of lines in the text layout.</summary>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.Device">
      <summary>Gets the device associated with this text layout.</summary>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingMode">
      <summary>Specifies how lines are spaced apart.</summary>
      <remarks>
        <p>
          If this property is set to Default:
          <ul>
            <li>Leaving <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacing"/> 
            at is default value of -1 will keep the default line spacing.</li>
            <li>Set LineSpacing to any positive quantity to have it affect the line spacing. 
                And, LineSpacing and 
                <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineSpacingBaseline"/> are absolute quantities.</li>
          </ul>
        </p>
        <p>
          If this property is set to Uniform, then the magnitude of the LineSpacing field will affect line spacing.
          LineSpacing and LineSpacingBaseline are absolute quantities in DIPs.
        </p>
        <p>
          If this property is set to Proportional, then the magnitude of the LineSpacing field will affect line spacing.
          LineSpacing and LineSpacingBaseline are amounts by which to scale the default line spacing and line spacing baseline, respectively.
        </p>
        <p>
          For example, to create a text layout for double-spaced text, use
          <code>
          var format = new CanvasTextFormat();
          
          var textLayout = new CanvasTextLayout("A piece of text", format, layoutWidth, layoutHeight);
          
          textLayout.LineSpacingMode = CanvasLineSpacingMode.Proportional;
          textLayout.LineSpacing = 2;
          
          </code>
        </p>
      </remarks>
    </member>
    
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.TrimmingSign">
      <summary>Specifies the type of trimming sign used, when text is drawn outside a text layout's requested size extents.</summary>
      <remarks>
        <p>
          By default, no trimming sign is used. The text will just appear chopped off, i.e., truncated.
        </p>
        <p>
          The appearance of an ellipsis trimming sign, if used, will reflect the defaults of this text layout.
          For example, <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontFamily"/>, and
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DefaultFontSize"/>.
        </p>
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DrawToTextRenderer(Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer,System.Numerics.Vector2)">
      <summary>Draws this text layout to an application-defined text renderer.</summary>
      <remarks>
        <see cref="T:Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer"/>
        is an interface that applications implement.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.DrawToTextRenderer(Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer,System.Single,System.Single)">
      <summary>Draws this text layout to an application-defined text renderer.</summary>
      <remarks>
        <see cref="T:Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer"/>
        is a type that applications implement.
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetInlineObject(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject)">
      <summary>Sets the inline object for a specified group of characters.</summary>
      <remarks>
        It's valid to use the same inline object for multiple character positions.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetInlineObject(System.Int32)">
      <summary>Gets the inline object for the character at the position specified.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.CustomTrimmingSign">
      <summary>Gets or sets a custom trimming sign.</summary>
      <remarks>
        <p>
          A custom trimming sign is represented by application-implemented interface.
          The application chooses arbitrary drawing behavior to use as a trimming sign.
        </p>
        <p>
          A custom trimming sign takes precedence over the text layout's TrimmingSign property.
          For example, if the TrimmingSign property is set to Ellipsis, and a custom trimming
          sign was set, then the custom trimming sign will get used- not the ellipsis one.
        </p>
      </remarks>
    </member>
    

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics">
      <summary>Describes a line of formatted text within a text layout.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.CharacterCount">
      <summary>The number of characters in the text line.</summary>
      <remarks>
         This includes any trailing whitespace and newline characters.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.TrailingWhitespaceCount">
      <summary>The number of whitespace characters at the end of the text line.</summary>
      <remarks>
         Newline sequences are considered whitespace.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.TerminalNewlineCount">
      <summary>The number of characters in the newline sequence at the end of the text line.</summary>
      <remarks>
          If the count is zero, then the text line was either wrapped or it is the end of the text.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.Height">
      <summary>The height of the text line, in DIPs.</summary>
      <remarks>
        <p>
          The height of a line in a text layout can be retrieved 
          straightforwardly through this field; it can also be equivalently
          calculated using the 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontFace.Ascent"/>, 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontFace.Descent"/>, 
          and
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontFace.LineGap"/>
          retrieved from the 
          <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasFontFace"/>
          passed to an app's custom text renderer's implementation of DrawGlyphRun.
          The spacing is the maximum, for all glyph runs in the line, of:
          <code>
              float defaultLineSpacing = (ascent + descent + lineGap) * fontSize;
          </code>
        </p>
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.Baseline">
      <summary>The distance, in DIPs, from the top of the text line to its baseline.</summary>
      <remarks>
        <p>
          The baseline of a line in a text layout can be retrieved 
          straightforwardly through this field; it can also be equivalently
          calculated using the 
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontFace.Ascent"/>,  
          and
          <see cref="P:Microsoft.Graphics.Canvas.Text.CanvasFontFace.LineGap"/>
          retrieved from the 
          <see cref="T:Microsoft.Graphics.Canvas.Text.CanvasFontFace"/>
          passed to an app's custom text renderer's implementation of DrawGlyphRun.          
          The baseline amount is the maximum, for all glyph runs in the line, of:
          <code>
              float defaultBaseline = (ascent + lineGap) * fontSize;
          </code>
        </p>
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.IsTrimmed">
      <summary>Indicates whether the line was trimmed.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.LeadingWhitespaceBefore">
      <summary>Size of the white space, in DIPs, before the content of the line.</summary>
      <remarks>
          <p>
            This quantity is included in the line height and baseline distances.
          </p>
          <p>
            If the layout's text direction is such that this line is read horizontally,
            then this value represents the extra space above the content.
            If the line is read vertically, then this value represents the space
            to the left of the content.
          </p>
      </remarks>=
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasLineMetrics.LeadingWhitespaceAfter">
      <summary>Size of the white space, in DIPs, after the content of the line.</summary>
      <remarks>
          <p>
            This quantity is included in the height of the line.
          </p>
          <p>
            If the layout's text direction is such that this line is read horizontally,
            then this value represents the extra space below the content.
            If the line is read vertically, then this value represents the space
            to the right of the content.
          </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LineMetrics">
      <summary>Gets an array of metrics describing each line.</summary>
      <remarks>
        As a convention, a text layout for a zero-length piece of text will still contain one line.
      </remarks>
    </member>

    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics">
      <summary>Describes a glyph cluster.</summary>
      <remarks>
        <p>
          A glyph cluster represents something drawn as one text character, and moves
          the text caret over by one position.
        </p>
        <p>
          In Latin script with no diacritics (accents), a glyph cluster is simply
          one character. But in general, a cluster can span multiple characters
          in a text string.
        </p>          
        <p>
          For example, a text layout created from "นี้" appears as if it's one glyph,
          but it spans three characters. It's a cluster with a CharacterCount of 3.
        </p>
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics.CharacterCount">
      <summary>The number of characters in the cluster.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics.Width">
      <summary>The advance width of all glyphs in the cluster.</summary>
      <remarks>
        Advance width is the distance, in DIPs, from the start of this glyph 
        cluster to the start of the next glyph cluster when this text layout is
        drawn.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics.Properties">
      <summary>The glyph cluster's properties.</summary>
    </member>
    <member name="T:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties">
      <summary>Properties which apply to a glyph cluster.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.None">
      <summary>Indicates that no attributes pertain to the cluster.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.CanWrapLineAfter">
      <summary>Indicates that a line can be broken right after the cluster.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.Whitespace">
      <summary>Indicates that the cluster corresponds to a whitespace character.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.Newline">
      <summary>Indicates that the cluster corresponds to a newline character.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.SoftHyphen">
      <summary>Indicates that the cluster corresponds to a soft hyphen character.</summary>
      <remarks>
        A soft hyphen is a special character for breaking words across lines. 
        It serves as a usually-invisible marker to place in a really long word
        where a break would be allowed. If word-wrapping is applied and the really long 
        word has to be broken, the text renderer can break the line at the position
        of the soft hyphen.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.Text.CanvasClusterProperties.RightToLeft">
      <summary>Indicates that the cluster is read from right to left.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.ClusterMetrics">
      <summary>Gets an array of metrics describing each cluster.</summary>
      <remarks>
        It's valid for a text layout to have zero clusters, in which case this 
        property returns a zero-sized array.
      </remarks>
    </member>    

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetCustomBrush(System.Int32,System.Int32,System.Object)">
      <summary>Sets the custom brush associated with a group of characters in the text layout.</summary>
      <remarks>
        <p>
          Custom brush objects are an arbitrary piece of metadata that can be 
          attached to a character position in a text layout, so that an app's 
          custom renderer can make sense of them. A custom brush object is
          passed to a text renderer's DrawGlyphRun, DrawUnderline,
          DrawStrikethrough, and DrawInlineObject callbacks.
        </p>
        <p>
          CanvasDrawingSession's
          <see cref="O:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawTextLayout"/> will ignore any custom brush which isn't an ICanvasBrush. 
        </p>
        <p>
          A custom brush replaces any other brush or color currently set to those characters using
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetBrush(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)"/> 
          or 
          <see cref="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetColor(System.Int32,System.Int32,Windows.UI.Color)"/>.
        </p>
        <p>
          A null custom brush is valid, and by default the brush assigned to all 
          characters in a text layout is null.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetCustomBrush(System.Int32)">
      <summary>Gets the custom brush associated with a character index in the text layout.</summary>
      <remarks>
        <p>
          A brush that was set using SetBrush can be retrieved via GetCustomBrush.
        </p>
      </remarks>
    </member>    

    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.LayoutBoundsIncludingTrailingWhitespace">
      <summary>Gets a rectangle describing the bounds of text, plus any trailing whitespace.</summary>
      <remarks>
        <p>
          The bounds are relative to the text's layout box.
          These bounds are in DIPs, and do not take into account any transforms that might be applied while rendering the text.
        </p>
        
        <p>
          The location of trailing whitespace is as follows:
        </p>

        <table>
          <tr>
            <th>Text direction</th>
            <th>Location of trailing whitespace</th>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenTopToBottom" /></td>
            <td>At the right</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenTopToBottom" /></td>
            <td>At the left</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.LeftToRightThenBottomToTop" /></td>
            <td>At the right</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.RightToLeftThenBottomToTop" /></td>
            <td>At the left</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenLeftToRight" /></td>
            <td>At the bottom</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenLeftToRight" /></td>
            <td>At the top</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.TopToBottomThenRightToLeft" /></td>
            <td>At the bottom</td>
          </tr>
          <tr>
            <td><see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextDirection.BottomToTopThenRightToLeft" /></td>
            <td>At the top</td>
          </tr>
        </table> 
        <p>
          Word wrapping isn't affected by trailing whitespace. To obtain the bounds against which Win2D word-wraps,
          use <see cref="F:Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion.LayoutBounds"/>.
        </p>
        
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.MaximumBidiReorderingDepth">
      <summary>Gets the maximum reordering depth for direction changes of bi-directional text.</summary>
      <remarks>
        <p>
           Every time there's left-to-right script embedded within right-to-left script, or vice-versa, 
           that represents one 'bidi' (bi-directional text) re-ordering level. Changes of script 
           direction can be nested within one another. This property gets the maximum level of such 
           nesting which exists anywhere in the text layout. 
        </p>
        <p>
          As a convention, if there is no text or if the script doesn't change directions, this property is 1.
        </p>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.SetTypography(System.Int32,System.Int32,Microsoft.Graphics.Canvas.Text.CanvasTypography)">
       <summary>
         Sets the typography features that affect a specified group of characters.
       </summary>
      <remarks>
        <p>
           It's valid to specify a null typography.
        </p>
        <p>
           CanvasTypography objects are mutable. Setting a typography object to character 
           positions in a text layout doesn't 'snap' its state. Rather, modifying a 
           CanvasTypography will affect any layouts to which it has been set.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetTypography(System.Int32)">
      <summary>
        Gets the typography features that affect the character at the position specified.
      </summary>
      <remarks>
        <p>
           The default typography is always null.
        </p>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.Text.CanvasTextLayout.GetGlyphOrientationTransform(Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation,System.Boolean,System.Numerics.Vector2)">
      <summary>Gets a transform matrix to use when drawing a glyph run.</summary>
      <remarks>
        <p>
          The returned transform matrix has the correct rotation and translation
          components for drawing text at the specified position and orientation. 
          Custom text renderers can use this method to determine glyph
          rotation, particularly if they wish to pass the DrawGlyphRun call along to 
          <see cref="O:Microsoft.Graphics.Canvas.CanvasDrawingSession.DrawGlyphRun">CanvasDrawingSession.DrawGlyphRun</see>,
          since CanvasDrawingSession.DrawGlyphRun doesn't auto-rotate glyphs.
        </p>
        <p>
          Moreover, this method exists for apps which want to draw a glyph run 
          using something other than the built-in renderer, CanvasDrawingSession.
        </p>
        <p>
          Apps shouldn't use this method when constructing geometry from text; 
          Win2D bakes that transform into the geometry.
        </p>
      </remarks>
    </member>

  </members>
</doc>
