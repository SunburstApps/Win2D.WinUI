<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<topic id="RefCycles" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        When using Win2D controls in managed XAML applications, care must be taken to 
        avoid reference count cycles that could prevent these controls ever being 
        reclaimed by the garbage collector.
      </para>
    </introduction>
    
    <section>
      <title>You have a problem if...</title>
      <content>
        <list class="bullet">
          <listItem>You are using Win2D from a .NET language such as C# (not native C++)</listItem>
          <listItem>You use one of the Win2D XAML controls:
            <list class="bullet">
              <listItem><codeEntityReference>T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl</codeEntityReference></listItem>
              <listItem><codeEntityReference>T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl</codeEntityReference></listItem>
              <listItem><codeEntityReference>T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl</codeEntityReference></listItem>
              <listItem><codeEntityReference>T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel</codeEntityReference></listItem>
            </list>
          </listItem>
          <listItem>You subscribe to events of the Win2D control (eg. Draw, CreateResources, SizeChanged...)</listItem>
          <listItem>Your app moves back and forth between more than one XAML page</listItem>
        </list>
        <para>
          If all these conditions are met, a reference count cycle will keep the Win2D 
          control from ever being garbage collected. New Win2D resources are allocated 
          each time the app moves to a different page, but the old ones are never freed 
          so memory is leaked. To avoid this, you must add code to explicitly break the 
          cycle.
        </para>
      </content>
    </section>

    <section>
      <title>How to fix it</title>
      <content>
        <para>
          To break the reference count cycle and let your page be garbage collected:
        </para>
        <list class="bullet">
          <listItem>Hook the Unloaded event of the XAML page which contains the Win2D control</listItem>
          <listItem>In the Unloaded handler, call RemoveFromVisualTree on the Win2D control</listItem>
          <listItem>In the Unloaded handler, release (by setting to null) any explicit references to the Win2D control</listItem>
        </list>
        <para>
          Example code:
        </para>
        <code language="cs">
          void page_Unloaded(object sender, RoutedEventArgs e)
          {
              this.canvas.RemoveFromVisualTree();
              this.canvas = null;
          }
        </code>
        <para>
          For working examples, see any of the
          <externalLink>
            <linkText>Example Gallery</linkText>
            <linkUri>http://github.com/Microsoft/Win2D-Samples/tree/master/ExampleGallery/Shared</linkUri>
          </externalLink>
          demo pages.
        </para>
      </content>
    </section>

    <section>
      <title>How to test for cycle leaks</title>
      <content>
        <para>
          To test whether your application is correctly breaking refcount cycles, add a 
          finalizer method to any XAML pages which contain Win2D controls:
        </para>
        <code language="cs">
          ~MyPage()
          {
              System.Diagnostics.Debug.WriteLine("~" + GetType().Name);
          }
        </code>
        <para>
          In your App constructor, set up a timer that will make sure garbage collection 
          occurs at regular intervals:
        </para>
        <code language="cs">
          var gcTimer = new DispatcherTimer();
          gcTimer.Tick += (sender, e) => { GC.Collect(); };
          gcTimer.Interval = TimeSpan.FromSeconds(1);
          gcTimer.Start();
        </code>
        <para>
          Navigate to the page, then away from it to some other page. If all cycles have 
          been broken, you will see Debug.WriteLine output in the Visual Studio output 
          pane within a second or two.
        </para>
        <para>
          Note that calling GC.Collect is disruptive and hurts performace, so you should 
          remove this test code as soon as you finish testing for leaks!
        </para>
      </content>
    </section>

    <section>
      <title>The gory details</title>
      <content>
        <para>
          A cycle occurs when an object A has a reference to B, at the same time as B 
          also has a reference to A. Or when A references B, and B references C, while C 
          references A, etc.
        </para>
        <para>
          When subscribing to events of a XAML control, this sort of cycle is pretty much 
          inevitable:
        </para>
        <list class="bullet">
          <listItem>XAML page holds references to all the controls contained within it</listItem>
          <listItem>Controls hold references to the handler delegates that have been 
          subscribed to their events</listItem>
          <listItem>Each delegate holds a reference to its target instance</listItem>
          <listItem>Event handlers are typically instance methods of the XAML page class, 
                    so their target instance references point back to the XAML page, 
                    creating a cycle</listItem>
        </list>
        <para>
          If all the objects involved are implemented in .NET, such cycles are 
          not a problem because .NET is garbage collected, and the garbage collection 
          algorithm is able to identify and reclaim groups of objects even if they are 
          linked in a cycle.
        </para>
        <para>
          Unlike .NET, C++ manages memory by reference counting, which is unable to 
          detect and reclaim cycles of objects. In spite of this limitation, C++ apps 
          using Win2D have no problem because C++ event handlers default to holding weak 
          rather than strong references to their target instance. Therefore the page 
          references the control, and the control references the event handler delegate, 
          but this delegate does not reference back to the page so there is no cycle.
        </para>
        <para>
          The problem comes when a C++ WinRT component such as Win2D is used by a .NET 
          application:
        </para>
        <list class="bullet">
          <listItem>The XAML page is part of the application, so uses garbage collection</listItem>
          <listItem>The Win2D control is implemented in C++, so uses reference counting</listItem>
          <listItem>The event handler delegate is part of the application, so uses 
                    garbage collection and holds a strong reference to its target 
                    instance</listItem>
        </list>
        <para>
          A cycle is present, but the Win2D objects participating in this cycle are not 
          using .NET garbage collection. This means the garbage collector is unable to 
          see the entire chain, so it cannot detect or reclaim the objects. When this 
          occurs, the application must help out by explicitly breaking the cycle. This 
          can be done either by releasing all references from the page to the control (as 
          recommended above) or by releasing all references from the control to event 
          handler delegates that might point back to the page (using the page Unloaded 
          event to unsubscribe all event handlers).
        </para>
      </content>
    </section>

  </developerConceptualDocument>
</topic>
