<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.CanvasBitmap">
      <summary>A bitmap is a 2D grid of pixels that form an image.</summary>
      <example>
        <p>To load and draw a bitmap, first add a <see cref="T:Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl"/> to your XAML page.</p>
        <p>Add the image files you want to display (png, jpeg, etc.) to your Visual Studio project,
           and make sure their Build Action is set to Content.</p>
        <p>In the page implementation class (eg. MainPage.xaml.cs), declare fields to hold the bitmaps:</p>
        <code>
          CanvasBitmap cat, mouse;
        </code>
        <p>Use the CreateResources event to asynchronously load the bitmaps:</p>
        <code>
          void myWidget_CreateResources(CanvasControl sender, object args)
          {
              args.TrackAsyncAction(CreateResourcesAsync(sender).AsAsyncAction());
          }
          
          async Task CreateResourcesAsync(CanvasControl sender)
          {
              cat = await CanvasBitmap.LoadAsync(sender, "ShawnsCat.jpg");
              mouse = await CanvasBitmap.LoadAsync(sender, "Mouse.png");
          }
        </code>
        <p>Use the Draw event to display them:</p>
        <code>
          void myWidget_Draw(CanvasControl sender, CanvasDrawEventArgs args)
          {
              args.DrawingSession.DrawImage(cat, 42, 42);
              args.DrawingSession.DrawImage(mouse, 123, 45);
          }
        </code>
      </example>
      <remarks>
        <p>
          When using <a href="Interop.htm">Direct2D interop</a>, this Win2D class
          corresponds to an ID2D1Bitmap1 without the D2D1_BITMAP_OPTIONS_TARGET flag.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.Dispose">
      <summary>Releases all resources used by the CanvasBitmap.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size">
      <summary>Gets the size of the bitmap, in device independent pixels (DIPs).</summary>
      <remarks>For more information, see <a href="DPI.htm">DPI and DIPs</a>.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.SizeInPixels">
      <summary>Gets the size of the bitmap, in pixels.</summary>
      <remarks>For more information, see <a href="DPI.htm">DPI and DIPs</a>.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds">
      <summary>Gets the bounds of the bitmap, in device independent pixels (DIPs).</summary>
      <remarks>
        <p>
          This property is a convenience shortcut for when you need the bitmap size in Rect format.
          The value of myBitmap.Bounds is Rect(Point(0, 0), myBitmap.Size).
        </p>
        <p>
          For more information, see <a href="DPI.htm">DPI and DIPs</a>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Dpi">
      <summary>Gets the dots-per-inch (DPI) of this bitmap.</summary>
      <remarks>
        <p>
          DPI describes the ratio between device independent pixels (DIPs) and actual physical pixels.
          The identity DPI value is 96, which means DIPs and pixels are the same.
        </p>
        <p>
          For more information, see <a href="DPI.htm">DPI and DIPs</a>.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Device">
      <summary>The device associated with this bitmap.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.AlphaMode">
      <summary>Gets the alpha mode of this bitmap.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format">
      <summary>Gets the pixel format of this bitmap.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.ConvertPixelsToDips(System.Int32)">
      <summary>Converts units from physical pixels to device independent pixels (DIPs) based on the DPI of this bitmap.</summary>
      <remarks>For more information, see <a href="DPI.htm">DPI and DIPs</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.ConvertDipsToPixels(System.Single,Microsoft.Graphics.Canvas.CanvasDpiRounding)">
      <summary>Converts units from device independent pixels (DIPs) to physical pixels based on the DPI of this bitmap.</summary>
      <remarks>For more information, see <a href="DPI.htm">DPI and DIPs</a>.</remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasBitmap.Description">
      <summary>The description of this bitmap's underlying surface.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface.</summary>
      <remarks>
        <p>
          The bitmap's properties are determined by the properties of the surface. If the surface is able to be used as
          a render target then a CanvasRenderTarget instance is actually returned. However, to avoid needing to cast, use
          <see cref="M:Microsoft.Graphics.Canvas.CanvasRenderTarget.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface)"/>.
        </p>
        <p>
          This will use the default (96) DPI. 
        </p>
        <p>
          The value of AlphaMode is determined by the pixel format of the surface. If the surface supports alpha, then the AlphaMode is set to
          CanvasAlphaMode.Premultiplied, otherwise it is set to CanvasAlphaMode.Ignore.
          See <a href="PixelFormats.htm">Pixel Formats</a> for more information about which formats support which alpha modes.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface,System.Single)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface.</summary>
      <remarks>
        <p>        
          The bitmap's properties are determined by the properties of the surface. If the surface is able to be used as
          a render target then a CanvasRenderTarget instance is actually returned. However, to avoid needing to cast, use
          <see cref="M:Microsoft.Graphics.Canvas.CanvasRenderTarget.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface)"/>.
        </p>
        <p>
          The value of AlphaMode is determined by the pixel format of the surface. If the surface supports alpha, then the AlphaMode is set to
          CanvasAlphaMode.Premultiplied, otherwise it is set to CanvasAlphaMode.Ignore.
          See <a href="PixelFormats.htm">Pixel Formats</a> for more information about which formats support which alpha modes.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Creates a CanvasBitmap from an existing Direct3D graphics surface, using the specified DPI and alpha behavior.</summary>
      <remarks>
        The bitmap's properties are determined by the properties of the surface. If the surface is able to be used as
        a render target then a CanvasRenderTarget instance is actually returned. However, to avoid needing to cast, use
        <see cref="M:Microsoft.Graphics.Canvas.CanvasRenderTarget.CreateFromDirect3D11Surface(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface)"/>.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Byte[],System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat)">
      <summary>Creates a CanvasBitmap from an array of bytes, using the specified pixel width/height, premultiplied alpha and default (96) DPI.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Byte[],System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat,System.Single)">
      <summary>Creates a CanvasBitmap from an array of bytes, using the specified pixel width/height, specified DPI, and premultiplied alpha.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Byte[],System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Creates a CanvasBitmap from an array of bytes, using the specified pixel width/height, DPI and alpha behavior.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IBuffer,System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat)">
      <summary>Creates a CanvasBitmap from the bytes of the specified buffer, using the specified pixel width/height, premultiplied alpha and default (96) DPI.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IBuffer,System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat,System.Single)">
      <summary>Creates a CanvasBitmap from the bytes of the specified buffer, using the specified pixel width/height, specified DPI, and premultiplied alpha.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IBuffer,System.Int32,System.Int32,Windows.Graphics.DirectX.DirectXPixelFormat,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Creates a CanvasBitmap from the bytes of the specified buffer, using the specified pixel width/height, DPI and alpha behavior.</summary>
      <remarks>List of <a href="PixelFormats.htm">supported pixel formats</a>.</remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.UI.Color[],System.Int32,System.Int32)">
      <summary>Creates a CanvasBitmap from an array of colors, using the specified pixel width/height, premultiplied alpha and default (96) DPI.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.UI.Color[],System.Int32,System.Int32,System.Single)">
      <summary>Creates a CanvasBitmap from an array of colors, using the specified pixel width/height, specified DPI, and premultiplied alpha.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.UI.Color[],System.Int32,System.Int32,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Creates a CanvasBitmap from an array of colors, using the specified pixel width/height, DPI and alpha behavior.</summary>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CreateFromSoftwareBitmap(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Graphics.Imaging.SoftwareBitmap)">
      <summary>Creates a CanvasBitmap from a SoftwareBitmap.</summary>
      <remarks>
        <p>
          The CanvasBitmap's Format is determined from the SoftwareBitmap's
          BitmapPixelFormat property.  Not all BitmapPixelFormats are supported
          by CanvasBitmap.  See <a href="PixelFormats.htm">Pixel Formats</a> for
          more details.
        </p>

        <p>
          The following table shows how each BitmapPixelFormat
          is interpreted:
        </p>
        
        <table>
          <tr>
            <th>sourceBitmap's BitmapPixelFormat</th>
            <th>CanvasBitmap's Format</th>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Unknown</td>
            <td>unsupported</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Rgba16</td>
            <td>DirectXPixelFormat.R16G16B16A16UIntNormalized</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Rgba8</td>
            <td>DirectXPixelFormat.R8G8B8A8UIntNormalized</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Gray16</td>
            <td>unsupported</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Gray8</td>
            <td>DirectXPixelFormat.A8UIntNormalized</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Bgra8</td>
            <td>DirectXPixelFormat.B8G8R8A8UIntNormalized</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Nv12</td>
            <td>unsupported</td>
          </tr>
          <tr>
            <td>BitmapPixelFormat.Yuy2</td>
            <td>unsupported</td>
          </tr>
        </table>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.)</summary>
      <remarks>
        <p>The bitmap is set to default (96) DPI and premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String,System.Single)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.), and assigns it the specified DPI.</summary>
      <remarks>
        <p>The bitmap is set to premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.String,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.), and assigns it the specified DPI and alpha behavior.</summary>
      <remarks>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>       
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Uri)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.) located at a URI.</summary>
      <remarks>
        <p>The bitmap is set to default (96) DPI and premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Uri,System.Single)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.) located at a URI, and assigns it the specified DPI.</summary>
      <remarks>
        <p>The bitmap is set to premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Uri,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Loads a bitmap from an image file (jpeg, png, etc.) located at a URI, and assigns it the specified DPI and alpha behavior.</summary>
      <remarks>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>      
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream)">
      <summary>Loads a bitmap from a stream.</summary>
      <remarks>
        <p>This method requires that the stream be readable. The bitmap is set to default (96) DPI and premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,System.Single)">
      <summary>Loads a bitmap from a stream, and assigns it the specified alpha behavior.</summary>
      <remarks>
        <p>This method requires that the stream be readable. The bitmap is set to premultiplied alpha.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator,Windows.Storage.Streams.IRandomAccessStream,System.Single,Microsoft.Graphics.Canvas.CanvasAlphaMode)">
      <summary>Loads a bitmap from a stream, and assigns it the specified DPI and alpha behavior.</summary>
      <remarks>
        <p>This method requires that the stream be readable.</p>
        <inherittemplate name="CanvasBitmap.LoadAsync-hdr"/>
      </remarks>
    </member>

    <template name="CanvasBitmap.LoadAsync-hdr">
      <p>
        When loading a <see cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR"/>
        format bitmap that contains high dynamic range (HDR) pixel data, the loaded bitmap
        may use one of the pixel formats:
      </p>
      <ul>
        <li>DirectXPixelFormat.R16G16B16A16Float</li>
        <li>DirectXPixelFormat.R32G32B32A32Float</li>
        <li>DirectXPixelFormat.R16G16B16A16UIntNormalized</li>
      </ul>
      <p>
        For all other file formats, or when the current device does not support high dynamic range pixel formats
        (as reported by <see cref="M:Microsoft.Graphics.Canvas.CanvasDevice.IsPixelFormatSupported(Windows.Graphics.DirectX.DirectXPixelFormat)"/>),
        the loaded bitmap will use DirectXPixelFormat.B8G8R8A8UIntNormalized.
      </p>
    </template>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveAsync(System.String)">
      <summary>Saves the entire bitmap to a file with the specified file name, using a default quality level of 0.9 and CanvasBitmapFileFormat.Auto.</summary>
      <remarks>
        <p>CanvasBitmapFileFormat.Auto will determine which encoding format to use based on the file extension.</p>
        <inherittemplate name="CanvasBitmap.SaveAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveAsync(System.String,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat)">
      <summary>Saves the entire bitmap to a file with the specified file name and file format, and a default quality level of 0.9.</summary>
      <remarks>
        <inherittemplate name="CanvasBitmap.SaveAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveAsync(System.String,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single)">
      <summary>Saves the entire bitmap to a file with the specified file name and file format, and quality level.</summary>
      <remarks>
        <inherittemplate name="CanvasBitmap.SaveAsync-hdr"/>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveAsync(Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat)">
      <summary>Saves the entire bitmap to the specified stream with the specified file format, using a default quality level of 0.9.</summary>
      <remarks>
        <p>The stream must be writeable. CanvasBitmapFileFormat.Auto is not allowed with this method.</p>
        <inherittemplate name="CanvasBitmap.SaveAsync-hdr"/>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SaveAsync(Windows.Storage.Streams.IRandomAccessStream,Microsoft.Graphics.Canvas.CanvasBitmapFileFormat,System.Single)">
      <summary>Saves the entire bitmap to the specified stream with the specified file format and quality level.</summary>
      <remarks>
        <p>The stream must be writeable. CanvasBitmapFileFormat.Auto is not allowed with this method.</p>
        <inherittemplate name="CanvasBitmap.SaveAsync-hdr"/>
      </remarks>
    </member>

    <template name="CanvasBitmap.SaveAsync-hdr">
      <p>
        To save image data using a high dynamic range (HDR) pixel format, use
        <see cref="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR"/>
        format and provide a bitmap using one of the pixel formats:
      </p>
      <ul>
        <li>DirectXPixelFormat.R16G16B16A16Float</li>
        <li>DirectXPixelFormat.R32G32B32A32Float</li>
        <li>DirectXPixelFormat.R16G16B16A16UIntNormalized</li>
      </ul>
    </template>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelBytes">
      <summary>Returns an array of raw byte data for the entire bitmap.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            For uncompressed texture formats, the size of the array is
            SizeInPixels.Width * SizeInPixels.Height * (bytes per pixel).  The
            number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UIntNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the size of the array is
            SizeInPixels.Width * SizeInPixels.Height * (bytes per block) /
            16. See <a href="BlockCompression.htm">Bitmap block compression</a>
            page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns an array of raw byte data for a subregion of the bitmap.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            For uncompressed texture formats, the size of the array is width *
            height * (bytes per pixel).  The number of bytes per pixel is
            determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the size of the array is
            width * height * (bytes per block) /
            16. See <a href="BlockCompression.htm">Bitmap block compression</a>
            page for more information.
          </li>
        </ul>
      </remarks>    
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelBytes(Windows.Storage.Streams.IBuffer)">
      <summary>Copies raw byte data for the entire bitmap into the specified buffer.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            For uncompressed texture formats, the capacity of the buffer must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            pixel).  The number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the capacity of the buffer must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            block) / 16. See <a href="BlockCompression.htm">Bitmap block
            compression</a> page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelBytes(Windows.Storage.Streams.IBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Copies raw byte data for a subregion of the bitmap into the specified buffer.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            For uncompressed texture formats, the capacity of the buffer must be
            at least width * height * (bytes per pixel).  The number of bytes
            per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the capacity of the buffer must be
            at least width * height * (bytes per block) / 16. See <a
            href="BlockCompression.htm">Bitmap block compression</a> page for
            more information.
          </li>
        </ul>
      </remarks>    
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelColors">
      <summary>Returns an array of color data for the entire bitmap.</summary>
      <remarks>
        <ul>
          <li>
            The <see cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>
            must be DirectXPixelFormat.B8G8R8A8UintNormalized.
          </li>
          <li>
            The size of the returned array is SizeInPixels.Width * SizeInPixels.Height.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetPixelColors(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns an array of color data for a subregion of the bitmap.</summary>
      <remarks>
        <ul>
          <li>
            The <see cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>
            must be DirectXPixelFormat.B8G8R8A8UintNormalized.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            The size of the returned array is width * height.
          </li>
        </ul>
      </remarks>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelBytes(System.Byte[])">
      <summary>Sets the byte data of the bitmap from the specified array.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            For uncompressed texture formats, the size of the array must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            pixel).  The number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the size of the array must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            block) / 16. See <a href="BlockCompression.htm">Bitmap block
            compression</a> page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelBytes(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the byte data of a subregion of the bitmap.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            For uncompressed texture formats, the size of the array must be
            at least width * height * (bytes per
            pixel).  The number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the size of the array must be
            at least width * height * (bytes per
            block) / 16. See <a href="BlockCompression.htm">Bitmap block
            compression</a> page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelBytes(Windows.Storage.Streams.IBuffer)">
      <summary>Sets the byte data of the bitmap from the specified buffer.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            For uncompressed texture formats, the length of the buffer must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            pixel).  The number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the length of the buffer must be
            at least SizeInPixels.Width * SizeInPixels.Height * (bytes per
            block) / 16. See <a href="BlockCompression.htm">Bitmap block
            compression</a> page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelBytes(Windows.Storage.Streams.IBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the byte data of a subregion of the bitmap from the specified buffer.</summary>
      <remarks>
        <ul>
          <li>
            Works on bitmaps of any format.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            For uncompressed texture formats, the length of the buffer must be
            at least width * height * (bytes per
            pixel).  The number of bytes per pixel is determined by <see
            cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>. For a
            CanvasBitmap with the default format of
            DirectXPixelFormat.B8G8R8A8UintNormalized this is 4.
          </li>
          <li>
            For block compressed texture formats, the length of the buffer must be
            at least width * height * (bytes per
            block) / 16. See <a href="BlockCompression.htm">Bitmap block
            compression</a> page for more information.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelColors(Windows.UI.Color[])">
      <summary>Sets the color data of the bitmap from the specified array.</summary>
      <remarks>
        <ul>
          <li>
            The <see cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>
            must be DirectXPixelFormat.B8G8R8A8UintNormalized.
          </li>
          <li>
            The size of the array must be at least SizeInPixels.Width *
            SizeInPixels.Height.
          </li>
        </ul>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.SetPixelColors(Windows.UI.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the color data for a subregion of the bitmap from the specified array.</summary>
      <remarks>
        <ul>
          <li>
            The <see cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Format"/>
            must be DirectXPixelFormat.B8G8R8A8UintNormalized.
          </li>
          <li>
            left, top, width and height are specified in pixels (not DIPs).
          </li>
          <li>
            The size of the array must be at least width * height.
          </li>
        </ul>
      </remarks>
    </member>

    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBounds(Microsoft.Graphics.Canvas.ICanvasResourceCreator)">
      <summary>Retrieves the bounds of this CanvasBitmap.</summary>
      <remarks>
        <inheritdoc/>
        <p>
          <b>Note:</b> CanvasBitmap also has the <see
          cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds"/> and <see
          cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size"/> properties that
          can be used to directly query the bounds or size.
        </p>
      </remarks>
      <seealso cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds"/>
      <seealso cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size"/>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.GetBounds(Microsoft.Graphics.Canvas.ICanvasResourceCreator,System.Numerics.Matrix3x2)">
      <summary>Retrieves the bounds of this CanvasBitmap.</summary>
      <remarks>
        <inheritdoc/>
        <p>
          <b>Note:</b> CanvasBitmap also has the <see
          cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds"/> and <see
          cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size"/> properties that
          can be used to directly query the bounds or size.
        </p>
      </remarks>
      <seealso cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Bounds"/>
      <seealso cref="P:Microsoft.Graphics.Canvas.CanvasBitmap.Size"/>
    </member>
    
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyPixelsFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap)">
      <summary>Copies the entire bitmap specified into this bitmap, at position (0, 0).</summary>
      <remarks>
        <p>
          The bitmap specified must be able to fit, and the pixel formats must match.
        </p>
        <p>
          It's an error to copy a bitmap onto itself.
        </p>
        <p>
          This method is most efficient when both bitmaps were created from the same
          CanvasDevice, but is also able to copy between bitmaps of different devices.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyPixelsFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap,System.Int32,System.Int32)">
      <summary>Copies the entire bitmap specified into this bitmap at the point specified.</summary>
      <remarks>
        <p>
          The bitmap specified must be able to fit, and the pixel formats must match.
          The destination point is specified in pixels (not DIPs).
        </p>
        <p>
          It's an error to copy a bitmap onto itself.
        </p>
        <p>
          This method is most efficient when both bitmaps were created from the same
          CanvasDevice, but is also able to copy between bitmaps of different devices.
        </p>
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasBitmap.CopyPixelsFromBitmap(Microsoft.Graphics.Canvas.CanvasBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Copies the specified region of a bitmap into this bitmap, at the point specified.</summary>
      <remarks>
        <p>
          The region must be able to fit, and the pixel formats of the two bitmaps must match.
          The destination point and source region are specified in pixels (not DIPs).
        </p>
        <p>
          It's an error to copy a bitmap onto itself.
        </p>
        <p>
          This method is most efficient when both bitmaps were created from the same
          CanvasDevice, but is also able to copy between bitmaps of different devices.
        </p>
      </remarks>
    </member>
  
    <member name="T:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat">
      <summary>This denotes the format used when saving a bitmap to a file.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Auto">
      <summary>The actual encoding used is determined from the file extension. If the file extension is not recognized, an error is reported.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Bmp">
      <summary>Indicates Windows Imaging Component's bitmap encoder.</summary>
      <remarks>
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Png">
      <summary>Indicates Windows Imaging Component's PNG encoder.</summary>
      <remarks>
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Jpeg">
      <summary>Indicates Windows Imaging Component's bitmap JPEG encoder.</summary>
      <remarks>
      This format supports the selection of a quality level, between 0.0 and 1.0. Quality 0.0 will produce a low quality image with a small file size. Quality 1.0 will produce a high quality image with a large file size.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Tiff">
      <summary>Indicates Windows Imaging Component's TIFF encoder.</summary>
      <remarks>
       This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.Gif">
      <summary>Indicates Windows Imaging Component's GIF encoder.</summary>
      <remarks>
      This file format doesn't support different quality levels. Different values for 'quality', if specified, will produce the same result.
      </remarks>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasBitmapFileFormat.JpegXR">
      <summary>Indicates Windows Imaging Component's JPEGXR encoder.</summary>
      <remarks>
      This format supports the selection of a quality level, between 0.0 and 1.0. Quality 0.0 will produce a low quality image with a small file size. Quality 1.0 will produce a high quality image with a large file size.
      This format is called Windows Media Photo (WMP) in some documentation.
      </remarks>
    </member>

  </members>
</doc>
