// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

namespace Microsoft.Graphics.Canvas.Geometry
{
    runtimeclass CanvasPathBuilder;
    runtimeclass CanvasGeometry;

    [version(VERSION), uuid(BCF5822F-8127-4E5C-96B8-29983B915541), exclusiveto(CanvasPathBuilder)]
    interface ICanvasPathBuilder : IInspectable
        requires Windows.Foundation.IClosable
    {
        [overload("BeginFigure"), default_overload]
        HRESULT BeginFigureWithFigureFill(
            [in] NUMERICS.Vector2 startPoint,
            [in] CanvasFigureFill figureFill);

        [overload("BeginFigure"), default_overload]
        HRESULT BeginFigure(
            [in] NUMERICS.Vector2 startPoint);

        [overload("BeginFigure"), default_overload]
        HRESULT BeginFigureAtCoordsWithFigureFill(
            [in] float startX,
            [in] float startY,
            [in] CanvasFigureFill figureFill);

        [overload("BeginFigure")]
        HRESULT BeginFigureAtCoords(
            [in] float startX,
            [in] float startY);

        [overload("AddArc")]
        HRESULT AddArcToPoint(
            [in] NUMERICS.Vector2 endPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] float rotationAngle,
            [in] CanvasSweepDirection sweepDirection,
            [in] CanvasArcSize arcSize);

        [overload("AddArc")]
        HRESULT AddArcAroundEllipse(
            [in] NUMERICS.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] float startAngle,
            [in] float sweepAngle);

        HRESULT AddCubicBezier(
            [in] NUMERICS.Vector2 controlPoint1,
            [in] NUMERICS.Vector2 controlPoint2,
            [in] NUMERICS.Vector2 endPoint);

        [overload("AddLine"), default_overload]
        HRESULT AddLine(
            [in] NUMERICS.Vector2 endPoint);

        [overload("AddLine")]
        HRESULT AddLineWithCoords(
            [in] float x,
            [in] float y);

        HRESULT AddQuadraticBezier(
            [in] NUMERICS.Vector2 controlPoint,
            [in] NUMERICS.Vector2 endPoint);

        HRESULT SetFilledRegionDetermination(
            [in] CanvasFilledRegionDetermination filledRegionDetermination);

        HRESULT SetSegmentOptions(
            [in] CanvasFigureSegmentOptions figureSegmentOptions);

        HRESULT EndFigure(
            [in] CanvasFigureLoop figureLoop);

        HRESULT AddGeometry(
            [in] CanvasGeometry* geometry);
    }

    [version(VERSION), uuid(AC2BEE14-EFD1-4343-8E53-BA62153D8966), exclusiveto(CanvasPathBuilder)]
    interface ICanvasPathBuilderFactory : IInspectable
    {
        HRESULT Create(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [out, retval] CanvasPathBuilder** canvasPathBuilder);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasPathBuilderFactory, VERSION)]
    runtimeclass CanvasPathBuilder
    {
        [default] interface ICanvasPathBuilder;
    }

}
