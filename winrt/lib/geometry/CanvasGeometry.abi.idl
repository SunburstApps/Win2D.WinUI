// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

namespace Microsoft.Graphics.Canvas.Geometry
{
    runtimeclass CanvasGeometry;

    [version(VERSION)]
    typedef struct CanvasTriangleVertices
    {
        NUMERICS.Vector2 Vertex1;
        NUMERICS.Vector2 Vertex2;
        NUMERICS.Vector2 Vertex3;
    } CanvasTriangleVertices;

    //
    // Applications implement this interface to recieve back the contents of
    // geometry.
    // If the geometry was created using CanvasGeometry.CreatePath, this 
    // is a straightforward operation.
    // Otherwise, a CanvasGeometry.Simplify may occur, and the results
    // are sent to the ICanvasPathReceiver.
    //
    // If the underlying path data contains calls to a method which is
    // a simple overload- for example, AddLines instead of AddLine,
    // apps need only implement AddLine, and that function will be
    // called repeatedly as necessary.
    //
    [version(VERSION), uuid(70E65373-7FB3-4645-8B6D-F616D1B9A9D7)]
    interface ICanvasPathReceiver : IInspectable
    {
        HRESULT BeginFigure(
            [in] NUMERICS.Vector2 startPoint,
            [in] CanvasFigureFill figureFill);

        HRESULT AddArc(
            [in] NUMERICS.Vector2 endPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] float rotationAngle,
            [in] CanvasSweepDirection sweepDirection,
            [in] CanvasArcSize arcSize);

        HRESULT AddCubicBezier(
            [in] NUMERICS.Vector2 controlPoint1,
            [in] NUMERICS.Vector2 controlPoint2,
            [in] NUMERICS.Vector2 endPoint);

        HRESULT AddLine(
            [in] NUMERICS.Vector2 endPoint);

        HRESULT AddQuadraticBezier(
            [in] NUMERICS.Vector2 controlPoint,
            [in] NUMERICS.Vector2 endPoint);

        HRESULT SetFilledRegionDetermination(
            [in] CanvasFilledRegionDetermination filledRegionDetermination);

        HRESULT SetSegmentOptions(
            [in] CanvasFigureSegmentOptions figureSegmentOptions);

        HRESULT EndFigure(
            [in] CanvasFigureLoop figureLoop);
    };

    [version(VERSION), uuid(74EA89FA-C87C-4D0D-9057-2743B8DB67EE), exclusiveto(CanvasGeometry)]
    interface ICanvasGeometry : IInspectable
        requires Windows.Foundation.IClosable
    {
        ///////////////////////////////////////////////////////////////////////
        // The methods below return geometries.
        [overload("CombineWith")]
        HRESULT CombineWith(
            [in] CanvasGeometry* otherGeometry,
            [in] NUMERICS.Matrix3x2 otherGeometryTransform,
            [in] CanvasGeometryCombine combine,
            [out, retval] CanvasGeometry** geometry);

        [overload("CombineWith"), default_overload]
        HRESULT CombineWithUsingFlatteningTolerance(
            [in] CanvasGeometry* otherGeometry,
            [in] NUMERICS.Matrix3x2 otherGeometryTransform,
            [in] CanvasGeometryCombine combine,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Stroke
        [overload("Stroke")]
        HRESULT Stroke(
            [in] float strokeWidth,
            [out, retval] CanvasGeometry** geometry);

        [overload("Stroke"), default_overload]
        HRESULT StrokeWithStrokeStyle(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] CanvasGeometry** geometry);

        [overload("Stroke"), default_overload]
        HRESULT StrokeWithAllOptions(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Outline
        [overload("Outline")]
        HRESULT Outline(
            [out, retval] CanvasGeometry** geometry);

        [overload("Outline"), default_overload]
        HRESULT OutlineWithTransformAndFlatteningTolerance(
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        // Simplify
        [overload("Simplify")]
        HRESULT Simplify(
            [in] CanvasGeometrySimplification simplification,
            [out, retval] CanvasGeometry** geometry);

        [overload("Simplify"), default_overload]
        HRESULT SimplifyWithTransformAndFlatteningTolerance(
            [in] CanvasGeometrySimplification simplification,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);

        HRESULT Transform(
            [in] NUMERICS.Matrix3x2 transform,
            [out, retval] CanvasGeometry** geometry);

        ///////////////////////////////////////////////////////////////////////
        // The methods below return primitive types.

        // CompareWith
        // This method uses the default flattening tolerance.
        [overload("CompareWith")]
        HRESULT CompareWith(
            [in] CanvasGeometry* otherGeometry,
            [out, retval] CanvasGeometryRelation* relation);

        [overload("CompareWith"), default_overload]
        HRESULT CompareWithUsingTransformAndFlatteningTolerance(
            [in] CanvasGeometry* otherGeometry,
            [in] NUMERICS.Matrix3x2 otherGeometryTransform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometryRelation* relation);

        // ComputeArea
        [overload("ComputeArea")]
        HRESULT ComputeArea(
            [out, retval] float* area);

        [overload("ComputeArea"), default_overload]
        HRESULT ComputeAreaWithTransformAndFlatteningTolerance(
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] float* area);

        // ComputePathLength
        [overload("ComputePathLength")]
        HRESULT ComputePathLength(
            [out, retval] float* length);

        [overload("ComputePathLength"), default_overload]
        HRESULT ComputePathLengthWithTransformAndFlatteningTolerance(
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] float* length);

        // ComputePointOnPath
        [overload("ComputePointOnPath")]
        HRESULT ComputePointOnPath(
            [in] float distance,
            [out, retval] NUMERICS.Vector2* point);

        [overload("ComputePointOnPath"), default_overload]
        HRESULT ComputePointOnPathWithTangent(
            [in] float distance,
            [out] NUMERICS.Vector2* tangent,
            [out, retval] NUMERICS.Vector2* point);

        [overload("ComputePointOnPath"), default_overload]
        HRESULT ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(
            [in] float length,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out] NUMERICS.Vector2* tangent,
            [out, retval] NUMERICS.Vector2* point);

        // FillContainsPoint
        [overload("FillContainsPoint")]
        HRESULT FillContainsPoint(
            [in] NUMERICS.Vector2 point,
            [out, retval] boolean* containsPoint);

        [overload("FillContainsPoint"), default_overload]
        HRESULT FillContainsPointWithTransformAndFlatteningTolerance(
            [in] NUMERICS.Vector2 point,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] boolean* containsPoint);

        // ComputeBounds
        [overload("ComputeBounds")]
        HRESULT ComputeBounds(
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeBounds"), default_overload]
        HRESULT ComputeBoundsWithTransform(
            [in] NUMERICS.Matrix3x2 transform,
            [out, retval] Windows.Foundation.Rect* bounds);

        // ComputeStrokeBounds
        [overload("ComputeStrokeBounds")]
        HRESULT ComputeStrokeBounds(
            [in] float strokeWidth,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeStrokeBounds"), default_overload]
        HRESULT ComputeStrokeBoundsWithStrokeStyle(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("ComputeStrokeBounds"), default_overload]
        HRESULT ComputeStrokeBoundsWithAllOptions(
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] Windows.Foundation.Rect* bounds);

        // StrokeContainsPoint
        [overload("StrokeContainsPoint")]
        HRESULT StrokeContainsPoint(
            [in] NUMERICS.Vector2 point,
            [in] float strokeWidth,
            [out, retval] boolean* containsPoint);

        [overload("StrokeContainsPoint"), default_overload]
        HRESULT StrokeContainsPointWithStrokeStyle(
            [in] NUMERICS.Vector2 point,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [out, retval] boolean* containsPoint);

        [overload("StrokeContainsPoint"), default_overload]
        HRESULT StrokeContainsPointWithAllOptions(
            [in] NUMERICS.Vector2 point,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] boolean* containsPoint);

        // Tessellate
        [overload("Tessellate")]
        HRESULT Tessellate(
            [out] UINT32* trianglesCount,
            [out, size_is(, *trianglesCount), retval] CanvasTriangleVertices** triangles);

        [overload("Tessellate")]
        HRESULT TessellateWithTransformAndFlatteningTolerance(
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out] UINT32* trianglesCount,
            [out, size_is(, *trianglesCount), retval] CanvasTriangleVertices** triangles);

        HRESULT SendPathTo(ICanvasPathReceiver* streamReader);

        [propget] HRESULT Device([out, retval] Microsoft.Graphics.Canvas.CanvasDevice** value);
    }

    [version(VERSION), uuid(D94E33CF-CD59-46F2-8DF4-55066AABFD56), exclusiveto(CanvasGeometry)]
    interface ICanvasGeometryStatics : IInspectable
    {
        [overload("CreateRectangle"), default_overload]
        HRESULT CreateRectangle(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Rect rect,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateRectangle")]
        HRESULT CreateRectangleAtCoords(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [out, retval] CanvasGeometry** geometry); 

        [overload("CreateRoundedRectangle"), default_overload]
        HRESULT CreateRoundedRectangle(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateRoundedRectangle")]
        HRESULT CreateRoundedRectangleAtCoords(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateEllipse"), default_overload]
        HRESULT CreateEllipse(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateEllipse")]
        HRESULT CreateEllipseAtCoords(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateCircle"), default_overload]
        HRESULT CreateCircle(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector2 centerPoint,
            [in] float radius,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateCircle")]
        HRESULT CreateCircleAtCoords(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float x,
            [in] float y,
            [in] float radius,
            [out, retval] CanvasGeometry** geometry);

        HRESULT CreatePath(
            [in] CanvasPathBuilder* pathBuilder,
            [out, retval] CanvasGeometry** geometry);

        HRESULT CreatePolygon(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 pointCount,
            [in, size_is(pointCount)] NUMERICS.Vector2* points,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateGroup")]
        HRESULT CreateGroup(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 geometriesCount,
            [in, size_is(geometriesCount)] CanvasGeometry** geometries,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateGroup"), default_overload]
        HRESULT CreateGroupWithFilledRegionDetermination(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 geometriesCount,
            [in, size_is(geometriesCount)] CanvasGeometry** geometries,
            [in] CanvasFilledRegionDetermination filledRegionDetermination,
            [out, retval] CanvasGeometry** geometry);

        HRESULT CreateText(
            [in] Microsoft.Graphics.Canvas.Text.CanvasTextLayout* textLayout,
            [out, retval] CanvasGeometry** geometry);

        HRESULT CreateGlyphRun(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector2 point,
            [in] Microsoft.Graphics.Canvas.Text.CanvasFontFace* fontFace,
            [in] float fontSize,
            [in] UINT32 glyphCount,
            [in, size_is(glyphCount)] Microsoft.Graphics.Canvas.Text.CanvasGlyph* glyphs,
            [in] boolean isSideways,
            [in] UINT32 bidiLevel,
            [in] Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode measuringMode,
            [in] Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation glyphOrientation,
            [out, retval] CanvasGeometry** geometry);

#if WINVER > _WIN32_WINNT_WINBLUE
        [overload("CreateInk")]
        HRESULT CreateInk(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Collections.IIterable<Windows.UI.Input.Inking.InkStroke*>* inkStrokes,
            [out, retval] CanvasGeometry** geometry);

        [overload("CreateInk"), default_overload]
        HRESULT CreateInkWithTransformAndFlatteningTolerance(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.Foundation.Collections.IIterable<Windows.UI.Input.Inking.InkStroke*>* inkStrokes,
            [in] NUMERICS.Matrix3x2 transform,
            [in] float flatteningTolerance,
            [out, retval] CanvasGeometry** geometry);
#endif

        [overload("ComputeFlatteningTolerance")]
        HRESULT ComputeFlatteningTolerance(
            [in] float dpi,
            [in] float maximumZoomFactor,
            [out, retval] float* flatteningTolerance);

        [overload("ComputeFlatteningTolerance"), default_overload]
        HRESULT ComputeFlatteningToleranceWithTransform(
            [in] float dpi,
            [in] float maximumZoomFactor,
            [in] NUMERICS.Matrix3x2 expectedGeometryTransform,
            [out, retval] float* flatteningTolerance);

        [propget] HRESULT DefaultFlatteningTolerance([out, retval] float* value);
    }

    [STANDARD_ATTRIBUTES, static(ICanvasGeometryStatics, VERSION)]
    runtimeclass CanvasGeometry
    {
        [default] interface ICanvasGeometry;
        interface Windows.Graphics.IGeometrySource2D;
    }

}
