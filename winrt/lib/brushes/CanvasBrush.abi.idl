// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

namespace Microsoft.Graphics.Canvas.Brushes
{
    //
    // ICanvasBrush
    //
    [version(VERSION), uuid(F5D58591-C803-41B4-878E-79D92AB13295)]
    interface ICanvasBrush : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget]
        HRESULT Opacity([out, retval] float* value);

        [propput]
        HRESULT Opacity([in] float value);

        [propget]
        HRESULT Transform([out, retval] NUMERICS.Matrix3x2* value);

        [propput]
        HRESULT Transform([in] NUMERICS.Matrix3x2 value);

        [propget]
        HRESULT Device([out, retval] Microsoft.Graphics.Canvas.CanvasDevice** value);
    };

    //
    // ICanvasSolidColorBrush
    //
    runtimeclass CanvasSolidColorBrush;
    runtimeclass CanvasDevice;

    [version(VERSION), uuid(8ABF4780-4EDD-4F2B-BF63-2C385115B201), exclusiveto(CanvasSolidColorBrush)]
    interface ICanvasSolidColorBrushFactory : IInspectable
    {
        HRESULT Create(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color color,
            [out, retval] CanvasSolidColorBrush** canvasSolidColorBrush
            );
    };

    [version(VERSION), uuid(629B7244-5B9E-4EF8-8E09-264714201EE8), exclusiveto(CanvasSolidColorBrush)]
    interface ICanvasSolidColorBrushStatics : IInspectable
    {
        HRESULT CreateHdr(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector4 colorHdr,
            [out, retval] CanvasSolidColorBrush** canvasSolidColorBrush);
    }

    [version(VERSION), uuid(8BC30F87-BAD5-4871-88B8-9FE3C63D204A), exclusiveto(CanvasSolidColorBrush)]
    interface ICanvasSolidColorBrush : IInspectable
        requires ICanvasBrush
    {
        [propget] HRESULT Color([out, retval] Windows.UI.Color* value);
        [propput] HRESULT Color([in] Windows.UI.Color value);

        [propget] HRESULT ColorHdr([out, retval] NUMERICS.Vector4* value);
        [propput] HRESULT ColorHdr([in] NUMERICS.Vector4 value);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasSolidColorBrushFactory, VERSION), static(ICanvasSolidColorBrushStatics, VERSION)]
    runtimeclass CanvasSolidColorBrush
    {
        [default] interface ICanvasSolidColorBrush;
    }    

    //
    // ICanvasImageBrush
    //
    runtimeclass CanvasImageBrush;

    [version(VERSION), uuid(C40CCB59-1B87-4394-A6A6-ECD278E877D6), exclusiveto(CanvasImageBrush)]
    interface ICanvasImageBrushFactory : IInspectable
    {
        HRESULT Create(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [out, retval] CanvasImageBrush** canvasImageBrush
            );

        HRESULT CreateWithImage(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Microsoft.Graphics.Canvas.ICanvasImage* image,
            [out, retval] CanvasImageBrush** canvasImageBrush
            );
    };

    [version(VERSION), uuid(5A21C4E7-D450-4942-8BBD-F017097AB763), exclusiveto(CanvasImageBrush)]
    interface ICanvasImageBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT Image([out, retval] Microsoft.Graphics.Canvas.ICanvasImage** value);

        [propput]
        HRESULT Image([in] Microsoft.Graphics.Canvas.ICanvasImage* value);

        [propget]
        HRESULT ExtendX([out, retval] Microsoft.Graphics.Canvas.CanvasEdgeBehavior* value);

        [propput]
        HRESULT ExtendX([in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

        [propget]
        HRESULT ExtendY([out, retval] Microsoft.Graphics.Canvas.CanvasEdgeBehavior* value);

        [propput]
        HRESULT ExtendY([in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior value);

        [propget]
        HRESULT SourceRectangle([out, retval] Windows.Foundation.IReference<Windows.Foundation.Rect>** value);

        [propput]
        HRESULT SourceRectangle([in] Windows.Foundation.IReference<Windows.Foundation.Rect>* value);

        [propget]
        HRESULT Interpolation([out, retval] Microsoft.Graphics.Canvas.CanvasImageInterpolation* value);

        [propput]
        HRESULT Interpolation([in] Microsoft.Graphics.Canvas.CanvasImageInterpolation value);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasImageBrushFactory, VERSION)]
    runtimeclass CanvasImageBrush
    {
        [default] interface ICanvasImageBrush;
    }    

    //
    // Common gradient data
    //
    [version(VERSION)]
    typedef struct CanvasGradientStop
    {
        float Position;
        Windows.UI.Color Color;
    } CanvasGradientStop;

    [version(VERSION)]
    typedef struct CanvasGradientStopHdr
    {
        float Position;
        NUMERICS.Vector4 Color;
    } CanvasGradientStopHdr;

    //
    // ICanvasLinearGradientBrush
    //
    runtimeclass CanvasLinearGradientBrush;

    [version(VERSION), uuid(A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrushFactory : IInspectable
    {
        // Defaults to color interpolation sRGB-premultiplied, and CLAMP extend mode.
        HRESULT CreateSimple(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color startColor,
            [in] Windows.UI.Color endColor,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        // Defaults to clamp edge behavior, premultiplied alpha, color interpolation sRGB-premultiplied.
        HRESULT CreateWithStops(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        //
        // Defaults to color interpolation sRGB-premultiplied.
        //
        // While it may also be convenient to have an overload that takes edge
        // behavior but not alpha mode, the # of projected arguments in that
        // would conflict with CreateSimple. 
        //
        HRESULT CreateWithEdgeBehaviorAndAlphaMode(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        // Exposes all creation options.
        HRESULT CreateWithEdgeBehaviorAndInterpolationOptions(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);
    }

    [version(VERSION), uuid(E9DE3392-8FBF-478C-8E6A-D0A0EA753B37), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrushStatics : IInspectable
    {
        [overload("CreateHdr")]
        HRESULT CreateHdrSimple(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector4 startColorHdr,
            [in] NUMERICS.Vector4 endColorHdr,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithStops(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStopsHdr,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithEdgeBehaviorAndAlphaMode(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStopsHdr,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithEdgeBehaviorAndInterpolationOptions(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStopsHdr,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        
        HRESULT CreateRainbow(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float eldritchness,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);
    }

    [version(VERSION), uuid(A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT StartPoint([out, retval] NUMERICS.Vector2* value);

        [propput]
        HRESULT StartPoint([in] NUMERICS.Vector2 value);

        [propget]
        HRESULT EndPoint([out, retval] NUMERICS.Vector2* value);

        [propput]
        HRESULT EndPoint([in] NUMERICS.Vector2 value);

        [propget]
        HRESULT Stops(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStop** valueElements);

        [propget]
        HRESULT StopsHdr(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStopHdr** valueElements);

        [propget]
        HRESULT EdgeBehavior([out, retval] Microsoft.Graphics.Canvas.CanvasEdgeBehavior* value);

        [propget]
        HRESULT PreInterpolationSpace([out, retval] Microsoft.Graphics.Canvas.CanvasColorSpace* value);

        [propget]
        HRESULT PostInterpolationSpace([out, retval] Microsoft.Graphics.Canvas.CanvasColorSpace* value);

        [propget]
        HRESULT BufferPrecision([out, retval] Microsoft.Graphics.Canvas.CanvasBufferPrecision* value);

        [propget]
        HRESULT AlphaMode([out, retval] Microsoft.Graphics.Canvas.CanvasAlphaMode* value);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasLinearGradientBrushFactory, VERSION), static(ICanvasLinearGradientBrushStatics, VERSION)]
    runtimeclass CanvasLinearGradientBrush
    {
        [default] interface ICanvasLinearGradientBrush;
    }

    //
    // RadialGradientBrush
    //
    runtimeclass CanvasRadialGradientBrush;

    [version(VERSION), uuid(7933A51F-A910-4548-849F-42DDEC466F41), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrushFactory : IInspectable
    {
        // Defaults to color interpolation sRGB-premultiplied, and CLAMP extend mode.
        HRESULT CreateSimple(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color startColor,
            [in] Windows.UI.Color endColor,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        // Defaults to clamp edge behavior, premultiplied alpha, color interpolation sRGB-premultiplied.
        HRESULT CreateWithStops(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        // Defaults to color interpolation sRGB-premultiplied.
        HRESULT CreateWithEdgeBehaviorAndAlphaMode(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        // Exposes all creation options.
        HRESULT CreateWithEdgeBehaviorAndInterpolationOptions(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);
    }

    [version(VERSION), uuid(3B0D4DAE-3E21-4818-99B4-779ACAAF18BE), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrushStatics : IInspectable
    {
        [overload("CreateHdr")]
        HRESULT CreateHdrSimple(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] NUMERICS.Vector4 startColorHdr,
            [in] NUMERICS.Vector4 endColorHdr,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithStops(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStops,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithEdgeBehaviorAndAlphaMode(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        [overload("CreateHdr")]
        HRESULT CreateHdrWithEdgeBehaviorAndInterpolationOptions(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStopHdr* gradientStops,
            [in] Microsoft.Graphics.Canvas.CanvasEdgeBehavior edgeBehavior,
            [in] Microsoft.Graphics.Canvas.CanvasAlphaMode alphaMode,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace preInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasColorSpace postInterpolationSpace,
            [in] Microsoft.Graphics.Canvas.CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        
        HRESULT CreateRainbow(
            [in] Microsoft.Graphics.Canvas.ICanvasResourceCreator* resourceCreator,
            [in] float eldritchness,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);
    };

    [version(VERSION), uuid(4D27D756-14A9-4EB7-973F-E6614D4F89E7), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT Center([out, retval] NUMERICS.Vector2* value);

        [propput]
        HRESULT Center([in] NUMERICS.Vector2 value);

        [propget]
        HRESULT OriginOffset([out, retval] NUMERICS.Vector2* value);

        [propput]
        HRESULT OriginOffset([in] NUMERICS.Vector2 value);

        [propget]
        HRESULT RadiusX([out, retval] float* value);

        [propput]
        HRESULT RadiusX([in] float value);

        [propget]
        HRESULT RadiusY([out, retval] float* value);

        [propput]
        HRESULT RadiusY([in] float value);

        [propget]
        HRESULT Stops(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStop** valueElements);

        [propget]
        HRESULT StopsHdr(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStopHdr** valueElements);

        [propget]
        HRESULT EdgeBehavior([out, retval] Microsoft.Graphics.Canvas.CanvasEdgeBehavior* value);

        [propget]
        HRESULT PreInterpolationSpace([out, retval] Microsoft.Graphics.Canvas.CanvasColorSpace* value);

        [propget]
        HRESULT PostInterpolationSpace([out, retval] Microsoft.Graphics.Canvas.CanvasColorSpace* value);

        [propget]
        HRESULT BufferPrecision([out, retval] Microsoft.Graphics.Canvas.CanvasBufferPrecision* value);

        [propget]
        HRESULT AlphaMode([out, retval] Microsoft.Graphics.Canvas.CanvasAlphaMode* value);
    };

    [STANDARD_ATTRIBUTES, activatable(ICanvasRadialGradientBrushFactory, VERSION), static(ICanvasRadialGradientBrushStatics, VERSION)]
    runtimeclass CanvasRadialGradientBrush
    {
        [default] interface ICanvasRadialGradientBrush;
    }

}
