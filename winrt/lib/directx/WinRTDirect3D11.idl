// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

//
// Types that are bound to Direct3D 11.
//

#ifndef USE_LOCALLY_EMULATED_UAP_APIS

#define IDIRECT3DDEVICE Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
#define IDIRECT3DSURFACE Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface

#else

#define IDIRECT3DDEVICE Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DDevice
#define IDIRECT3DSURFACE Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface

namespace Microsoft.Graphics.Canvas.DirectX.Direct3D11
{
    //
    // Direct3DMultisampleDescription -- this is a WinRT projection of
    // DXGI_SAMPLE_DESC
    //
    [version(VERSION)]
    typedef struct Direct3DMultisampleDescription
    {
        INT32 Count;
        INT32 Quality;
    } Direct3DMultisampleDescription;


    //
    // Direct3DSurfaceDescription -- this is a WinRT projection of
    // DXGI_SURFACE_DESC.
    //
    [version(VERSION)]
    typedef struct Direct3DSurfaceDescription
    {
        INT32 Width;
        INT32 Height;
        DIRECTX_PIXEL_FORMAT Format;
        Direct3DMultisampleDescription MultisampleDescription;
    } Direct3DSurfaceDescription;


    //
    // Direct3DUsage -- this is a WinRT projection of D3D11_USAGE
    //
    [version(VERSION)]
    typedef enum Direct3DUsage
    {
        Default = 0,            // D3D11_USAGE_DEFAULT
        Immutable = 1,          // D3D11_USAGE_IMMUTABLE
        Dynamic = 2,            // D3D11_USAGE_DYNAMIC
        Staging = 3             // D3D11_USAGE_STAGING
    } xDirect3DUsage;


    //
    // Direct3DBindings -- this is a WinRT projection of D3D11_BIND_FLAG
    //
    // WinRT bans 'Flags' as an enum name suffix.
    //
    [version(VERSION), flags]
    typedef enum Direct3DBindings
    {
        VertexBuffer    = 0x001, // D3D11_BIND_VERTEX_BUFFER
        IndexBuffer     = 0x002, // D3D11_BIND_INDEX_BUFFER
        ConstantBuffer  = 0x004, // D3D11_BIND_CONSTANT_BUFFER
        ShaderResource  = 0x008, // D3D11_BIND_SHADER_RESOURCE
        StreamOutput    = 0x010, // D3D11_BIND_STREAM_OUTPUT
        RenderTarget    = 0x020, // D3D11_BIND_RENDER_TARGET
        DepthStencil    = 0x040, // D3D11_BIND_DEPTH_STENCIL
        UnorderedAccess = 0x080, // D3D11_BIND_UNORDERED_ACCESS
        Decoder         = 0x200, // D3D11_BIND_DECODER
        VideoEncoder    = 0x400  // D3D11_BIND_VIDEO_ENCODER
    } xDirect3DBindings;


    //
    // interface: IDirect3DDevice
    //
    // This represents an IDXGIDevice and can be used to interop between
    // components that need to exchange IDXGIDevice references.  The COM
    // interface, IDXGIInterfaceAccess, can be used to obtain the IDXGIDevice.
    //

    [version(VERSION), 
     uuid(24F4A47F-911C-4E60-AA3B-556B15CD8CE6)]
    interface IDirect3DDevice : IInspectable
        requires Windows.Foundation.IClosable
    {
        //
        // Calls IDXGIDevice3::Trim()
        //
        HRESULT Trim();
    }

    //
    // interface: IDirect3DSurface
    //
    // This represents an IDXGISurface and can be used to interop between
    // components that need to exchange IDXGISurface references.  The COM
    // interface, IDXGIInterfaceAccess, can be used to obtain the IDXGISurface.
    //

    [version(VERSION),
     uuid(04E9D2A5-9AA1-47DA-9FFC-D481CDDAC4EE)]
    interface IDirect3DSurface : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget] HRESULT Description(
            [out, retval] Direct3DSurfaceDescription* value);
    }
}

#endif
