// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

#if WINVER > _WIN32_WINNT_WINBLUE

namespace Microsoft.Graphics.Canvas.UI.Composition
{
    runtimeclass CanvasComposition;

    [version(VERSION), uuid(162DEB43-1CF5-46F8-A0AF-356B23158F92), exclusiveto(CanvasComposition)]
    interface ICanvasCompositionStatics : IInspectable
    {
        //
        // Compositor interop
        //
        

        HRESULT CreateCompositionGraphicsDevice(
            [in]          Microsoft.UI.Composition.Compositor* compositor,
            [in]          Microsoft.Graphics.Canvas.CanvasDevice* canvasDevice,
            [out, retval] Microsoft.UI.Composition.CompositionGraphicsDevice** graphicsDevice);

        HRESULT CreateCompositionSurfaceForSwapChain(
            [in]          Microsoft.UI.Composition.Compositor* compositor,
            [in]          Microsoft.Graphics.Canvas.CanvasSwapChain* swapChain,
            [out, retval] Microsoft.UI.Composition.ICompositionSurface** compositionSurface);

        
        //
        // CompositionGraphicsDevice interop
        //

        
        HRESULT GetCanvasDevice(
            [in]          Microsoft.UI.Composition.CompositionGraphicsDevice* graphicsDevice,
            [out, retval] Microsoft.Graphics.Canvas.CanvasDevice** canvasDevice);

        HRESULT SetCanvasDevice(
            [in] Microsoft.UI.Composition.CompositionGraphicsDevice* graphicsDevice,
            [in] Microsoft.Graphics.Canvas.CanvasDevice* canvasDevice);

        
        //
        // CompositionDrawingSurface interop
        //

        
        // NOTE: no ClearColor here.  It's up to apps to decide if they want to
        // clear or if they want to just draw over the entire region.  (Differs
        // from CanvasImageSource where we apply this policy).
        [overload("CreateDrawingSession")]
        HRESULT CreateDrawingSession(
            [in]          Microsoft.UI.Composition.CompositionDrawingSurface* drawingSurface,
            [out, retval] Microsoft.Graphics.Canvas.CanvasDrawingSession** drawingSession);

        [overload("CreateDrawingSession")]
        HRESULT CreateDrawingSessionWithUpdateRect(
            [in]          Microsoft.UI.Composition.CompositionDrawingSurface* drawingSurface,
            [in]          Windows.Foundation.Rect updateRect,
            [out, retval] Microsoft.Graphics.Canvas.CanvasDrawingSession** drawingSession);

        [overload("CreateDrawingSession")]
        HRESULT CreateDrawingSessionWithUpdateRectAndDpi(
            [in]          Microsoft.UI.Composition.CompositionDrawingSurface* drawingSurface,
            [in]          Windows.Foundation.Rect updateRectInPixels,
            [in]          float dpi,
            [out, retval] Microsoft.Graphics.Canvas.CanvasDrawingSession** drawingSession);

        // NOTE: sizeInPixels is converted to integer by rounding (rather than
        // truncating).  This is to match the behavior of CreateDrawingSurface.
        HRESULT Resize(
            [in] Microsoft.UI.Composition.CompositionDrawingSurface* drawingSurface,
            [in] Windows.Foundation.Size sizeInPixels);
    }

    [STANDARD_ATTRIBUTES, static(ICanvasCompositionStatics, VERSION)]
    runtimeclass CanvasComposition
    {
    }
}

#endif
