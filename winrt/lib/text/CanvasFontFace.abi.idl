// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

import "inspectable.idl";
import "Windows.Foundation.idl";
import "Microsoft.UI.Text.idl";

namespace Microsoft.Graphics.Canvas.Text
{
    runtimeclass CanvasFontFace;

    [version(VERSION)]
    typedef enum CanvasTextMeasuringMode
    {
        Natural,
        GdiClassic,
        GdiNatural
    } CanvasTextMeasuringMode;

    [version(VERSION)]
    typedef enum CanvasFontFileFormatType
    {
        Cff,
        TrueType,
        TrueTypeCollection,
        Type1,
        Vector,
        Bitmap,
        Unknown,
        RawCff
    } CanvasFontFileFormatType;

    [version(VERSION), flags]
    typedef enum CanvasFontSimulations
    {
        None = 0,
        Bold = 1,
        Oblique = 2
    } CanvasFontSimulations;

    [version(VERSION)]
    typedef enum CanvasFontInformation
    {
        None,
        CopyrightNotice,
        VersionStrings,
        Trademark,
        Manufacturer,
        Designer,
        DesignerUrl,
        Description,
        FontVendorUrl,
        LicenseDescription,
        LicenseInfoUrl,
        Win32FamilyNames,
        Win32SubfamilyNames,
        PreferredFamilyNames,
        PreferredSubfamilyNames,
        SampleText,
        FullName,
        PostscriptName,
        PostscriptCidName,
        WwsFamilyName,
        DesignScriptLanguageTag,
        SupportedScriptLanguageTag
    } CanvasFontInformation;

    [version(VERSION)]
    typedef struct CanvasUnicodeRange
    {
        UINT32 First;
        UINT32 Last;
    } CanvasUnicodeRange;

    [version(VERSION)]
    typedef struct CanvasGlyph
    {
        int Index;
        float Advance;
        float AdvanceOffset;
        float AscenderOffset;
    } CanvasGlyph;

    [version(VERSION)]
    typedef struct CanvasGlyphMetrics
    {
        float LeftSideBearing;
        float AdvanceWidth;
        float RightSideBearing;
        float TopSideBearing;
        float AdvanceHeight;
        float BottomSideBearing;
        float VerticalOrigin;
        Windows.Foundation.Rect DrawBounds;
    } CanvasGlyphMetrics;

    [version(VERSION)]
    typedef enum CanvasScriptShape
    {
        Default,
        NoVisual
    } CanvasScriptShape;

    [version(VERSION)]
    typedef struct CanvasAnalyzedScript
    {
        INT32 ScriptIdentifier;
        CanvasScriptShape Shape;
    } CanvasAnalyzedScript;

    [version(VERSION), uuid(5199D129-4EF9-4DEE-B74C-4DC910201A7F), exclusiveto(CanvasFontFace)]
    interface ICanvasFontFace : IInspectable
        requires Windows.Foundation.IClosable
    {
        [overload("GetRecommendedRenderingMode")]
        HRESULT GetRecommendedRenderingMode(
            [in] float fontSize,
            [in] float dpi,
            [in] CanvasTextMeasuringMode measuringMode,
            [in] CanvasTextRenderingParameters* renderingParameters,
            [out, retval] CanvasTextRenderingMode* renderingMode);

        [overload("GetRecommendedRenderingMode")]
        HRESULT GetRecommendedRenderingModeWithAllOptions(
            [in] float fontSize,
            [in] float dpi,
            [in] CanvasTextMeasuringMode measuringMode,
            [in] CanvasTextRenderingParameters* renderingParameters,
            [in] NUMERICS.Matrix3x2 transform,
            [in] boolean isSideways,
            [in] Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold,
            [out, retval] CanvasTextRenderingMode* renderingMode);

        HRESULT GetRecommendedGridFit(
            [in] float fontSize,
            [in] float dpi,
            [in] CanvasTextMeasuringMode measuringMode,
            [in] CanvasTextRenderingParameters* renderingParameters,
            [in] NUMERICS.Matrix3x2 transform,
            [in] boolean isSideways,
            [in] Microsoft.Graphics.Canvas.CanvasAntialiasing outlineThreshold,
            [out, retval] CanvasTextGridFit* gridFit);

        // Properties below are font metrics, exposed via individual properties
        // rather than a returned struct. They are converted from design space
        // to em space before being returned.

        // Accumulated bounding box of all glyphs in the font.
        [propget] HRESULT GlyphBox([out, retval] Windows.Foundation.Rect* value);

        // Superscript/subscript metrics.
        [propget] HRESULT SubscriptPosition([out, retval] NUMERICS.Vector2* value);
        [propget] HRESULT SubscriptSize([out, retval]  Windows.Foundation.Size* value);
        [propget] HRESULT SuperscriptPosition([out, retval] NUMERICS.Vector2* value);
        [propget] HRESULT SuperscriptSize([out, retval]  Windows.Foundation.Size* value);

        // Whether the ascent, descent and lineGap values are typographic, or legacy.
        [propget] HRESULT HasTypographicMetrics([out, retval] boolean* value);

        // General positioning metrics
        [propget] HRESULT Ascent([out, retval] float* value);
        [propget] HRESULT Descent([out, retval] float* value);
        [propget] HRESULT LineGap([out, retval] float* value);
        [propget] HRESULT CapHeight([out, retval] float* value);
        [propget] HRESULT LowercaseLetterHeight([out, retval] float* value);
        [propget] HRESULT UnderlinePosition([out, retval] float* value);
        [propget] HRESULT UnderlineThickness([out, retval] float* value);
        [propget] HRESULT StrikethroughPosition([out, retval] float* value);
        [propget] HRESULT StrikethroughThickness([out, retval] float* value);

        // Caret metrics
        [propget] HRESULT CaretSlopeRise([out, retval] float* value);
        [propget] HRESULT CaretSlopeRun([out, retval] float* value);
        [propget] HRESULT CaretOffset([out, retval] float* value);

        [propget] HRESULT UnicodeRanges(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasUnicodeRange** valueElements);

        [propget] HRESULT IsMonospaced([out, retval] boolean* value);

        HRESULT GetVerticalGlyphVariants(
            [in] UINT32 inputCount,
            [in, size_is(inputCount)] int* inputElements,
            [out] UINT32* outputCount,
            [out, size_is(, *outputCount), retval] int** outputElements);

        [propget] HRESULT HasVerticalGlyphVariants([out, retval] boolean* value);

        [propget] HRESULT FileFormatType([out, retval] CanvasFontFileFormatType* value);

        [propget] HRESULT Simulations([out, retval] CanvasFontSimulations* value);

        [propget] HRESULT IsSymbolFont([out, retval] boolean* value);

        [propget] HRESULT GlyphCount([out, retval] UINT32* value);

        HRESULT GetGlyphIndices(
            [in] UINT32 inputCount,
            [in, size_is(inputCount)] UINT32* inputElements,
            [out] UINT32* outputCount,
            [out, size_is(, *outputCount), retval] int** outputElements);

        HRESULT GetGlyphMetrics(
          [in] UINT32 inputCount,
          [in, size_is(inputCount)] int* inputElements,
          [in] boolean isSideways,
          [out] UINT32* outputCount,
          [out, size_is(, *outputCount), retval] CanvasGlyphMetrics** outputElements);

        HRESULT GetGdiCompatibleGlyphMetrics(
          [in] float fontSize,
          [in] float dpi,
          [in] NUMERICS.Matrix3x2 transform,
          [in] boolean useGdiNatural,
          [in] UINT32 inputCount,
          [in, size_is(inputCount)] int* inputElements,
          [in] boolean isSideways,
          [out] UINT32* outputCount,
          [out, size_is(, *outputCount), retval] CanvasGlyphMetrics** outputElements);

        [propget] HRESULT Weight([out, retval] Windows.UI.Text.FontWeight* value);
        [propget] HRESULT Stretch([out, retval] Windows.UI.Text.FontStretch* value);
        [propget] HRESULT Style([out, retval] Windows.UI.Text.FontStyle* value);

#if WINVER > _WIN32_WINNT_WINBLUE
        [propget] HRESULT FamilyNames([out, retval] Windows.Foundation.Collections.IMapView<HSTRING, HSTRING>** values);
#endif
        [propget] HRESULT FaceNames([out, retval] Windows.Foundation.Collections.IMapView<HSTRING, HSTRING>** values);

        // Returns null if the string was not found.
        HRESULT GetInformationalStrings(
            [in] CanvasFontInformation fontInformation,
            [out, retval] Windows.Foundation.Collections.IMapView<HSTRING, HSTRING>** values);

        HRESULT HasCharacter([in] UINT32 unicodeValue, [out, retval] boolean* value);

        [overload("GetGlyphRunBounds")]
        HRESULT GetGlyphRunBounds(
            [in] Microsoft.Graphics.Canvas.CanvasDrawingSession* drawingSession,
            [in] NUMERICS.Vector2 point,
            [in] float fontSize,
            [in] UINT32 glyphCount,
            [in, size_is(glyphCount)] CanvasGlyph* glyphs,
            [in] boolean isSideways,
            [in] UINT32 bidiLevel,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("GetGlyphRunBounds")]
        HRESULT GetGlyphRunBoundsWithMeasuringMode(
            [in] Microsoft.Graphics.Canvas.CanvasDrawingSession* drawingSession,
            [in] NUMERICS.Vector2 point,
            [in] float fontSize,
            [in] UINT32 glyphCount,
            [in, size_is(glyphCount)] CanvasGlyph* glyphs,
            [in] boolean isSideways,
            [in] UINT32 bidiLevel,
            [in] CanvasTextMeasuringMode measuringMode,
            [out, retval] Windows.Foundation.Rect* bounds);

        [propget] HRESULT Panose(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] BYTE** valueElements);

        //
        // Gets an array of all feature names supported by this font and script.
        // The feature may not be available for all glyphs, though.
        //
        // This method will only return tags that match OpenType features
        // represented by the CanvasTypographyFeatureName enum. 
        //
        [overload("GetSupportedTypographicFeatureNames")]
        HRESULT GetSupportedTypographicFeatureNames(
            [in] CanvasAnalyzedScript script,
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasTypographyFeatureName** valueElements);

        [overload("GetSupportedTypographicFeatureNames")]
        HRESULT GetSupportedTypographicFeatureNamesWithLocale(
            [in] CanvasAnalyzedScript script,
            [in] HSTRING locale,
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasTypographyFeatureName** valueElements);

        //
        // Takes an array of glyphs, and returns an array of bools as to whether
        // that glyph can use the feature.
        //
        [overload("GetTypographicFeatureGlyphSupport")]
        HRESULT GetTypographicFeatureGlyphSupport(
            [in] CanvasAnalyzedScript script,
            [in] CanvasTypographyFeatureName typographicFeatureName,
            [in] UINT32 glyphsCount,
            [in, size_is(glyphsCount)] CanvasGlyph* glyphsElements,
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] boolean** valueElements);

        [overload("GetTypographicFeatureGlyphSupport")]
        HRESULT GetTypographicFeatureGlyphSupportWithLocale(
            [in] CanvasAnalyzedScript script,
            [in] CanvasTypographyFeatureName typographicFeatureName,
            [in] UINT32 glyphsCount,
            [in, size_is(glyphsCount)] CanvasGlyph* glyphsElements,
            [in] HSTRING locale,
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] boolean** valueElements);

        // Not exposed: 
        // IsColorFont, GetColorPaletteCount, GetPaletteEntryCount, GetPaletteEntries. Color font properties aren't supported in Win2D.
        
        // GetGdiCompatibleMetrics. Used for legacy features.
        // GetGdiCompatibleGlyphMetrics - Used for legacy features.
        // GetGdiCompatibleGlyphAdvances. Used for legacy features

        // GetDesignGlyphAdvances. Redundant with GetDesignGlyphMetrics
        // GetKerningPairAdjustments, HasKerningPairs. Knobs for pair kerning are part of DWrite completeness.

        // GetFiles - Out of scope for enumeration scenarios.
        // GetIndex - Same.
        // TryGetFontTable, ReleaseFontTable - Out of scope for enumeration scenarios.

        // One of the overloads of GetRecommendedRenderingMode; it fits awkwardly with the others.

        // Font set builders. Out of scope for enumeration scenarios.
    }

    // Instances of CanvasFontFace are produced out of CanvasFontSet- not activated by the app.
    [STANDARD_ATTRIBUTES]
    runtimeclass CanvasFontFace
    {
        [default] interface ICanvasFontFace;
    }

    declare
    {
        interface Windows.Foundation.Collections.IVector<Windows.Foundation.Collections.IKeyValuePair<HSTRING, HSTRING>*>;
        interface Windows.Foundation.Collections.IVector<CanvasFontFace*>;
    }
}
