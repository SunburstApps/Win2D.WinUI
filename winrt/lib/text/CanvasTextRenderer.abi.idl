// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

namespace Microsoft.Graphics.Canvas.Text
{
    [version(VERSION), uuid(9AAEECE5-8D09-4A64-B322-AF030421B2E4)]
    interface ICanvasTextRenderer : IInspectable
    {
        //
        // The IInspectable custom brush passed to these text 
        // callbacks is allowed to be null. 
        // 
        // Win2D will pass this in as null if the drawing effect
        // on the DWrite text layout is some IUnknown, and
        // it is neither an ID2D1Brush nor an IInspectable.
        //

        HRESULT DrawGlyphRun(
            [in] NUMERICS.Vector2 point,
            [in] CanvasFontFace* fontFace,
            [in] float fontSize,
            [in] UINT32 glyphCount,
            [in, size_is(glyphCount)] CanvasGlyph* glyphs,
            [in] boolean isSideways,
            [in] UINT32 bidiLevel,
            [in] IInspectable* brush,
            [in] CanvasTextMeasuringMode measuringMode,
            [in] HSTRING localeName,
            [in] HSTRING textString,
            [in] UINT32 clusterMapIndicesCount,
            [in, size_is(clusterMapIndicesCount)] int* clusterMapIndices,
            [in] UINT32 characterIndex,
            [in] CanvasGlyphOrientation glyphOrientation);

        HRESULT DrawStrikethrough(
            [in] NUMERICS.Vector2 point,
            [in] float strikethroughWidth, // Parallel to the baseline.
            [in] float strikethroughThickness, // Perpendicular to the baseline.
            [in] float strikethroughOffset, // Usually negative, placing it above the baseline.
            [in] CanvasTextDirection textDirection,
            [in] IInspectable* brush,
            [in] CanvasTextMeasuringMode textMeasuringMode,
            [in] HSTRING localeName,
            [in] CanvasGlyphOrientation glyphOrientation);

        HRESULT DrawUnderline(
            [in] NUMERICS.Vector2 point,
            [in] float underlineWidth, // Parallel to the baseline.
            [in] float underlineThickness, // Perpendicular to the baseline.
            [in] float underlineOffset, // Usually negative, placing it above the baseline.
            [in] float runHeight, // The height of the tallest run where the underline is applied.
            [in] CanvasTextDirection textDirection,
            [in] IInspectable* brush,
            [in] CanvasTextMeasuringMode textMeasuringMode,
            [in] HSTRING localeName,
            [in] CanvasGlyphOrientation glyphOrientation);

        HRESULT DrawInlineObject(
            [in] NUMERICS.Vector2 point,
            [in] ICanvasTextInlineObject* inlineObject,
            [in] boolean isSideways,
            [in] boolean isRightToLeft,
            [in] IInspectable* brush,
            [in] CanvasGlyphOrientation glyphOrientation);

        [propget] HRESULT PixelSnappingDisabled(
            [out, retval] boolean* value);

        [propget] HRESULT Transform(
            [out, retval] NUMERICS.Matrix3x2* value);

        [propget] HRESULT Dpi(
            [out, retval] float* value);
    };

}
